
mega.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003440  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000058  00800060  00003440  000034b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002814  00000000  00000000  0000350c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d52  00000000  00000000  00005d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00006a72  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00006bb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00006d22  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  0000896b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00009856  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000a604  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000a764  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000a9f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b1bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e4       	ldi	r30, 0x40	; 64
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3b       	cpi	r26, 0xB8	; 184
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 3c 10 	call	0x2078	; 0x2078 <main>
      7a:	0c 94 1e 1a 	jmp	0x343c	; 0x343c <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 e7 19 	jmp	0x33ce	; 0x33ce <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 ea       	ldi	r26, 0xA0	; 160
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 03 1a 	jmp	0x3406	; 0x3406 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 f3 19 	jmp	0x33e6	; 0x33e6 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 0f 1a 	jmp	0x341e	; 0x341e <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 f3 19 	jmp	0x33e6	; 0x33e6 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 0f 1a 	jmp	0x341e	; 0x341e <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 e7 19 	jmp	0x33ce	; 0x33ce <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 ea       	ldi	r24, 0xA0	; 160
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 03 1a 	jmp	0x3406	; 0x3406 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 f3 19 	jmp	0x33e6	; 0x33e6 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 0f 1a 	jmp	0x341e	; 0x341e <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 f3 19 	jmp	0x33e6	; 0x33e6 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 0f 1a 	jmp	0x341e	; 0x341e <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 f3 19 	jmp	0x33e6	; 0x33e6 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 0f 1a 	jmp	0x341e	; 0x341e <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 f7 19 	jmp	0x33ee	; 0x33ee <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <ADC_Init>:
#include "BIT_MATH.h"
#include "ADC_Register.h"


void ADC_Init(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
	//select Vref = ACVV = 5v
	SET_BIT(ADMUX,6);
     b3e:	a7 e2       	ldi	r26, 0x27	; 39
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	e7 e2       	ldi	r30, 0x27	; 39
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	80 64       	ori	r24, 0x40	; 64
     b4a:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,7);
     b4c:	a7 e2       	ldi	r26, 0x27	; 39
     b4e:	b0 e0       	ldi	r27, 0x00	; 0
     b50:	e7 e2       	ldi	r30, 0x27	; 39
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	80 81       	ld	r24, Z
     b56:	8f 77       	andi	r24, 0x7F	; 127
     b58:	8c 93       	st	X, r24
	
	//select right adjust result
	CLR_BIT(ADMUX,5);
     b5a:	a7 e2       	ldi	r26, 0x27	; 39
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	e7 e2       	ldi	r30, 0x27	; 39
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	8f 7d       	andi	r24, 0xDF	; 223
     b66:	8c 93       	st	X, r24
	
	// select channel
	ADMUX = ADMUX | 0b00000000;
     b68:	a7 e2       	ldi	r26, 0x27	; 39
     b6a:	b0 e0       	ldi	r27, 0x00	; 0
     b6c:	e7 e2       	ldi	r30, 0x27	; 39
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	80 81       	ld	r24, Z
     b72:	8c 93       	st	X, r24
	
	//enable ADC
	SET_BIT(ADCSRA,7);
     b74:	a6 e2       	ldi	r26, 0x26	; 38
     b76:	b0 e0       	ldi	r27, 0x00	; 0
     b78:	e6 e2       	ldi	r30, 0x26	; 38
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	80 68       	ori	r24, 0x80	; 128
     b80:	8c 93       	st	X, r24
	
	//select single conversion
	CLR_BIT(ADCSRA,5);
     b82:	a6 e2       	ldi	r26, 0x26	; 38
     b84:	b0 e0       	ldi	r27, 0x00	; 0
     b86:	e6 e2       	ldi	r30, 0x26	; 38
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	80 81       	ld	r24, Z
     b8c:	8f 7d       	andi	r24, 0xDF	; 223
     b8e:	8c 93       	st	X, r24
	
	//ADC Interrupt Disable
	CLR_BIT(ADCSRA,3);
     b90:	a6 e2       	ldi	r26, 0x26	; 38
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	e6 e2       	ldi	r30, 0x26	; 38
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	80 81       	ld	r24, Z
     b9a:	87 7f       	andi	r24, 0xF7	; 247
     b9c:	8c 93       	st	X, r24
	
	// prescaler select bits
	CLR_BIT(ADCSRA,0);
     b9e:	a6 e2       	ldi	r26, 0x26	; 38
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	e6 e2       	ldi	r30, 0x26	; 38
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	80 81       	ld	r24, Z
     ba8:	8e 7f       	andi	r24, 0xFE	; 254
     baa:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,1);
     bac:	a6 e2       	ldi	r26, 0x26	; 38
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	e6 e2       	ldi	r30, 0x26	; 38
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 81       	ld	r24, Z
     bb6:	82 60       	ori	r24, 0x02	; 2
     bb8:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,1);
     bba:	a6 e2       	ldi	r26, 0x26	; 38
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	e6 e2       	ldi	r30, 0x26	; 38
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	82 60       	ori	r24, 0x02	; 2
     bc6:	8c 93       	st	X, r24
	
	
}
     bc8:	cf 91       	pop	r28
     bca:	df 91       	pop	r29
     bcc:	08 95       	ret

00000bce <ADC_ReadValue>:

u16 ADC_ReadValue(u8 CH_NUM)
{
     bce:	df 93       	push	r29
     bd0:	cf 93       	push	r28
     bd2:	0f 92       	push	r0
     bd4:	cd b7       	in	r28, 0x3d	; 61
     bd6:	de b7       	in	r29, 0x3e	; 62
     bd8:	89 83       	std	Y+1, r24	; 0x01
	
	//select channel
	ADMUX=ADMUX&0b11100000;
     bda:	a7 e2       	ldi	r26, 0x27	; 39
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e7 e2       	ldi	r30, 0x27	; 39
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	80 7e       	andi	r24, 0xE0	; 224
     be6:	8c 93       	st	X, r24
	ADMUX=ADMUX|CH_NUM;
     be8:	a7 e2       	ldi	r26, 0x27	; 39
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	e7 e2       	ldi	r30, 0x27	; 39
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	90 81       	ld	r25, Z
     bf2:	89 81       	ldd	r24, Y+1	; 0x01
     bf4:	89 2b       	or	r24, r25
     bf6:	8c 93       	st	X, r24
	
	// start conversion
	SET_BIT(ADCSRA,6);
     bf8:	a6 e2       	ldi	r26, 0x26	; 38
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	e6 e2       	ldi	r30, 0x26	; 38
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	80 64       	ori	r24, 0x40	; 64
     c04:	8c 93       	st	X, r24
	
	//wait until end conversion
	while(GET_BIT(ADCSRA,4)==0);
     c06:	e6 e2       	ldi	r30, 0x26	; 38
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	80 81       	ld	r24, Z
     c0c:	82 95       	swap	r24
     c0e:	8f 70       	andi	r24, 0x0F	; 15
     c10:	88 2f       	mov	r24, r24
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	81 70       	andi	r24, 0x01	; 1
     c16:	90 70       	andi	r25, 0x00	; 0
     c18:	00 97       	sbiw	r24, 0x00	; 0
     c1a:	a9 f3       	breq	.-22     	; 0xc06 <ADC_ReadValue+0x38>
	{
		
	}
	
	// clear ADIF
	SET_BIT(ADCSRA,4);
     c1c:	a6 e2       	ldi	r26, 0x26	; 38
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	e6 e2       	ldi	r30, 0x26	; 38
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	80 81       	ld	r24, Z
     c26:	80 61       	ori	r24, 0x10	; 16
     c28:	8c 93       	st	X, r24
	return ADC_D;
     c2a:	e4 e2       	ldi	r30, 0x24	; 36
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	91 81       	ldd	r25, Z+1	; 0x01
	
}
     c32:	0f 90       	pop	r0
     c34:	cf 91       	pop	r28
     c36:	df 91       	pop	r29
     c38:	08 95       	ret

00000c3a <BUZZER_operate>:
#include "DIO_Interface.h"

#define output 1

void BUZZER_operate(u8 Port, u8 pin, u8 value)
{
     c3a:	df 93       	push	r29
     c3c:	cf 93       	push	r28
     c3e:	00 d0       	rcall	.+0      	; 0xc40 <BUZZER_operate+0x6>
     c40:	0f 92       	push	r0
     c42:	cd b7       	in	r28, 0x3d	; 61
     c44:	de b7       	in	r29, 0x3e	; 62
     c46:	89 83       	std	Y+1, r24	; 0x01
     c48:	6a 83       	std	Y+2, r22	; 0x02
     c4a:	4b 83       	std	Y+3, r20	; 0x03
	DIO_VidSetPinDirection(Port ,pin, output);
     c4c:	89 81       	ldd	r24, Y+1	; 0x01
     c4e:	6a 81       	ldd	r22, Y+2	; 0x02
     c50:	41 e0       	ldi	r20, 0x01	; 1
     c52:	0e 94 36 06 	call	0xc6c	; 0xc6c <DIO_VidSetPinDirection>
	
	DIO_VidSetPinValue( Port ,  pin , value);
     c56:	89 81       	ldd	r24, Y+1	; 0x01
     c58:	6a 81       	ldd	r22, Y+2	; 0x02
     c5a:	4b 81       	ldd	r20, Y+3	; 0x03
     c5c:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_VidSetPinValue>
	
	
}
     c60:	0f 90       	pop	r0
     c62:	0f 90       	pop	r0
     c64:	0f 90       	pop	r0
     c66:	cf 91       	pop	r28
     c68:	df 91       	pop	r29
     c6a:	08 95       	ret

00000c6c <DIO_VidSetPinDirection>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "DIO_Register.h"

void DIO_VidSetPinDirection(u8 Port , u8 Pin_Num , u8 State)
{
     c6c:	df 93       	push	r29
     c6e:	cf 93       	push	r28
     c70:	cd b7       	in	r28, 0x3d	; 61
     c72:	de b7       	in	r29, 0x3e	; 62
     c74:	27 97       	sbiw	r28, 0x07	; 7
     c76:	0f b6       	in	r0, 0x3f	; 63
     c78:	f8 94       	cli
     c7a:	de bf       	out	0x3e, r29	; 62
     c7c:	0f be       	out	0x3f, r0	; 63
     c7e:	cd bf       	out	0x3d, r28	; 61
     c80:	89 83       	std	Y+1, r24	; 0x01
     c82:	6a 83       	std	Y+2, r22	; 0x02
     c84:	4b 83       	std	Y+3, r20	; 0x03
	if (State == 1)  //direction is output
     c86:	8b 81       	ldd	r24, Y+3	; 0x03
     c88:	81 30       	cpi	r24, 0x01	; 1
     c8a:	09 f0       	breq	.+2      	; 0xc8e <DIO_VidSetPinDirection+0x22>
     c8c:	6f c0       	rjmp	.+222    	; 0xd6c <DIO_VidSetPinDirection+0x100>
	{
		switch(Port)
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
     c90:	28 2f       	mov	r18, r24
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	3f 83       	std	Y+7, r19	; 0x07
     c96:	2e 83       	std	Y+6, r18	; 0x06
     c98:	8e 81       	ldd	r24, Y+6	; 0x06
     c9a:	9f 81       	ldd	r25, Y+7	; 0x07
     c9c:	81 30       	cpi	r24, 0x01	; 1
     c9e:	91 05       	cpc	r25, r1
     ca0:	49 f1       	breq	.+82     	; 0xcf4 <DIO_VidSetPinDirection+0x88>
     ca2:	2e 81       	ldd	r18, Y+6	; 0x06
     ca4:	3f 81       	ldd	r19, Y+7	; 0x07
     ca6:	22 30       	cpi	r18, 0x02	; 2
     ca8:	31 05       	cpc	r19, r1
     caa:	2c f4       	brge	.+10     	; 0xcb6 <DIO_VidSetPinDirection+0x4a>
     cac:	8e 81       	ldd	r24, Y+6	; 0x06
     cae:	9f 81       	ldd	r25, Y+7	; 0x07
     cb0:	00 97       	sbiw	r24, 0x00	; 0
     cb2:	61 f0       	breq	.+24     	; 0xccc <DIO_VidSetPinDirection+0x60>
     cb4:	d2 c0       	rjmp	.+420    	; 0xe5a <DIO_VidSetPinDirection+0x1ee>
     cb6:	2e 81       	ldd	r18, Y+6	; 0x06
     cb8:	3f 81       	ldd	r19, Y+7	; 0x07
     cba:	22 30       	cpi	r18, 0x02	; 2
     cbc:	31 05       	cpc	r19, r1
     cbe:	71 f1       	breq	.+92     	; 0xd1c <DIO_VidSetPinDirection+0xb0>
     cc0:	8e 81       	ldd	r24, Y+6	; 0x06
     cc2:	9f 81       	ldd	r25, Y+7	; 0x07
     cc4:	83 30       	cpi	r24, 0x03	; 3
     cc6:	91 05       	cpc	r25, r1
     cc8:	e9 f1       	breq	.+122    	; 0xd44 <DIO_VidSetPinDirection+0xd8>
     cca:	c7 c0       	rjmp	.+398    	; 0xe5a <DIO_VidSetPinDirection+0x1ee>
		{
			case 0: SET_BIT(DDRA,Pin_Num);  break;
     ccc:	aa e3       	ldi	r26, 0x3A	; 58
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	ea e3       	ldi	r30, 0x3A	; 58
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	48 2f       	mov	r20, r24
     cd8:	8a 81       	ldd	r24, Y+2	; 0x02
     cda:	28 2f       	mov	r18, r24
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	02 2e       	mov	r0, r18
     ce4:	02 c0       	rjmp	.+4      	; 0xcea <DIO_VidSetPinDirection+0x7e>
     ce6:	88 0f       	add	r24, r24
     ce8:	99 1f       	adc	r25, r25
     cea:	0a 94       	dec	r0
     cec:	e2 f7       	brpl	.-8      	; 0xce6 <DIO_VidSetPinDirection+0x7a>
     cee:	84 2b       	or	r24, r20
     cf0:	8c 93       	st	X, r24
     cf2:	b3 c0       	rjmp	.+358    	; 0xe5a <DIO_VidSetPinDirection+0x1ee>
			case 1: SET_BIT(DDRB,Pin_Num);  break;
     cf4:	a7 e3       	ldi	r26, 0x37	; 55
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	e7 e3       	ldi	r30, 0x37	; 55
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	48 2f       	mov	r20, r24
     d00:	8a 81       	ldd	r24, Y+2	; 0x02
     d02:	28 2f       	mov	r18, r24
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	02 2e       	mov	r0, r18
     d0c:	02 c0       	rjmp	.+4      	; 0xd12 <DIO_VidSetPinDirection+0xa6>
     d0e:	88 0f       	add	r24, r24
     d10:	99 1f       	adc	r25, r25
     d12:	0a 94       	dec	r0
     d14:	e2 f7       	brpl	.-8      	; 0xd0e <DIO_VidSetPinDirection+0xa2>
     d16:	84 2b       	or	r24, r20
     d18:	8c 93       	st	X, r24
     d1a:	9f c0       	rjmp	.+318    	; 0xe5a <DIO_VidSetPinDirection+0x1ee>
			case 2: SET_BIT(DDRC,Pin_Num);  break;
     d1c:	a4 e3       	ldi	r26, 0x34	; 52
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	e4 e3       	ldi	r30, 0x34	; 52
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	48 2f       	mov	r20, r24
     d28:	8a 81       	ldd	r24, Y+2	; 0x02
     d2a:	28 2f       	mov	r18, r24
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	02 2e       	mov	r0, r18
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <DIO_VidSetPinDirection+0xce>
     d36:	88 0f       	add	r24, r24
     d38:	99 1f       	adc	r25, r25
     d3a:	0a 94       	dec	r0
     d3c:	e2 f7       	brpl	.-8      	; 0xd36 <DIO_VidSetPinDirection+0xca>
     d3e:	84 2b       	or	r24, r20
     d40:	8c 93       	st	X, r24
     d42:	8b c0       	rjmp	.+278    	; 0xe5a <DIO_VidSetPinDirection+0x1ee>
			case 3: SET_BIT(DDRD,Pin_Num);  break;
     d44:	a1 e3       	ldi	r26, 0x31	; 49
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	e1 e3       	ldi	r30, 0x31	; 49
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	48 2f       	mov	r20, r24
     d50:	8a 81       	ldd	r24, Y+2	; 0x02
     d52:	28 2f       	mov	r18, r24
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	02 2e       	mov	r0, r18
     d5c:	02 c0       	rjmp	.+4      	; 0xd62 <DIO_VidSetPinDirection+0xf6>
     d5e:	88 0f       	add	r24, r24
     d60:	99 1f       	adc	r25, r25
     d62:	0a 94       	dec	r0
     d64:	e2 f7       	brpl	.-8      	; 0xd5e <DIO_VidSetPinDirection+0xf2>
     d66:	84 2b       	or	r24, r20
     d68:	8c 93       	st	X, r24
     d6a:	77 c0       	rjmp	.+238    	; 0xe5a <DIO_VidSetPinDirection+0x1ee>
		}
	}
	else if (State == 0)
     d6c:	8b 81       	ldd	r24, Y+3	; 0x03
     d6e:	88 23       	and	r24, r24
     d70:	09 f0       	breq	.+2      	; 0xd74 <DIO_VidSetPinDirection+0x108>
     d72:	73 c0       	rjmp	.+230    	; 0xe5a <DIO_VidSetPinDirection+0x1ee>
	{
		switch(Port)
     d74:	89 81       	ldd	r24, Y+1	; 0x01
     d76:	28 2f       	mov	r18, r24
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	3d 83       	std	Y+5, r19	; 0x05
     d7c:	2c 83       	std	Y+4, r18	; 0x04
     d7e:	8c 81       	ldd	r24, Y+4	; 0x04
     d80:	9d 81       	ldd	r25, Y+5	; 0x05
     d82:	81 30       	cpi	r24, 0x01	; 1
     d84:	91 05       	cpc	r25, r1
     d86:	59 f1       	breq	.+86     	; 0xdde <DIO_VidSetPinDirection+0x172>
     d88:	2c 81       	ldd	r18, Y+4	; 0x04
     d8a:	3d 81       	ldd	r19, Y+5	; 0x05
     d8c:	22 30       	cpi	r18, 0x02	; 2
     d8e:	31 05       	cpc	r19, r1
     d90:	2c f4       	brge	.+10     	; 0xd9c <DIO_VidSetPinDirection+0x130>
     d92:	8c 81       	ldd	r24, Y+4	; 0x04
     d94:	9d 81       	ldd	r25, Y+5	; 0x05
     d96:	00 97       	sbiw	r24, 0x00	; 0
     d98:	69 f0       	breq	.+26     	; 0xdb4 <DIO_VidSetPinDirection+0x148>
     d9a:	5f c0       	rjmp	.+190    	; 0xe5a <DIO_VidSetPinDirection+0x1ee>
     d9c:	2c 81       	ldd	r18, Y+4	; 0x04
     d9e:	3d 81       	ldd	r19, Y+5	; 0x05
     da0:	22 30       	cpi	r18, 0x02	; 2
     da2:	31 05       	cpc	r19, r1
     da4:	89 f1       	breq	.+98     	; 0xe08 <DIO_VidSetPinDirection+0x19c>
     da6:	8c 81       	ldd	r24, Y+4	; 0x04
     da8:	9d 81       	ldd	r25, Y+5	; 0x05
     daa:	83 30       	cpi	r24, 0x03	; 3
     dac:	91 05       	cpc	r25, r1
     dae:	09 f4       	brne	.+2      	; 0xdb2 <DIO_VidSetPinDirection+0x146>
     db0:	40 c0       	rjmp	.+128    	; 0xe32 <DIO_VidSetPinDirection+0x1c6>
     db2:	53 c0       	rjmp	.+166    	; 0xe5a <DIO_VidSetPinDirection+0x1ee>
		{
			case 0: CLR_BIT(DDRA,Pin_Num);  break;
     db4:	aa e3       	ldi	r26, 0x3A	; 58
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	ea e3       	ldi	r30, 0x3A	; 58
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	48 2f       	mov	r20, r24
     dc0:	8a 81       	ldd	r24, Y+2	; 0x02
     dc2:	28 2f       	mov	r18, r24
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	02 2e       	mov	r0, r18
     dcc:	02 c0       	rjmp	.+4      	; 0xdd2 <DIO_VidSetPinDirection+0x166>
     dce:	88 0f       	add	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	0a 94       	dec	r0
     dd4:	e2 f7       	brpl	.-8      	; 0xdce <DIO_VidSetPinDirection+0x162>
     dd6:	80 95       	com	r24
     dd8:	84 23       	and	r24, r20
     dda:	8c 93       	st	X, r24
     ddc:	3e c0       	rjmp	.+124    	; 0xe5a <DIO_VidSetPinDirection+0x1ee>
			case 1: CLR_BIT(DDRB,Pin_Num);  break;
     dde:	a7 e3       	ldi	r26, 0x37	; 55
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	e7 e3       	ldi	r30, 0x37	; 55
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	48 2f       	mov	r20, r24
     dea:	8a 81       	ldd	r24, Y+2	; 0x02
     dec:	28 2f       	mov	r18, r24
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	02 2e       	mov	r0, r18
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <DIO_VidSetPinDirection+0x190>
     df8:	88 0f       	add	r24, r24
     dfa:	99 1f       	adc	r25, r25
     dfc:	0a 94       	dec	r0
     dfe:	e2 f7       	brpl	.-8      	; 0xdf8 <DIO_VidSetPinDirection+0x18c>
     e00:	80 95       	com	r24
     e02:	84 23       	and	r24, r20
     e04:	8c 93       	st	X, r24
     e06:	29 c0       	rjmp	.+82     	; 0xe5a <DIO_VidSetPinDirection+0x1ee>
			case 2: CLR_BIT(DDRC,Pin_Num);  break;
     e08:	a4 e3       	ldi	r26, 0x34	; 52
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e4 e3       	ldi	r30, 0x34	; 52
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	48 2f       	mov	r20, r24
     e14:	8a 81       	ldd	r24, Y+2	; 0x02
     e16:	28 2f       	mov	r18, r24
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	02 2e       	mov	r0, r18
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <DIO_VidSetPinDirection+0x1ba>
     e22:	88 0f       	add	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	0a 94       	dec	r0
     e28:	e2 f7       	brpl	.-8      	; 0xe22 <DIO_VidSetPinDirection+0x1b6>
     e2a:	80 95       	com	r24
     e2c:	84 23       	and	r24, r20
     e2e:	8c 93       	st	X, r24
     e30:	14 c0       	rjmp	.+40     	; 0xe5a <DIO_VidSetPinDirection+0x1ee>
			case 3: CLR_BIT(DDRD,Pin_Num);  break;
     e32:	a1 e3       	ldi	r26, 0x31	; 49
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	e1 e3       	ldi	r30, 0x31	; 49
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	48 2f       	mov	r20, r24
     e3e:	8a 81       	ldd	r24, Y+2	; 0x02
     e40:	28 2f       	mov	r18, r24
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	02 2e       	mov	r0, r18
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <DIO_VidSetPinDirection+0x1e4>
     e4c:	88 0f       	add	r24, r24
     e4e:	99 1f       	adc	r25, r25
     e50:	0a 94       	dec	r0
     e52:	e2 f7       	brpl	.-8      	; 0xe4c <DIO_VidSetPinDirection+0x1e0>
     e54:	80 95       	com	r24
     e56:	84 23       	and	r24, r20
     e58:	8c 93       	st	X, r24
		}
	}
}
     e5a:	27 96       	adiw	r28, 0x07	; 7
     e5c:	0f b6       	in	r0, 0x3f	; 63
     e5e:	f8 94       	cli
     e60:	de bf       	out	0x3e, r29	; 62
     e62:	0f be       	out	0x3f, r0	; 63
     e64:	cd bf       	out	0x3d, r28	; 61
     e66:	cf 91       	pop	r28
     e68:	df 91       	pop	r29
     e6a:	08 95       	ret

00000e6c <DIO_VidSetPinValue>:


void DIO_VidSetPinValue(u8 Port , u8 Pin_Num , u8 Value)
{
     e6c:	df 93       	push	r29
     e6e:	cf 93       	push	r28
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
     e74:	27 97       	sbiw	r28, 0x07	; 7
     e76:	0f b6       	in	r0, 0x3f	; 63
     e78:	f8 94       	cli
     e7a:	de bf       	out	0x3e, r29	; 62
     e7c:	0f be       	out	0x3f, r0	; 63
     e7e:	cd bf       	out	0x3d, r28	; 61
     e80:	89 83       	std	Y+1, r24	; 0x01
     e82:	6a 83       	std	Y+2, r22	; 0x02
     e84:	4b 83       	std	Y+3, r20	; 0x03
	if (Value == 1)  //value is true
     e86:	8b 81       	ldd	r24, Y+3	; 0x03
     e88:	81 30       	cpi	r24, 0x01	; 1
     e8a:	09 f0       	breq	.+2      	; 0xe8e <DIO_VidSetPinValue+0x22>
     e8c:	6f c0       	rjmp	.+222    	; 0xf6c <DIO_VidSetPinValue+0x100>
	{
		switch(Port)
     e8e:	89 81       	ldd	r24, Y+1	; 0x01
     e90:	28 2f       	mov	r18, r24
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	3f 83       	std	Y+7, r19	; 0x07
     e96:	2e 83       	std	Y+6, r18	; 0x06
     e98:	8e 81       	ldd	r24, Y+6	; 0x06
     e9a:	9f 81       	ldd	r25, Y+7	; 0x07
     e9c:	81 30       	cpi	r24, 0x01	; 1
     e9e:	91 05       	cpc	r25, r1
     ea0:	49 f1       	breq	.+82     	; 0xef4 <DIO_VidSetPinValue+0x88>
     ea2:	2e 81       	ldd	r18, Y+6	; 0x06
     ea4:	3f 81       	ldd	r19, Y+7	; 0x07
     ea6:	22 30       	cpi	r18, 0x02	; 2
     ea8:	31 05       	cpc	r19, r1
     eaa:	2c f4       	brge	.+10     	; 0xeb6 <DIO_VidSetPinValue+0x4a>
     eac:	8e 81       	ldd	r24, Y+6	; 0x06
     eae:	9f 81       	ldd	r25, Y+7	; 0x07
     eb0:	00 97       	sbiw	r24, 0x00	; 0
     eb2:	61 f0       	breq	.+24     	; 0xecc <DIO_VidSetPinValue+0x60>
     eb4:	d2 c0       	rjmp	.+420    	; 0x105a <DIO_VidSetPinValue+0x1ee>
     eb6:	2e 81       	ldd	r18, Y+6	; 0x06
     eb8:	3f 81       	ldd	r19, Y+7	; 0x07
     eba:	22 30       	cpi	r18, 0x02	; 2
     ebc:	31 05       	cpc	r19, r1
     ebe:	71 f1       	breq	.+92     	; 0xf1c <DIO_VidSetPinValue+0xb0>
     ec0:	8e 81       	ldd	r24, Y+6	; 0x06
     ec2:	9f 81       	ldd	r25, Y+7	; 0x07
     ec4:	83 30       	cpi	r24, 0x03	; 3
     ec6:	91 05       	cpc	r25, r1
     ec8:	e9 f1       	breq	.+122    	; 0xf44 <DIO_VidSetPinValue+0xd8>
     eca:	c7 c0       	rjmp	.+398    	; 0x105a <DIO_VidSetPinValue+0x1ee>
		{
			case 0: SET_BIT(PORTA,Pin_Num);  break;
     ecc:	ab e3       	ldi	r26, 0x3B	; 59
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	eb e3       	ldi	r30, 0x3B	; 59
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	48 2f       	mov	r20, r24
     ed8:	8a 81       	ldd	r24, Y+2	; 0x02
     eda:	28 2f       	mov	r18, r24
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	02 2e       	mov	r0, r18
     ee4:	02 c0       	rjmp	.+4      	; 0xeea <DIO_VidSetPinValue+0x7e>
     ee6:	88 0f       	add	r24, r24
     ee8:	99 1f       	adc	r25, r25
     eea:	0a 94       	dec	r0
     eec:	e2 f7       	brpl	.-8      	; 0xee6 <DIO_VidSetPinValue+0x7a>
     eee:	84 2b       	or	r24, r20
     ef0:	8c 93       	st	X, r24
     ef2:	b3 c0       	rjmp	.+358    	; 0x105a <DIO_VidSetPinValue+0x1ee>
			case 1: SET_BIT(PORTB,Pin_Num);  break;
     ef4:	a8 e3       	ldi	r26, 0x38	; 56
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	e8 e3       	ldi	r30, 0x38	; 56
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	48 2f       	mov	r20, r24
     f00:	8a 81       	ldd	r24, Y+2	; 0x02
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	02 2e       	mov	r0, r18
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <DIO_VidSetPinValue+0xa6>
     f0e:	88 0f       	add	r24, r24
     f10:	99 1f       	adc	r25, r25
     f12:	0a 94       	dec	r0
     f14:	e2 f7       	brpl	.-8      	; 0xf0e <DIO_VidSetPinValue+0xa2>
     f16:	84 2b       	or	r24, r20
     f18:	8c 93       	st	X, r24
     f1a:	9f c0       	rjmp	.+318    	; 0x105a <DIO_VidSetPinValue+0x1ee>
			case 2: SET_BIT(PORTC,Pin_Num);  break;
     f1c:	a5 e3       	ldi	r26, 0x35	; 53
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e5 e3       	ldi	r30, 0x35	; 53
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	48 2f       	mov	r20, r24
     f28:	8a 81       	ldd	r24, Y+2	; 0x02
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	02 2e       	mov	r0, r18
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <DIO_VidSetPinValue+0xce>
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	0a 94       	dec	r0
     f3c:	e2 f7       	brpl	.-8      	; 0xf36 <DIO_VidSetPinValue+0xca>
     f3e:	84 2b       	or	r24, r20
     f40:	8c 93       	st	X, r24
     f42:	8b c0       	rjmp	.+278    	; 0x105a <DIO_VidSetPinValue+0x1ee>
			case 3: SET_BIT(PORTD,Pin_Num);  break;
     f44:	a2 e3       	ldi	r26, 0x32	; 50
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e2 e3       	ldi	r30, 0x32	; 50
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	48 2f       	mov	r20, r24
     f50:	8a 81       	ldd	r24, Y+2	; 0x02
     f52:	28 2f       	mov	r18, r24
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	02 2e       	mov	r0, r18
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <DIO_VidSetPinValue+0xf6>
     f5e:	88 0f       	add	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	0a 94       	dec	r0
     f64:	e2 f7       	brpl	.-8      	; 0xf5e <DIO_VidSetPinValue+0xf2>
     f66:	84 2b       	or	r24, r20
     f68:	8c 93       	st	X, r24
     f6a:	77 c0       	rjmp	.+238    	; 0x105a <DIO_VidSetPinValue+0x1ee>
		}
	}
	else if (Value == 0)	
     f6c:	8b 81       	ldd	r24, Y+3	; 0x03
     f6e:	88 23       	and	r24, r24
     f70:	09 f0       	breq	.+2      	; 0xf74 <DIO_VidSetPinValue+0x108>
     f72:	73 c0       	rjmp	.+230    	; 0x105a <DIO_VidSetPinValue+0x1ee>
	{
		switch(Port)
     f74:	89 81       	ldd	r24, Y+1	; 0x01
     f76:	28 2f       	mov	r18, r24
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	3d 83       	std	Y+5, r19	; 0x05
     f7c:	2c 83       	std	Y+4, r18	; 0x04
     f7e:	8c 81       	ldd	r24, Y+4	; 0x04
     f80:	9d 81       	ldd	r25, Y+5	; 0x05
     f82:	81 30       	cpi	r24, 0x01	; 1
     f84:	91 05       	cpc	r25, r1
     f86:	59 f1       	breq	.+86     	; 0xfde <DIO_VidSetPinValue+0x172>
     f88:	2c 81       	ldd	r18, Y+4	; 0x04
     f8a:	3d 81       	ldd	r19, Y+5	; 0x05
     f8c:	22 30       	cpi	r18, 0x02	; 2
     f8e:	31 05       	cpc	r19, r1
     f90:	2c f4       	brge	.+10     	; 0xf9c <DIO_VidSetPinValue+0x130>
     f92:	8c 81       	ldd	r24, Y+4	; 0x04
     f94:	9d 81       	ldd	r25, Y+5	; 0x05
     f96:	00 97       	sbiw	r24, 0x00	; 0
     f98:	69 f0       	breq	.+26     	; 0xfb4 <DIO_VidSetPinValue+0x148>
     f9a:	5f c0       	rjmp	.+190    	; 0x105a <DIO_VidSetPinValue+0x1ee>
     f9c:	2c 81       	ldd	r18, Y+4	; 0x04
     f9e:	3d 81       	ldd	r19, Y+5	; 0x05
     fa0:	22 30       	cpi	r18, 0x02	; 2
     fa2:	31 05       	cpc	r19, r1
     fa4:	89 f1       	breq	.+98     	; 0x1008 <DIO_VidSetPinValue+0x19c>
     fa6:	8c 81       	ldd	r24, Y+4	; 0x04
     fa8:	9d 81       	ldd	r25, Y+5	; 0x05
     faa:	83 30       	cpi	r24, 0x03	; 3
     fac:	91 05       	cpc	r25, r1
     fae:	09 f4       	brne	.+2      	; 0xfb2 <DIO_VidSetPinValue+0x146>
     fb0:	40 c0       	rjmp	.+128    	; 0x1032 <DIO_VidSetPinValue+0x1c6>
     fb2:	53 c0       	rjmp	.+166    	; 0x105a <DIO_VidSetPinValue+0x1ee>
		{
			case 0: CLR_BIT(PORTA,Pin_Num);  break;
     fb4:	ab e3       	ldi	r26, 0x3B	; 59
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	eb e3       	ldi	r30, 0x3B	; 59
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	48 2f       	mov	r20, r24
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	02 2e       	mov	r0, r18
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <DIO_VidSetPinValue+0x166>
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	0a 94       	dec	r0
     fd4:	e2 f7       	brpl	.-8      	; 0xfce <DIO_VidSetPinValue+0x162>
     fd6:	80 95       	com	r24
     fd8:	84 23       	and	r24, r20
     fda:	8c 93       	st	X, r24
     fdc:	3e c0       	rjmp	.+124    	; 0x105a <DIO_VidSetPinValue+0x1ee>
			case 1: CLR_BIT(PORTB,Pin_Num);  break;
     fde:	a8 e3       	ldi	r26, 0x38	; 56
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e8 e3       	ldi	r30, 0x38	; 56
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	48 2f       	mov	r20, r24
     fea:	8a 81       	ldd	r24, Y+2	; 0x02
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	02 2e       	mov	r0, r18
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <DIO_VidSetPinValue+0x190>
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	0a 94       	dec	r0
     ffe:	e2 f7       	brpl	.-8      	; 0xff8 <DIO_VidSetPinValue+0x18c>
    1000:	80 95       	com	r24
    1002:	84 23       	and	r24, r20
    1004:	8c 93       	st	X, r24
    1006:	29 c0       	rjmp	.+82     	; 0x105a <DIO_VidSetPinValue+0x1ee>
			case 2: CLR_BIT(PORTC,Pin_Num);  break;
    1008:	a5 e3       	ldi	r26, 0x35	; 53
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	e5 e3       	ldi	r30, 0x35	; 53
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	48 2f       	mov	r20, r24
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	02 2e       	mov	r0, r18
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <DIO_VidSetPinValue+0x1ba>
    1022:	88 0f       	add	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	0a 94       	dec	r0
    1028:	e2 f7       	brpl	.-8      	; 0x1022 <DIO_VidSetPinValue+0x1b6>
    102a:	80 95       	com	r24
    102c:	84 23       	and	r24, r20
    102e:	8c 93       	st	X, r24
    1030:	14 c0       	rjmp	.+40     	; 0x105a <DIO_VidSetPinValue+0x1ee>
			case 3: CLR_BIT(PORTD,Pin_Num);  break;
    1032:	a2 e3       	ldi	r26, 0x32	; 50
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	e2 e3       	ldi	r30, 0x32	; 50
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	48 2f       	mov	r20, r24
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	02 2e       	mov	r0, r18
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <DIO_VidSetPinValue+0x1e4>
    104c:	88 0f       	add	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	0a 94       	dec	r0
    1052:	e2 f7       	brpl	.-8      	; 0x104c <DIO_VidSetPinValue+0x1e0>
    1054:	80 95       	com	r24
    1056:	84 23       	and	r24, r20
    1058:	8c 93       	st	X, r24
		}
	}
	
}
    105a:	27 96       	adiw	r28, 0x07	; 7
    105c:	0f b6       	in	r0, 0x3f	; 63
    105e:	f8 94       	cli
    1060:	de bf       	out	0x3e, r29	; 62
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	cd bf       	out	0x3d, r28	; 61
    1066:	cf 91       	pop	r28
    1068:	df 91       	pop	r29
    106a:	08 95       	ret

0000106c <DIO_VidSetPortDirection>:


void DIO_VidSetPortDirection(u8 Port , u8 Direction)
{
    106c:	df 93       	push	r29
    106e:	cf 93       	push	r28
    1070:	00 d0       	rcall	.+0      	; 0x1072 <DIO_VidSetPortDirection+0x6>
    1072:	00 d0       	rcall	.+0      	; 0x1074 <DIO_VidSetPortDirection+0x8>
    1074:	cd b7       	in	r28, 0x3d	; 61
    1076:	de b7       	in	r29, 0x3e	; 62
    1078:	89 83       	std	Y+1, r24	; 0x01
    107a:	6a 83       	std	Y+2, r22	; 0x02
		switch(Port)
    107c:	89 81       	ldd	r24, Y+1	; 0x01
    107e:	28 2f       	mov	r18, r24
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	3c 83       	std	Y+4, r19	; 0x04
    1084:	2b 83       	std	Y+3, r18	; 0x03
    1086:	8b 81       	ldd	r24, Y+3	; 0x03
    1088:	9c 81       	ldd	r25, Y+4	; 0x04
    108a:	81 30       	cpi	r24, 0x01	; 1
    108c:	91 05       	cpc	r25, r1
    108e:	d1 f0       	breq	.+52     	; 0x10c4 <DIO_VidSetPortDirection+0x58>
    1090:	2b 81       	ldd	r18, Y+3	; 0x03
    1092:	3c 81       	ldd	r19, Y+4	; 0x04
    1094:	22 30       	cpi	r18, 0x02	; 2
    1096:	31 05       	cpc	r19, r1
    1098:	2c f4       	brge	.+10     	; 0x10a4 <DIO_VidSetPortDirection+0x38>
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	9c 81       	ldd	r25, Y+4	; 0x04
    109e:	00 97       	sbiw	r24, 0x00	; 0
    10a0:	61 f0       	breq	.+24     	; 0x10ba <DIO_VidSetPortDirection+0x4e>
    10a2:	1e c0       	rjmp	.+60     	; 0x10e0 <DIO_VidSetPortDirection+0x74>
    10a4:	2b 81       	ldd	r18, Y+3	; 0x03
    10a6:	3c 81       	ldd	r19, Y+4	; 0x04
    10a8:	22 30       	cpi	r18, 0x02	; 2
    10aa:	31 05       	cpc	r19, r1
    10ac:	81 f0       	breq	.+32     	; 0x10ce <DIO_VidSetPortDirection+0x62>
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	9c 81       	ldd	r25, Y+4	; 0x04
    10b2:	83 30       	cpi	r24, 0x03	; 3
    10b4:	91 05       	cpc	r25, r1
    10b6:	81 f0       	breq	.+32     	; 0x10d8 <DIO_VidSetPortDirection+0x6c>
    10b8:	13 c0       	rjmp	.+38     	; 0x10e0 <DIO_VidSetPortDirection+0x74>
		{
			case 0: DDRA= Direction;  break;
    10ba:	ea e3       	ldi	r30, 0x3A	; 58
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	8a 81       	ldd	r24, Y+2	; 0x02
    10c0:	80 83       	st	Z, r24
    10c2:	0e c0       	rjmp	.+28     	; 0x10e0 <DIO_VidSetPortDirection+0x74>
			case 1: DDRB= Direction;  break;
    10c4:	e7 e3       	ldi	r30, 0x37	; 55
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	80 83       	st	Z, r24
    10cc:	09 c0       	rjmp	.+18     	; 0x10e0 <DIO_VidSetPortDirection+0x74>
			case 2: DDRC= Direction;  break;
    10ce:	e4 e3       	ldi	r30, 0x34	; 52
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
    10d4:	80 83       	st	Z, r24
    10d6:	04 c0       	rjmp	.+8      	; 0x10e0 <DIO_VidSetPortDirection+0x74>
			case 3: DDRD= Direction;  break;
    10d8:	e1 e3       	ldi	r30, 0x31	; 49
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	8a 81       	ldd	r24, Y+2	; 0x02
    10de:	80 83       	st	Z, r24
		}		
}
    10e0:	0f 90       	pop	r0
    10e2:	0f 90       	pop	r0
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	cf 91       	pop	r28
    10ea:	df 91       	pop	r29
    10ec:	08 95       	ret

000010ee <DIO_VidSetPortValue>:
void DIO_VidSetPortValue(u8 Port , u8 Value)
{
    10ee:	df 93       	push	r29
    10f0:	cf 93       	push	r28
    10f2:	00 d0       	rcall	.+0      	; 0x10f4 <DIO_VidSetPortValue+0x6>
    10f4:	00 d0       	rcall	.+0      	; 0x10f6 <DIO_VidSetPortValue+0x8>
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
    10fa:	89 83       	std	Y+1, r24	; 0x01
    10fc:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port)
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	3c 83       	std	Y+4, r19	; 0x04
    1106:	2b 83       	std	Y+3, r18	; 0x03
    1108:	8b 81       	ldd	r24, Y+3	; 0x03
    110a:	9c 81       	ldd	r25, Y+4	; 0x04
    110c:	81 30       	cpi	r24, 0x01	; 1
    110e:	91 05       	cpc	r25, r1
    1110:	d1 f0       	breq	.+52     	; 0x1146 <DIO_VidSetPortValue+0x58>
    1112:	2b 81       	ldd	r18, Y+3	; 0x03
    1114:	3c 81       	ldd	r19, Y+4	; 0x04
    1116:	22 30       	cpi	r18, 0x02	; 2
    1118:	31 05       	cpc	r19, r1
    111a:	2c f4       	brge	.+10     	; 0x1126 <DIO_VidSetPortValue+0x38>
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	9c 81       	ldd	r25, Y+4	; 0x04
    1120:	00 97       	sbiw	r24, 0x00	; 0
    1122:	61 f0       	breq	.+24     	; 0x113c <DIO_VidSetPortValue+0x4e>
    1124:	1e c0       	rjmp	.+60     	; 0x1162 <DIO_VidSetPortValue+0x74>
    1126:	2b 81       	ldd	r18, Y+3	; 0x03
    1128:	3c 81       	ldd	r19, Y+4	; 0x04
    112a:	22 30       	cpi	r18, 0x02	; 2
    112c:	31 05       	cpc	r19, r1
    112e:	81 f0       	breq	.+32     	; 0x1150 <DIO_VidSetPortValue+0x62>
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	9c 81       	ldd	r25, Y+4	; 0x04
    1134:	83 30       	cpi	r24, 0x03	; 3
    1136:	91 05       	cpc	r25, r1
    1138:	81 f0       	breq	.+32     	; 0x115a <DIO_VidSetPortValue+0x6c>
    113a:	13 c0       	rjmp	.+38     	; 0x1162 <DIO_VidSetPortValue+0x74>
	{
		case 0: PORTA= Value;  break;
    113c:	eb e3       	ldi	r30, 0x3B	; 59
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	80 83       	st	Z, r24
    1144:	0e c0       	rjmp	.+28     	; 0x1162 <DIO_VidSetPortValue+0x74>
		case 1: PORTB= Value;  break;
    1146:	e8 e3       	ldi	r30, 0x38	; 56
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
    114c:	80 83       	st	Z, r24
    114e:	09 c0       	rjmp	.+18     	; 0x1162 <DIO_VidSetPortValue+0x74>
		case 2: PORTC= Value;  break;
    1150:	e5 e3       	ldi	r30, 0x35	; 53
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	8a 81       	ldd	r24, Y+2	; 0x02
    1156:	80 83       	st	Z, r24
    1158:	04 c0       	rjmp	.+8      	; 0x1162 <DIO_VidSetPortValue+0x74>
		case 3: PORTD= Value;  break;
    115a:	e2 e3       	ldi	r30, 0x32	; 50
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	8a 81       	ldd	r24, Y+2	; 0x02
    1160:	80 83       	st	Z, r24
	}
}
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	cf 91       	pop	r28
    116c:	df 91       	pop	r29
    116e:	08 95       	ret

00001170 <DIO_U8GetPinValue>:
u8 DIO_U8GetPinValue( u8 port , u8 pin )
{
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	00 d0       	rcall	.+0      	; 0x1176 <DIO_U8GetPinValue+0x6>
    1176:	00 d0       	rcall	.+0      	; 0x1178 <DIO_U8GetPinValue+0x8>
    1178:	0f 92       	push	r0
    117a:	cd b7       	in	r28, 0x3d	; 61
    117c:	de b7       	in	r29, 0x3e	; 62
    117e:	8a 83       	std	Y+2, r24	; 0x02
    1180:	6b 83       	std	Y+3, r22	; 0x03
	u8 x;
	switch (port)
    1182:	8a 81       	ldd	r24, Y+2	; 0x02
    1184:	28 2f       	mov	r18, r24
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	3d 83       	std	Y+5, r19	; 0x05
    118a:	2c 83       	std	Y+4, r18	; 0x04
    118c:	4c 81       	ldd	r20, Y+4	; 0x04
    118e:	5d 81       	ldd	r21, Y+5	; 0x05
    1190:	41 30       	cpi	r20, 0x01	; 1
    1192:	51 05       	cpc	r21, r1
    1194:	41 f1       	breq	.+80     	; 0x11e6 <DIO_U8GetPinValue+0x76>
    1196:	8c 81       	ldd	r24, Y+4	; 0x04
    1198:	9d 81       	ldd	r25, Y+5	; 0x05
    119a:	82 30       	cpi	r24, 0x02	; 2
    119c:	91 05       	cpc	r25, r1
    119e:	34 f4       	brge	.+12     	; 0x11ac <DIO_U8GetPinValue+0x3c>
    11a0:	2c 81       	ldd	r18, Y+4	; 0x04
    11a2:	3d 81       	ldd	r19, Y+5	; 0x05
    11a4:	21 15       	cp	r18, r1
    11a6:	31 05       	cpc	r19, r1
    11a8:	61 f0       	breq	.+24     	; 0x11c2 <DIO_U8GetPinValue+0x52>
    11aa:	52 c0       	rjmp	.+164    	; 0x1250 <DIO_U8GetPinValue+0xe0>
    11ac:	4c 81       	ldd	r20, Y+4	; 0x04
    11ae:	5d 81       	ldd	r21, Y+5	; 0x05
    11b0:	42 30       	cpi	r20, 0x02	; 2
    11b2:	51 05       	cpc	r21, r1
    11b4:	51 f1       	breq	.+84     	; 0x120a <DIO_U8GetPinValue+0x9a>
    11b6:	8c 81       	ldd	r24, Y+4	; 0x04
    11b8:	9d 81       	ldd	r25, Y+5	; 0x05
    11ba:	83 30       	cpi	r24, 0x03	; 3
    11bc:	91 05       	cpc	r25, r1
    11be:	b9 f1       	breq	.+110    	; 0x122e <DIO_U8GetPinValue+0xbe>
    11c0:	47 c0       	rjmp	.+142    	; 0x1250 <DIO_U8GetPinValue+0xe0>
	{
	case 0 : x =GET_BIT(PINA,pin); break;
    11c2:	e9 e3       	ldi	r30, 0x39	; 57
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	8b 81       	ldd	r24, Y+3	; 0x03
    11ce:	88 2f       	mov	r24, r24
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	a9 01       	movw	r20, r18
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <DIO_U8GetPinValue+0x6a>
    11d6:	55 95       	asr	r21
    11d8:	47 95       	ror	r20
    11da:	8a 95       	dec	r24
    11dc:	e2 f7       	brpl	.-8      	; 0x11d6 <DIO_U8GetPinValue+0x66>
    11de:	ca 01       	movw	r24, r20
    11e0:	81 70       	andi	r24, 0x01	; 1
    11e2:	89 83       	std	Y+1, r24	; 0x01
    11e4:	35 c0       	rjmp	.+106    	; 0x1250 <DIO_U8GetPinValue+0xe0>
	case 1 : x =GET_BIT(PINB,pin); break;
    11e6:	e6 e3       	ldi	r30, 0x36	; 54
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	28 2f       	mov	r18, r24
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	88 2f       	mov	r24, r24
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	a9 01       	movw	r20, r18
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <DIO_U8GetPinValue+0x8e>
    11fa:	55 95       	asr	r21
    11fc:	47 95       	ror	r20
    11fe:	8a 95       	dec	r24
    1200:	e2 f7       	brpl	.-8      	; 0x11fa <DIO_U8GetPinValue+0x8a>
    1202:	ca 01       	movw	r24, r20
    1204:	81 70       	andi	r24, 0x01	; 1
    1206:	89 83       	std	Y+1, r24	; 0x01
    1208:	23 c0       	rjmp	.+70     	; 0x1250 <DIO_U8GetPinValue+0xe0>
	case 2 : x =GET_BIT(PINC,pin); break;
    120a:	e3 e3       	ldi	r30, 0x33	; 51
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	8b 81       	ldd	r24, Y+3	; 0x03
    1216:	88 2f       	mov	r24, r24
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	a9 01       	movw	r20, r18
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <DIO_U8GetPinValue+0xb2>
    121e:	55 95       	asr	r21
    1220:	47 95       	ror	r20
    1222:	8a 95       	dec	r24
    1224:	e2 f7       	brpl	.-8      	; 0x121e <DIO_U8GetPinValue+0xae>
    1226:	ca 01       	movw	r24, r20
    1228:	81 70       	andi	r24, 0x01	; 1
    122a:	89 83       	std	Y+1, r24	; 0x01
    122c:	11 c0       	rjmp	.+34     	; 0x1250 <DIO_U8GetPinValue+0xe0>
	case 3 : x =GET_BIT(PIND,pin); break;
    122e:	e0 e3       	ldi	r30, 0x30	; 48
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	88 2f       	mov	r24, r24
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	a9 01       	movw	r20, r18
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <DIO_U8GetPinValue+0xd6>
    1242:	55 95       	asr	r21
    1244:	47 95       	ror	r20
    1246:	8a 95       	dec	r24
    1248:	e2 f7       	brpl	.-8      	; 0x1242 <DIO_U8GetPinValue+0xd2>
    124a:	ca 01       	movw	r24, r20
    124c:	81 70       	andi	r24, 0x01	; 1
    124e:	89 83       	std	Y+1, r24	; 0x01
	}
	return x;
    1250:	89 81       	ldd	r24, Y+1	; 0x01

}
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	cf 91       	pop	r28
    125e:	df 91       	pop	r29
    1260:	08 95       	ret

00001262 <DIO_VidTogglePin>:

void DIO_VidTogglePin(u8 Port , u8 Pin)
{
    1262:	df 93       	push	r29
    1264:	cf 93       	push	r28
    1266:	00 d0       	rcall	.+0      	; 0x1268 <DIO_VidTogglePin+0x6>
    1268:	00 d0       	rcall	.+0      	; 0x126a <DIO_VidTogglePin+0x8>
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	89 83       	std	Y+1, r24	; 0x01
    1270:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port)
    1272:	89 81       	ldd	r24, Y+1	; 0x01
    1274:	28 2f       	mov	r18, r24
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	3c 83       	std	Y+4, r19	; 0x04
    127a:	2b 83       	std	Y+3, r18	; 0x03
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	9c 81       	ldd	r25, Y+4	; 0x04
    1280:	81 30       	cpi	r24, 0x01	; 1
    1282:	91 05       	cpc	r25, r1
    1284:	49 f1       	breq	.+82     	; 0x12d8 <DIO_VidTogglePin+0x76>
    1286:	2b 81       	ldd	r18, Y+3	; 0x03
    1288:	3c 81       	ldd	r19, Y+4	; 0x04
    128a:	22 30       	cpi	r18, 0x02	; 2
    128c:	31 05       	cpc	r19, r1
    128e:	2c f4       	brge	.+10     	; 0x129a <DIO_VidTogglePin+0x38>
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	9c 81       	ldd	r25, Y+4	; 0x04
    1294:	00 97       	sbiw	r24, 0x00	; 0
    1296:	61 f0       	breq	.+24     	; 0x12b0 <DIO_VidTogglePin+0x4e>
    1298:	5a c0       	rjmp	.+180    	; 0x134e <DIO_VidTogglePin+0xec>
    129a:	2b 81       	ldd	r18, Y+3	; 0x03
    129c:	3c 81       	ldd	r19, Y+4	; 0x04
    129e:	22 30       	cpi	r18, 0x02	; 2
    12a0:	31 05       	cpc	r19, r1
    12a2:	71 f1       	breq	.+92     	; 0x1300 <DIO_VidTogglePin+0x9e>
    12a4:	8b 81       	ldd	r24, Y+3	; 0x03
    12a6:	9c 81       	ldd	r25, Y+4	; 0x04
    12a8:	83 30       	cpi	r24, 0x03	; 3
    12aa:	91 05       	cpc	r25, r1
    12ac:	e9 f1       	breq	.+122    	; 0x1328 <DIO_VidTogglePin+0xc6>
    12ae:	4f c0       	rjmp	.+158    	; 0x134e <DIO_VidTogglePin+0xec>
	{
		case 0: TOGGLE_BIT(PORTA,Pin);  break;
    12b0:	ab e3       	ldi	r26, 0x3B	; 59
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	eb e3       	ldi	r30, 0x3B	; 59
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	48 2f       	mov	r20, r24
    12bc:	8a 81       	ldd	r24, Y+2	; 0x02
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	02 2e       	mov	r0, r18
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <DIO_VidTogglePin+0x6c>
    12ca:	88 0f       	add	r24, r24
    12cc:	99 1f       	adc	r25, r25
    12ce:	0a 94       	dec	r0
    12d0:	e2 f7       	brpl	.-8      	; 0x12ca <DIO_VidTogglePin+0x68>
    12d2:	84 27       	eor	r24, r20
    12d4:	8c 93       	st	X, r24
    12d6:	3b c0       	rjmp	.+118    	; 0x134e <DIO_VidTogglePin+0xec>
		case 1: TOGGLE_BIT(PORTB,Pin);  break;
    12d8:	a8 e3       	ldi	r26, 0x38	; 56
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	e8 e3       	ldi	r30, 0x38	; 56
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	48 2f       	mov	r20, r24
    12e4:	8a 81       	ldd	r24, Y+2	; 0x02
    12e6:	28 2f       	mov	r18, r24
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	02 2e       	mov	r0, r18
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <DIO_VidTogglePin+0x94>
    12f2:	88 0f       	add	r24, r24
    12f4:	99 1f       	adc	r25, r25
    12f6:	0a 94       	dec	r0
    12f8:	e2 f7       	brpl	.-8      	; 0x12f2 <DIO_VidTogglePin+0x90>
    12fa:	84 27       	eor	r24, r20
    12fc:	8c 93       	st	X, r24
    12fe:	27 c0       	rjmp	.+78     	; 0x134e <DIO_VidTogglePin+0xec>
		case 2: TOGGLE_BIT(PORTC,Pin);  break;
    1300:	a5 e3       	ldi	r26, 0x35	; 53
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	e5 e3       	ldi	r30, 0x35	; 53
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	48 2f       	mov	r20, r24
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	28 2f       	mov	r18, r24
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	02 2e       	mov	r0, r18
    1318:	02 c0       	rjmp	.+4      	; 0x131e <DIO_VidTogglePin+0xbc>
    131a:	88 0f       	add	r24, r24
    131c:	99 1f       	adc	r25, r25
    131e:	0a 94       	dec	r0
    1320:	e2 f7       	brpl	.-8      	; 0x131a <DIO_VidTogglePin+0xb8>
    1322:	84 27       	eor	r24, r20
    1324:	8c 93       	st	X, r24
    1326:	13 c0       	rjmp	.+38     	; 0x134e <DIO_VidTogglePin+0xec>
		case 3: TOGGLE_BIT(PORTD,Pin);  break;
    1328:	a2 e3       	ldi	r26, 0x32	; 50
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	e2 e3       	ldi	r30, 0x32	; 50
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	48 2f       	mov	r20, r24
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
    1336:	28 2f       	mov	r18, r24
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	02 2e       	mov	r0, r18
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <DIO_VidTogglePin+0xe4>
    1342:	88 0f       	add	r24, r24
    1344:	99 1f       	adc	r25, r25
    1346:	0a 94       	dec	r0
    1348:	e2 f7       	brpl	.-8      	; 0x1342 <DIO_VidTogglePin+0xe0>
    134a:	84 27       	eor	r24, r20
    134c:	8c 93       	st	X, r24
	}
}
    134e:	0f 90       	pop	r0
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	cf 91       	pop	r28
    1358:	df 91       	pop	r29
    135a:	08 95       	ret

0000135c <KPD_VidInit>:




void KPD_VidInit(void)
{
    135c:	df 93       	push	r29
    135e:	cf 93       	push	r28
    1360:	cd b7       	in	r28, 0x3d	; 61
    1362:	de b7       	in	r29, 0x3e	; 62
	// set intput pins direction
	DIO_VidSetPinDirection(KPD_PORT,ROW0,0);
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	60 e0       	ldi	r22, 0x00	; 0
    1368:	40 e0       	ldi	r20, 0x00	; 0
    136a:	0e 94 36 06 	call	0xc6c	; 0xc6c <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(KPD_PORT,ROW1,0);
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	61 e0       	ldi	r22, 0x01	; 1
    1372:	40 e0       	ldi	r20, 0x00	; 0
    1374:	0e 94 36 06 	call	0xc6c	; 0xc6c <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(KPD_PORT,ROW2,0);
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	62 e0       	ldi	r22, 0x02	; 2
    137c:	40 e0       	ldi	r20, 0x00	; 0
    137e:	0e 94 36 06 	call	0xc6c	; 0xc6c <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(KPD_PORT,ROW3,0);
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	63 e0       	ldi	r22, 0x03	; 3
    1386:	40 e0       	ldi	r20, 0x00	; 0
    1388:	0e 94 36 06 	call	0xc6c	; 0xc6c <DIO_VidSetPinDirection>
	// set output pins direction
	DIO_VidSetPinDirection(KPD_PORT,COL0,1);
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	64 e0       	ldi	r22, 0x04	; 4
    1390:	41 e0       	ldi	r20, 0x01	; 1
    1392:	0e 94 36 06 	call	0xc6c	; 0xc6c <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(KPD_PORT,COL1,1);
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	65 e0       	ldi	r22, 0x05	; 5
    139a:	41 e0       	ldi	r20, 0x01	; 1
    139c:	0e 94 36 06 	call	0xc6c	; 0xc6c <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(KPD_PORT,COL2,1);
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	66 e0       	ldi	r22, 0x06	; 6
    13a4:	41 e0       	ldi	r20, 0x01	; 1
    13a6:	0e 94 36 06 	call	0xc6c	; 0xc6c <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(KPD_PORT,COL3,1);
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	67 e0       	ldi	r22, 0x07	; 7
    13ae:	41 e0       	ldi	r20, 0x01	; 1
    13b0:	0e 94 36 06 	call	0xc6c	; 0xc6c <DIO_VidSetPinDirection>

	DIO_VidSetPortValue(KPD_PORT,0b11111111);
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	6f ef       	ldi	r22, 0xFF	; 255
    13b8:	0e 94 77 08 	call	0x10ee	; 0x10ee <DIO_VidSetPortValue>
}
    13bc:	cf 91       	pop	r28
    13be:	df 91       	pop	r29
    13c0:	08 95       	ret

000013c2 <KPD_U8GetPressedKey>:


u8 KPD_U8GetPressedKey(void)
{
    13c2:	df 93       	push	r29
    13c4:	cf 93       	push	r28
    13c6:	cd b7       	in	r28, 0x3d	; 61
    13c8:	de b7       	in	r29, 0x3e	; 62
    13ca:	61 97       	sbiw	r28, 0x11	; 17
    13cc:	0f b6       	in	r0, 0x3f	; 63
    13ce:	f8 94       	cli
    13d0:	de bf       	out	0x3e, r29	; 62
    13d2:	0f be       	out	0x3f, r0	; 63
    13d4:	cd bf       	out	0x3d, r28	; 61
	u8 col=0;
    13d6:	19 8a       	std	Y+17, r1	; 0x11
	u8 row=0;
    13d8:	18 8a       	std	Y+16, r1	; 0x10
	u8 x=KEY_NOT_PRESSED;
    13da:	1f 86       	std	Y+15, r1	; 0x0f

	// the outer for loop for col
	for (col=4; col<8; col++)
    13dc:	84 e0       	ldi	r24, 0x04	; 4
    13de:	89 8b       	std	Y+17, r24	; 0x11
    13e0:	aa c0       	rjmp	.+340    	; 0x1536 <KPD_U8GetPressedKey+0x174>
	{
		DIO_VidSetPinValue(KPD_PORT,col,0);
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	69 89       	ldd	r22, Y+17	; 0x11
    13e6:	40 e0       	ldi	r20, 0x00	; 0
    13e8:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_VidSetPinValue>
		for (row=0;row<4;row++)
    13ec:	18 8a       	std	Y+16, r1	; 0x10
    13ee:	97 c0       	rjmp	.+302    	; 0x151e <KPD_U8GetPressedKey+0x15c>
		{
			if (DIO_U8GetPinValue(KPD_PORT,row)==0)
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	68 89       	ldd	r22, Y+16	; 0x10
    13f4:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_U8GetPinValue>
    13f8:	88 23       	and	r24, r24
    13fa:	09 f0       	breq	.+2      	; 0x13fe <KPD_U8GetPressedKey+0x3c>
    13fc:	8d c0       	rjmp	.+282    	; 0x1518 <KPD_U8GetPressedKey+0x156>
			{
				x= KPD_Number[row][col-4];
    13fe:	88 89       	ldd	r24, Y+16	; 0x10
    1400:	48 2f       	mov	r20, r24
    1402:	50 e0       	ldi	r21, 0x00	; 0
    1404:	89 89       	ldd	r24, Y+17	; 0x11
    1406:	88 2f       	mov	r24, r24
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	9c 01       	movw	r18, r24
    140c:	24 50       	subi	r18, 0x04	; 4
    140e:	30 40       	sbci	r19, 0x00	; 0
    1410:	ca 01       	movw	r24, r20
    1412:	88 0f       	add	r24, r24
    1414:	99 1f       	adc	r25, r25
    1416:	88 0f       	add	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	82 0f       	add	r24, r18
    141c:	93 1f       	adc	r25, r19
    141e:	fc 01       	movw	r30, r24
    1420:	e8 55       	subi	r30, 0x58	; 88
    1422:	ff 4f       	sbci	r31, 0xFF	; 255
    1424:	80 81       	ld	r24, Z
    1426:	8f 87       	std	Y+15, r24	; 0x0f
				while (DIO_U8GetPinValue(KPD_PORT,row)==0);
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	68 89       	ldd	r22, Y+16	; 0x10
    142c:	0e 94 b8 08 	call	0x1170	; 0x1170 <DIO_U8GetPinValue>
    1430:	88 23       	and	r24, r24
    1432:	d1 f3       	breq	.-12     	; 0x1428 <KPD_U8GetPressedKey+0x66>
    1434:	80 e0       	ldi	r24, 0x00	; 0
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	a0 e0       	ldi	r26, 0x00	; 0
    143a:	b0 e4       	ldi	r27, 0x40	; 64
    143c:	8b 87       	std	Y+11, r24	; 0x0b
    143e:	9c 87       	std	Y+12, r25	; 0x0c
    1440:	ad 87       	std	Y+13, r26	; 0x0d
    1442:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1444:	6b 85       	ldd	r22, Y+11	; 0x0b
    1446:	7c 85       	ldd	r23, Y+12	; 0x0c
    1448:	8d 85       	ldd	r24, Y+13	; 0x0d
    144a:	9e 85       	ldd	r25, Y+14	; 0x0e
    144c:	20 e0       	ldi	r18, 0x00	; 0
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	4a ef       	ldi	r20, 0xFA	; 250
    1452:	54 e4       	ldi	r21, 0x44	; 68
    1454:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1458:	dc 01       	movw	r26, r24
    145a:	cb 01       	movw	r24, r22
    145c:	8f 83       	std	Y+7, r24	; 0x07
    145e:	98 87       	std	Y+8, r25	; 0x08
    1460:	a9 87       	std	Y+9, r26	; 0x09
    1462:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1464:	6f 81       	ldd	r22, Y+7	; 0x07
    1466:	78 85       	ldd	r23, Y+8	; 0x08
    1468:	89 85       	ldd	r24, Y+9	; 0x09
    146a:	9a 85       	ldd	r25, Y+10	; 0x0a
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	40 e8       	ldi	r20, 0x80	; 128
    1472:	5f e3       	ldi	r21, 0x3F	; 63
    1474:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1478:	88 23       	and	r24, r24
    147a:	2c f4       	brge	.+10     	; 0x1486 <KPD_U8GetPressedKey+0xc4>
		__ticks = 1;
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	9e 83       	std	Y+6, r25	; 0x06
    1482:	8d 83       	std	Y+5, r24	; 0x05
    1484:	3f c0       	rjmp	.+126    	; 0x1504 <KPD_U8GetPressedKey+0x142>
	else if (__tmp > 65535)
    1486:	6f 81       	ldd	r22, Y+7	; 0x07
    1488:	78 85       	ldd	r23, Y+8	; 0x08
    148a:	89 85       	ldd	r24, Y+9	; 0x09
    148c:	9a 85       	ldd	r25, Y+10	; 0x0a
    148e:	20 e0       	ldi	r18, 0x00	; 0
    1490:	3f ef       	ldi	r19, 0xFF	; 255
    1492:	4f e7       	ldi	r20, 0x7F	; 127
    1494:	57 e4       	ldi	r21, 0x47	; 71
    1496:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    149a:	18 16       	cp	r1, r24
    149c:	4c f5       	brge	.+82     	; 0x14f0 <KPD_U8GetPressedKey+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    149e:	6b 85       	ldd	r22, Y+11	; 0x0b
    14a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    14a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    14a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    14a6:	20 e0       	ldi	r18, 0x00	; 0
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	40 e2       	ldi	r20, 0x20	; 32
    14ac:	51 e4       	ldi	r21, 0x41	; 65
    14ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14b2:	dc 01       	movw	r26, r24
    14b4:	cb 01       	movw	r24, r22
    14b6:	bc 01       	movw	r22, r24
    14b8:	cd 01       	movw	r24, r26
    14ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14be:	dc 01       	movw	r26, r24
    14c0:	cb 01       	movw	r24, r22
    14c2:	9e 83       	std	Y+6, r25	; 0x06
    14c4:	8d 83       	std	Y+5, r24	; 0x05
    14c6:	0f c0       	rjmp	.+30     	; 0x14e6 <KPD_U8GetPressedKey+0x124>
    14c8:	88 ec       	ldi	r24, 0xC8	; 200
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	9c 83       	std	Y+4, r25	; 0x04
    14ce:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14d0:	8b 81       	ldd	r24, Y+3	; 0x03
    14d2:	9c 81       	ldd	r25, Y+4	; 0x04
    14d4:	01 97       	sbiw	r24, 0x01	; 1
    14d6:	f1 f7       	brne	.-4      	; 0x14d4 <KPD_U8GetPressedKey+0x112>
    14d8:	9c 83       	std	Y+4, r25	; 0x04
    14da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14dc:	8d 81       	ldd	r24, Y+5	; 0x05
    14de:	9e 81       	ldd	r25, Y+6	; 0x06
    14e0:	01 97       	sbiw	r24, 0x01	; 1
    14e2:	9e 83       	std	Y+6, r25	; 0x06
    14e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14e6:	8d 81       	ldd	r24, Y+5	; 0x05
    14e8:	9e 81       	ldd	r25, Y+6	; 0x06
    14ea:	00 97       	sbiw	r24, 0x00	; 0
    14ec:	69 f7       	brne	.-38     	; 0x14c8 <KPD_U8GetPressedKey+0x106>
    14ee:	14 c0       	rjmp	.+40     	; 0x1518 <KPD_U8GetPressedKey+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14f0:	6f 81       	ldd	r22, Y+7	; 0x07
    14f2:	78 85       	ldd	r23, Y+8	; 0x08
    14f4:	89 85       	ldd	r24, Y+9	; 0x09
    14f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14fc:	dc 01       	movw	r26, r24
    14fe:	cb 01       	movw	r24, r22
    1500:	9e 83       	std	Y+6, r25	; 0x06
    1502:	8d 83       	std	Y+5, r24	; 0x05
    1504:	8d 81       	ldd	r24, Y+5	; 0x05
    1506:	9e 81       	ldd	r25, Y+6	; 0x06
    1508:	9a 83       	std	Y+2, r25	; 0x02
    150a:	89 83       	std	Y+1, r24	; 0x01
    150c:	89 81       	ldd	r24, Y+1	; 0x01
    150e:	9a 81       	ldd	r25, Y+2	; 0x02
    1510:	01 97       	sbiw	r24, 0x01	; 1
    1512:	f1 f7       	brne	.-4      	; 0x1510 <KPD_U8GetPressedKey+0x14e>
    1514:	9a 83       	std	Y+2, r25	; 0x02
    1516:	89 83       	std	Y+1, r24	; 0x01

	// the outer for loop for col
	for (col=4; col<8; col++)
	{
		DIO_VidSetPinValue(KPD_PORT,col,0);
		for (row=0;row<4;row++)
    1518:	88 89       	ldd	r24, Y+16	; 0x10
    151a:	8f 5f       	subi	r24, 0xFF	; 255
    151c:	88 8b       	std	Y+16, r24	; 0x10
    151e:	88 89       	ldd	r24, Y+16	; 0x10
    1520:	84 30       	cpi	r24, 0x04	; 4
    1522:	08 f4       	brcc	.+2      	; 0x1526 <KPD_U8GetPressedKey+0x164>
    1524:	65 cf       	rjmp	.-310    	; 0x13f0 <KPD_U8GetPressedKey+0x2e>
				x= KPD_Number[row][col-4];
				while (DIO_U8GetPinValue(KPD_PORT,row)==0);
				_delay_ms(2);
			}
		}
		DIO_VidSetPinValue(KPD_PORT,col,1);
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	69 89       	ldd	r22, Y+17	; 0x11
    152a:	41 e0       	ldi	r20, 0x01	; 1
    152c:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_VidSetPinValue>
	u8 col=0;
	u8 row=0;
	u8 x=KEY_NOT_PRESSED;

	// the outer for loop for col
	for (col=4; col<8; col++)
    1530:	89 89       	ldd	r24, Y+17	; 0x11
    1532:	8f 5f       	subi	r24, 0xFF	; 255
    1534:	89 8b       	std	Y+17, r24	; 0x11
    1536:	89 89       	ldd	r24, Y+17	; 0x11
    1538:	88 30       	cpi	r24, 0x08	; 8
    153a:	08 f4       	brcc	.+2      	; 0x153e <KPD_U8GetPressedKey+0x17c>
    153c:	52 cf       	rjmp	.-348    	; 0x13e2 <KPD_U8GetPressedKey+0x20>
				_delay_ms(2);
			}
		}
		DIO_VidSetPinValue(KPD_PORT,col,1);
	}
	return x;
    153e:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    1540:	61 96       	adiw	r28, 0x11	; 17
    1542:	0f b6       	in	r0, 0x3f	; 63
    1544:	f8 94       	cli
    1546:	de bf       	out	0x3e, r29	; 62
    1548:	0f be       	out	0x3f, r0	; 63
    154a:	cd bf       	out	0x3d, r28	; 61
    154c:	cf 91       	pop	r28
    154e:	df 91       	pop	r29
    1550:	08 95       	ret

00001552 <LCD_VidInt>:
#include "DIO_Interface.h"
#include "DIO_Register.h"


void LCD_VidInt(void)
{
    1552:	df 93       	push	r29
    1554:	cf 93       	push	r28
    1556:	cd b7       	in	r28, 0x3d	; 61
    1558:	de b7       	in	r29, 0x3e	; 62
    155a:	e8 97       	sbiw	r28, 0x38	; 56
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	f8 94       	cli
    1560:	de bf       	out	0x3e, r29	; 62
    1562:	0f be       	out	0x3f, r0	; 63
    1564:	cd bf       	out	0x3d, r28	; 61
	DIO_VidSetPortDirection(2 ,0b11111111);
    1566:	82 e0       	ldi	r24, 0x02	; 2
    1568:	6f ef       	ldi	r22, 0xFF	; 255
    156a:	0e 94 36 08 	call	0x106c	; 0x106c <DIO_VidSetPortDirection>
	DIO_VidSetPinDirection(3 , 0 , 1);
    156e:	83 e0       	ldi	r24, 0x03	; 3
    1570:	60 e0       	ldi	r22, 0x00	; 0
    1572:	41 e0       	ldi	r20, 0x01	; 1
    1574:	0e 94 36 06 	call	0xc6c	; 0xc6c <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(3 , 1 , 1);
    1578:	83 e0       	ldi	r24, 0x03	; 3
    157a:	61 e0       	ldi	r22, 0x01	; 1
    157c:	41 e0       	ldi	r20, 0x01	; 1
    157e:	0e 94 36 06 	call	0xc6c	; 0xc6c <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(3 , 2 , 1);
    1582:	83 e0       	ldi	r24, 0x03	; 3
    1584:	62 e0       	ldi	r22, 0x02	; 2
    1586:	41 e0       	ldi	r20, 0x01	; 1
    1588:	0e 94 36 06 	call	0xc6c	; 0xc6c <DIO_VidSetPinDirection>
    158c:	80 e0       	ldi	r24, 0x00	; 0
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	a8 e4       	ldi	r26, 0x48	; 72
    1592:	b2 e4       	ldi	r27, 0x42	; 66
    1594:	8d ab       	std	Y+53, r24	; 0x35
    1596:	9e ab       	std	Y+54, r25	; 0x36
    1598:	af ab       	std	Y+55, r26	; 0x37
    159a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    159c:	6d a9       	ldd	r22, Y+53	; 0x35
    159e:	7e a9       	ldd	r23, Y+54	; 0x36
    15a0:	8f a9       	ldd	r24, Y+55	; 0x37
    15a2:	98 ad       	ldd	r25, Y+56	; 0x38
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	4a ef       	ldi	r20, 0xFA	; 250
    15aa:	54 e4       	ldi	r21, 0x44	; 68
    15ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15b0:	dc 01       	movw	r26, r24
    15b2:	cb 01       	movw	r24, r22
    15b4:	89 ab       	std	Y+49, r24	; 0x31
    15b6:	9a ab       	std	Y+50, r25	; 0x32
    15b8:	ab ab       	std	Y+51, r26	; 0x33
    15ba:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    15bc:	69 a9       	ldd	r22, Y+49	; 0x31
    15be:	7a a9       	ldd	r23, Y+50	; 0x32
    15c0:	8b a9       	ldd	r24, Y+51	; 0x33
    15c2:	9c a9       	ldd	r25, Y+52	; 0x34
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	40 e8       	ldi	r20, 0x80	; 128
    15ca:	5f e3       	ldi	r21, 0x3F	; 63
    15cc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    15d0:	88 23       	and	r24, r24
    15d2:	2c f4       	brge	.+10     	; 0x15de <LCD_VidInt+0x8c>
		__ticks = 1;
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	98 ab       	std	Y+48, r25	; 0x30
    15da:	8f a7       	std	Y+47, r24	; 0x2f
    15dc:	3f c0       	rjmp	.+126    	; 0x165c <LCD_VidInt+0x10a>
	else if (__tmp > 65535)
    15de:	69 a9       	ldd	r22, Y+49	; 0x31
    15e0:	7a a9       	ldd	r23, Y+50	; 0x32
    15e2:	8b a9       	ldd	r24, Y+51	; 0x33
    15e4:	9c a9       	ldd	r25, Y+52	; 0x34
    15e6:	20 e0       	ldi	r18, 0x00	; 0
    15e8:	3f ef       	ldi	r19, 0xFF	; 255
    15ea:	4f e7       	ldi	r20, 0x7F	; 127
    15ec:	57 e4       	ldi	r21, 0x47	; 71
    15ee:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    15f2:	18 16       	cp	r1, r24
    15f4:	4c f5       	brge	.+82     	; 0x1648 <LCD_VidInt+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15f6:	6d a9       	ldd	r22, Y+53	; 0x35
    15f8:	7e a9       	ldd	r23, Y+54	; 0x36
    15fa:	8f a9       	ldd	r24, Y+55	; 0x37
    15fc:	98 ad       	ldd	r25, Y+56	; 0x38
    15fe:	20 e0       	ldi	r18, 0x00	; 0
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	40 e2       	ldi	r20, 0x20	; 32
    1604:	51 e4       	ldi	r21, 0x41	; 65
    1606:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    160a:	dc 01       	movw	r26, r24
    160c:	cb 01       	movw	r24, r22
    160e:	bc 01       	movw	r22, r24
    1610:	cd 01       	movw	r24, r26
    1612:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1616:	dc 01       	movw	r26, r24
    1618:	cb 01       	movw	r24, r22
    161a:	98 ab       	std	Y+48, r25	; 0x30
    161c:	8f a7       	std	Y+47, r24	; 0x2f
    161e:	0f c0       	rjmp	.+30     	; 0x163e <LCD_VidInt+0xec>
    1620:	88 ec       	ldi	r24, 0xC8	; 200
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	9e a7       	std	Y+46, r25	; 0x2e
    1626:	8d a7       	std	Y+45, r24	; 0x2d
    1628:	8d a5       	ldd	r24, Y+45	; 0x2d
    162a:	9e a5       	ldd	r25, Y+46	; 0x2e
    162c:	01 97       	sbiw	r24, 0x01	; 1
    162e:	f1 f7       	brne	.-4      	; 0x162c <LCD_VidInt+0xda>
    1630:	9e a7       	std	Y+46, r25	; 0x2e
    1632:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1634:	8f a5       	ldd	r24, Y+47	; 0x2f
    1636:	98 a9       	ldd	r25, Y+48	; 0x30
    1638:	01 97       	sbiw	r24, 0x01	; 1
    163a:	98 ab       	std	Y+48, r25	; 0x30
    163c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    163e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1640:	98 a9       	ldd	r25, Y+48	; 0x30
    1642:	00 97       	sbiw	r24, 0x00	; 0
    1644:	69 f7       	brne	.-38     	; 0x1620 <LCD_VidInt+0xce>
    1646:	14 c0       	rjmp	.+40     	; 0x1670 <LCD_VidInt+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1648:	69 a9       	ldd	r22, Y+49	; 0x31
    164a:	7a a9       	ldd	r23, Y+50	; 0x32
    164c:	8b a9       	ldd	r24, Y+51	; 0x33
    164e:	9c a9       	ldd	r25, Y+52	; 0x34
    1650:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1654:	dc 01       	movw	r26, r24
    1656:	cb 01       	movw	r24, r22
    1658:	98 ab       	std	Y+48, r25	; 0x30
    165a:	8f a7       	std	Y+47, r24	; 0x2f
    165c:	8f a5       	ldd	r24, Y+47	; 0x2f
    165e:	98 a9       	ldd	r25, Y+48	; 0x30
    1660:	9c a7       	std	Y+44, r25	; 0x2c
    1662:	8b a7       	std	Y+43, r24	; 0x2b
    1664:	8b a5       	ldd	r24, Y+43	; 0x2b
    1666:	9c a5       	ldd	r25, Y+44	; 0x2c
    1668:	01 97       	sbiw	r24, 0x01	; 1
    166a:	f1 f7       	brne	.-4      	; 0x1668 <LCD_VidInt+0x116>
    166c:	9c a7       	std	Y+44, r25	; 0x2c
    166e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);             // wait more than 30 ms
	LCD_VidWriteCommand(0b00111000);  // funcion set : use 8 pins mode,use 2 lines , font
    1670:	88 e3       	ldi	r24, 0x38	; 56
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <LCD_VidWriteCommand>
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	a0 e8       	ldi	r26, 0x80	; 128
    167e:	bf e3       	ldi	r27, 0x3F	; 63
    1680:	8f a3       	std	Y+39, r24	; 0x27
    1682:	98 a7       	std	Y+40, r25	; 0x28
    1684:	a9 a7       	std	Y+41, r26	; 0x29
    1686:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1688:	6f a1       	ldd	r22, Y+39	; 0x27
    168a:	78 a5       	ldd	r23, Y+40	; 0x28
    168c:	89 a5       	ldd	r24, Y+41	; 0x29
    168e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	4a ef       	ldi	r20, 0xFA	; 250
    1696:	54 e4       	ldi	r21, 0x44	; 68
    1698:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	8b a3       	std	Y+35, r24	; 0x23
    16a2:	9c a3       	std	Y+36, r25	; 0x24
    16a4:	ad a3       	std	Y+37, r26	; 0x25
    16a6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    16a8:	6b a1       	ldd	r22, Y+35	; 0x23
    16aa:	7c a1       	ldd	r23, Y+36	; 0x24
    16ac:	8d a1       	ldd	r24, Y+37	; 0x25
    16ae:	9e a1       	ldd	r25, Y+38	; 0x26
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	40 e8       	ldi	r20, 0x80	; 128
    16b6:	5f e3       	ldi	r21, 0x3F	; 63
    16b8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16bc:	88 23       	and	r24, r24
    16be:	2c f4       	brge	.+10     	; 0x16ca <LCD_VidInt+0x178>
		__ticks = 1;
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	9a a3       	std	Y+34, r25	; 0x22
    16c6:	89 a3       	std	Y+33, r24	; 0x21
    16c8:	3f c0       	rjmp	.+126    	; 0x1748 <LCD_VidInt+0x1f6>
	else if (__tmp > 65535)
    16ca:	6b a1       	ldd	r22, Y+35	; 0x23
    16cc:	7c a1       	ldd	r23, Y+36	; 0x24
    16ce:	8d a1       	ldd	r24, Y+37	; 0x25
    16d0:	9e a1       	ldd	r25, Y+38	; 0x26
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	3f ef       	ldi	r19, 0xFF	; 255
    16d6:	4f e7       	ldi	r20, 0x7F	; 127
    16d8:	57 e4       	ldi	r21, 0x47	; 71
    16da:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    16de:	18 16       	cp	r1, r24
    16e0:	4c f5       	brge	.+82     	; 0x1734 <LCD_VidInt+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e2:	6f a1       	ldd	r22, Y+39	; 0x27
    16e4:	78 a5       	ldd	r23, Y+40	; 0x28
    16e6:	89 a5       	ldd	r24, Y+41	; 0x29
    16e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	40 e2       	ldi	r20, 0x20	; 32
    16f0:	51 e4       	ldi	r21, 0x41	; 65
    16f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	bc 01       	movw	r22, r24
    16fc:	cd 01       	movw	r24, r26
    16fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1702:	dc 01       	movw	r26, r24
    1704:	cb 01       	movw	r24, r22
    1706:	9a a3       	std	Y+34, r25	; 0x22
    1708:	89 a3       	std	Y+33, r24	; 0x21
    170a:	0f c0       	rjmp	.+30     	; 0x172a <LCD_VidInt+0x1d8>
    170c:	88 ec       	ldi	r24, 0xC8	; 200
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	98 a3       	std	Y+32, r25	; 0x20
    1712:	8f 8f       	std	Y+31, r24	; 0x1f
    1714:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1716:	98 a1       	ldd	r25, Y+32	; 0x20
    1718:	01 97       	sbiw	r24, 0x01	; 1
    171a:	f1 f7       	brne	.-4      	; 0x1718 <LCD_VidInt+0x1c6>
    171c:	98 a3       	std	Y+32, r25	; 0x20
    171e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1720:	89 a1       	ldd	r24, Y+33	; 0x21
    1722:	9a a1       	ldd	r25, Y+34	; 0x22
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	9a a3       	std	Y+34, r25	; 0x22
    1728:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    172a:	89 a1       	ldd	r24, Y+33	; 0x21
    172c:	9a a1       	ldd	r25, Y+34	; 0x22
    172e:	00 97       	sbiw	r24, 0x00	; 0
    1730:	69 f7       	brne	.-38     	; 0x170c <LCD_VidInt+0x1ba>
    1732:	14 c0       	rjmp	.+40     	; 0x175c <LCD_VidInt+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1734:	6b a1       	ldd	r22, Y+35	; 0x23
    1736:	7c a1       	ldd	r23, Y+36	; 0x24
    1738:	8d a1       	ldd	r24, Y+37	; 0x25
    173a:	9e a1       	ldd	r25, Y+38	; 0x26
    173c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1740:	dc 01       	movw	r26, r24
    1742:	cb 01       	movw	r24, r22
    1744:	9a a3       	std	Y+34, r25	; 0x22
    1746:	89 a3       	std	Y+33, r24	; 0x21
    1748:	89 a1       	ldd	r24, Y+33	; 0x21
    174a:	9a a1       	ldd	r25, Y+34	; 0x22
    174c:	9e 8f       	std	Y+30, r25	; 0x1e
    174e:	8d 8f       	std	Y+29, r24	; 0x1d
    1750:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1752:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1754:	01 97       	sbiw	r24, 0x01	; 1
    1756:	f1 f7       	brne	.-4      	; 0x1754 <LCD_VidInt+0x202>
    1758:	9e 8f       	std	Y+30, r25	; 0x1e
    175a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);             // wait more than 30 micro s
	LCD_VidWriteCommand(0b00001100);  // display on \off control  : turn desplay on,off the curser,off curser blinking
    175c:	8c e0       	ldi	r24, 0x0C	; 12
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <LCD_VidWriteCommand>
    1764:	80 e0       	ldi	r24, 0x00	; 0
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	a0 e8       	ldi	r26, 0x80	; 128
    176a:	bf e3       	ldi	r27, 0x3F	; 63
    176c:	89 8f       	std	Y+25, r24	; 0x19
    176e:	9a 8f       	std	Y+26, r25	; 0x1a
    1770:	ab 8f       	std	Y+27, r26	; 0x1b
    1772:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1774:	69 8d       	ldd	r22, Y+25	; 0x19
    1776:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1778:	8b 8d       	ldd	r24, Y+27	; 0x1b
    177a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	4a ef       	ldi	r20, 0xFA	; 250
    1782:	54 e4       	ldi	r21, 0x44	; 68
    1784:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	8d 8b       	std	Y+21, r24	; 0x15
    178e:	9e 8b       	std	Y+22, r25	; 0x16
    1790:	af 8b       	std	Y+23, r26	; 0x17
    1792:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1794:	6d 89       	ldd	r22, Y+21	; 0x15
    1796:	7e 89       	ldd	r23, Y+22	; 0x16
    1798:	8f 89       	ldd	r24, Y+23	; 0x17
    179a:	98 8d       	ldd	r25, Y+24	; 0x18
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	40 e8       	ldi	r20, 0x80	; 128
    17a2:	5f e3       	ldi	r21, 0x3F	; 63
    17a4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17a8:	88 23       	and	r24, r24
    17aa:	2c f4       	brge	.+10     	; 0x17b6 <LCD_VidInt+0x264>
		__ticks = 1;
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	9c 8b       	std	Y+20, r25	; 0x14
    17b2:	8b 8b       	std	Y+19, r24	; 0x13
    17b4:	3f c0       	rjmp	.+126    	; 0x1834 <LCD_VidInt+0x2e2>
	else if (__tmp > 65535)
    17b6:	6d 89       	ldd	r22, Y+21	; 0x15
    17b8:	7e 89       	ldd	r23, Y+22	; 0x16
    17ba:	8f 89       	ldd	r24, Y+23	; 0x17
    17bc:	98 8d       	ldd	r25, Y+24	; 0x18
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	3f ef       	ldi	r19, 0xFF	; 255
    17c2:	4f e7       	ldi	r20, 0x7F	; 127
    17c4:	57 e4       	ldi	r21, 0x47	; 71
    17c6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    17ca:	18 16       	cp	r1, r24
    17cc:	4c f5       	brge	.+82     	; 0x1820 <LCD_VidInt+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ce:	69 8d       	ldd	r22, Y+25	; 0x19
    17d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	40 e2       	ldi	r20, 0x20	; 32
    17dc:	51 e4       	ldi	r21, 0x41	; 65
    17de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17e2:	dc 01       	movw	r26, r24
    17e4:	cb 01       	movw	r24, r22
    17e6:	bc 01       	movw	r22, r24
    17e8:	cd 01       	movw	r24, r26
    17ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	9c 8b       	std	Y+20, r25	; 0x14
    17f4:	8b 8b       	std	Y+19, r24	; 0x13
    17f6:	0f c0       	rjmp	.+30     	; 0x1816 <LCD_VidInt+0x2c4>
    17f8:	88 ec       	ldi	r24, 0xC8	; 200
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	9a 8b       	std	Y+18, r25	; 0x12
    17fe:	89 8b       	std	Y+17, r24	; 0x11
    1800:	89 89       	ldd	r24, Y+17	; 0x11
    1802:	9a 89       	ldd	r25, Y+18	; 0x12
    1804:	01 97       	sbiw	r24, 0x01	; 1
    1806:	f1 f7       	brne	.-4      	; 0x1804 <LCD_VidInt+0x2b2>
    1808:	9a 8b       	std	Y+18, r25	; 0x12
    180a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    180c:	8b 89       	ldd	r24, Y+19	; 0x13
    180e:	9c 89       	ldd	r25, Y+20	; 0x14
    1810:	01 97       	sbiw	r24, 0x01	; 1
    1812:	9c 8b       	std	Y+20, r25	; 0x14
    1814:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1816:	8b 89       	ldd	r24, Y+19	; 0x13
    1818:	9c 89       	ldd	r25, Y+20	; 0x14
    181a:	00 97       	sbiw	r24, 0x00	; 0
    181c:	69 f7       	brne	.-38     	; 0x17f8 <LCD_VidInt+0x2a6>
    181e:	14 c0       	rjmp	.+40     	; 0x1848 <LCD_VidInt+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1820:	6d 89       	ldd	r22, Y+21	; 0x15
    1822:	7e 89       	ldd	r23, Y+22	; 0x16
    1824:	8f 89       	ldd	r24, Y+23	; 0x17
    1826:	98 8d       	ldd	r25, Y+24	; 0x18
    1828:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    182c:	dc 01       	movw	r26, r24
    182e:	cb 01       	movw	r24, r22
    1830:	9c 8b       	std	Y+20, r25	; 0x14
    1832:	8b 8b       	std	Y+19, r24	; 0x13
    1834:	8b 89       	ldd	r24, Y+19	; 0x13
    1836:	9c 89       	ldd	r25, Y+20	; 0x14
    1838:	98 8b       	std	Y+16, r25	; 0x10
    183a:	8f 87       	std	Y+15, r24	; 0x0f
    183c:	8f 85       	ldd	r24, Y+15	; 0x0f
    183e:	98 89       	ldd	r25, Y+16	; 0x10
    1840:	01 97       	sbiw	r24, 0x01	; 1
    1842:	f1 f7       	brne	.-4      	; 0x1840 <LCD_VidInt+0x2ee>
    1844:	98 8b       	std	Y+16, r25	; 0x10
    1846:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);             // wait more than 30 micro s
	LCD_VidWriteCommand(0b00000001);  // display clear 
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <LCD_VidWriteCommand>
    1850:	80 e0       	ldi	r24, 0x00	; 0
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	a0 e0       	ldi	r26, 0x00	; 0
    1856:	b0 e4       	ldi	r27, 0x40	; 64
    1858:	8b 87       	std	Y+11, r24	; 0x0b
    185a:	9c 87       	std	Y+12, r25	; 0x0c
    185c:	ad 87       	std	Y+13, r26	; 0x0d
    185e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1860:	6b 85       	ldd	r22, Y+11	; 0x0b
    1862:	7c 85       	ldd	r23, Y+12	; 0x0c
    1864:	8d 85       	ldd	r24, Y+13	; 0x0d
    1866:	9e 85       	ldd	r25, Y+14	; 0x0e
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	4a ef       	ldi	r20, 0xFA	; 250
    186e:	54 e4       	ldi	r21, 0x44	; 68
    1870:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	8f 83       	std	Y+7, r24	; 0x07
    187a:	98 87       	std	Y+8, r25	; 0x08
    187c:	a9 87       	std	Y+9, r26	; 0x09
    187e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1880:	6f 81       	ldd	r22, Y+7	; 0x07
    1882:	78 85       	ldd	r23, Y+8	; 0x08
    1884:	89 85       	ldd	r24, Y+9	; 0x09
    1886:	9a 85       	ldd	r25, Y+10	; 0x0a
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	40 e8       	ldi	r20, 0x80	; 128
    188e:	5f e3       	ldi	r21, 0x3F	; 63
    1890:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1894:	88 23       	and	r24, r24
    1896:	2c f4       	brge	.+10     	; 0x18a2 <LCD_VidInt+0x350>
		__ticks = 1;
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	9e 83       	std	Y+6, r25	; 0x06
    189e:	8d 83       	std	Y+5, r24	; 0x05
    18a0:	3f c0       	rjmp	.+126    	; 0x1920 <LCD_VidInt+0x3ce>
	else if (__tmp > 65535)
    18a2:	6f 81       	ldd	r22, Y+7	; 0x07
    18a4:	78 85       	ldd	r23, Y+8	; 0x08
    18a6:	89 85       	ldd	r24, Y+9	; 0x09
    18a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18aa:	20 e0       	ldi	r18, 0x00	; 0
    18ac:	3f ef       	ldi	r19, 0xFF	; 255
    18ae:	4f e7       	ldi	r20, 0x7F	; 127
    18b0:	57 e4       	ldi	r21, 0x47	; 71
    18b2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18b6:	18 16       	cp	r1, r24
    18b8:	4c f5       	brge	.+82     	; 0x190c <LCD_VidInt+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    18bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    18be:	8d 85       	ldd	r24, Y+13	; 0x0d
    18c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	40 e2       	ldi	r20, 0x20	; 32
    18c8:	51 e4       	ldi	r21, 0x41	; 65
    18ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18ce:	dc 01       	movw	r26, r24
    18d0:	cb 01       	movw	r24, r22
    18d2:	bc 01       	movw	r22, r24
    18d4:	cd 01       	movw	r24, r26
    18d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18da:	dc 01       	movw	r26, r24
    18dc:	cb 01       	movw	r24, r22
    18de:	9e 83       	std	Y+6, r25	; 0x06
    18e0:	8d 83       	std	Y+5, r24	; 0x05
    18e2:	0f c0       	rjmp	.+30     	; 0x1902 <LCD_VidInt+0x3b0>
    18e4:	88 ec       	ldi	r24, 0xC8	; 200
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	9c 83       	std	Y+4, r25	; 0x04
    18ea:	8b 83       	std	Y+3, r24	; 0x03
    18ec:	8b 81       	ldd	r24, Y+3	; 0x03
    18ee:	9c 81       	ldd	r25, Y+4	; 0x04
    18f0:	01 97       	sbiw	r24, 0x01	; 1
    18f2:	f1 f7       	brne	.-4      	; 0x18f0 <LCD_VidInt+0x39e>
    18f4:	9c 83       	std	Y+4, r25	; 0x04
    18f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18f8:	8d 81       	ldd	r24, Y+5	; 0x05
    18fa:	9e 81       	ldd	r25, Y+6	; 0x06
    18fc:	01 97       	sbiw	r24, 0x01	; 1
    18fe:	9e 83       	std	Y+6, r25	; 0x06
    1900:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1902:	8d 81       	ldd	r24, Y+5	; 0x05
    1904:	9e 81       	ldd	r25, Y+6	; 0x06
    1906:	00 97       	sbiw	r24, 0x00	; 0
    1908:	69 f7       	brne	.-38     	; 0x18e4 <LCD_VidInt+0x392>
    190a:	14 c0       	rjmp	.+40     	; 0x1934 <LCD_VidInt+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    190c:	6f 81       	ldd	r22, Y+7	; 0x07
    190e:	78 85       	ldd	r23, Y+8	; 0x08
    1910:	89 85       	ldd	r24, Y+9	; 0x09
    1912:	9a 85       	ldd	r25, Y+10	; 0x0a
    1914:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	9e 83       	std	Y+6, r25	; 0x06
    191e:	8d 83       	std	Y+5, r24	; 0x05
    1920:	8d 81       	ldd	r24, Y+5	; 0x05
    1922:	9e 81       	ldd	r25, Y+6	; 0x06
    1924:	9a 83       	std	Y+2, r25	; 0x02
    1926:	89 83       	std	Y+1, r24	; 0x01
    1928:	89 81       	ldd	r24, Y+1	; 0x01
    192a:	9a 81       	ldd	r25, Y+2	; 0x02
    192c:	01 97       	sbiw	r24, 0x01	; 1
    192e:	f1 f7       	brne	.-4      	; 0x192c <LCD_VidInt+0x3da>
    1930:	9a 83       	std	Y+2, r25	; 0x02
    1932:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);             // wait more than 1.7 m s
	
}
    1934:	e8 96       	adiw	r28, 0x38	; 56
    1936:	0f b6       	in	r0, 0x3f	; 63
    1938:	f8 94       	cli
    193a:	de bf       	out	0x3e, r29	; 62
    193c:	0f be       	out	0x3f, r0	; 63
    193e:	cd bf       	out	0x3d, r28	; 61
    1940:	cf 91       	pop	r28
    1942:	df 91       	pop	r29
    1944:	08 95       	ret

00001946 <LCD_VidSetPosition>:

void LCD_VidSetPosition(u8 Row, u8 Col)
{
    1946:	df 93       	push	r29
    1948:	cf 93       	push	r28
    194a:	00 d0       	rcall	.+0      	; 0x194c <LCD_VidSetPosition+0x6>
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
    1950:	89 83       	std	Y+1, r24	; 0x01
    1952:	6a 83       	std	Y+2, r22	; 0x02
	if (Row==0)
    1954:	89 81       	ldd	r24, Y+1	; 0x01
    1956:	88 23       	and	r24, r24
    1958:	39 f4       	brne	.+14     	; 0x1968 <LCD_VidSetPosition+0x22>
	{
		LCD_VidWriteCommand(128+Col);
    195a:	8a 81       	ldd	r24, Y+2	; 0x02
    195c:	88 2f       	mov	r24, r24
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	80 58       	subi	r24, 0x80	; 128
    1962:	9f 4f       	sbci	r25, 0xFF	; 255
    1964:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <LCD_VidWriteCommand>
	}
	if (Row==1)
    1968:	89 81       	ldd	r24, Y+1	; 0x01
    196a:	81 30       	cpi	r24, 0x01	; 1
    196c:	39 f4       	brne	.+14     	; 0x197c <LCD_VidSetPosition+0x36>
	{
		LCD_VidWriteCommand(128+64+Col);
    196e:	8a 81       	ldd	r24, Y+2	; 0x02
    1970:	88 2f       	mov	r24, r24
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	80 54       	subi	r24, 0x40	; 64
    1976:	9f 4f       	sbci	r25, 0xFF	; 255
    1978:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <LCD_VidWriteCommand>
	}
}
    197c:	0f 90       	pop	r0
    197e:	0f 90       	pop	r0
    1980:	cf 91       	pop	r28
    1982:	df 91       	pop	r29
    1984:	08 95       	ret

00001986 <LCD_VidWriteData>:

void LCD_VidWriteData(u8 Data)
{
    1986:	df 93       	push	r29
    1988:	cf 93       	push	r28
    198a:	cd b7       	in	r28, 0x3d	; 61
    198c:	de b7       	in	r29, 0x3e	; 62
    198e:	6d 97       	sbiw	r28, 0x1d	; 29
    1990:	0f b6       	in	r0, 0x3f	; 63
    1992:	f8 94       	cli
    1994:	de bf       	out	0x3e, r29	; 62
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	cd bf       	out	0x3d, r28	; 61
    199a:	8d 8f       	std	Y+29, r24	; 0x1d
	 DIO_VidSetPinValue(3 , 0 , 1);     //RS = 1 to select data
    199c:	83 e0       	ldi	r24, 0x03	; 3
    199e:	60 e0       	ldi	r22, 0x00	; 0
    19a0:	41 e0       	ldi	r20, 0x01	; 1
    19a2:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_VidSetPinValue>
	 DIO_VidSetPinValue(3 , 1 , 0);     //Rw = 0 to write data
    19a6:	83 e0       	ldi	r24, 0x03	; 3
    19a8:	61 e0       	ldi	r22, 0x01	; 1
    19aa:	40 e0       	ldi	r20, 0x00	; 0
    19ac:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_VidSetPinValue>
	 DIO_VidSetPortValue(2 , Data);		// PORTC = Data
    19b0:	82 e0       	ldi	r24, 0x02	; 2
    19b2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    19b4:	0e 94 77 08 	call	0x10ee	; 0x10ee <DIO_VidSetPortValue>
	
	// enable
	DIO_VidSetPinValue(3 , 2 , 1);     //enable = 1 
    19b8:	83 e0       	ldi	r24, 0x03	; 3
    19ba:	62 e0       	ldi	r22, 0x02	; 2
    19bc:	41 e0       	ldi	r20, 0x01	; 1
    19be:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_VidSetPinValue>
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	a0 e8       	ldi	r26, 0x80	; 128
    19c8:	bf e3       	ldi	r27, 0x3F	; 63
    19ca:	89 8f       	std	Y+25, r24	; 0x19
    19cc:	9a 8f       	std	Y+26, r25	; 0x1a
    19ce:	ab 8f       	std	Y+27, r26	; 0x1b
    19d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19d2:	69 8d       	ldd	r22, Y+25	; 0x19
    19d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	4a ef       	ldi	r20, 0xFA	; 250
    19e0:	54 e4       	ldi	r21, 0x44	; 68
    19e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19e6:	dc 01       	movw	r26, r24
    19e8:	cb 01       	movw	r24, r22
    19ea:	8d 8b       	std	Y+21, r24	; 0x15
    19ec:	9e 8b       	std	Y+22, r25	; 0x16
    19ee:	af 8b       	std	Y+23, r26	; 0x17
    19f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19f2:	6d 89       	ldd	r22, Y+21	; 0x15
    19f4:	7e 89       	ldd	r23, Y+22	; 0x16
    19f6:	8f 89       	ldd	r24, Y+23	; 0x17
    19f8:	98 8d       	ldd	r25, Y+24	; 0x18
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	40 e8       	ldi	r20, 0x80	; 128
    1a00:	5f e3       	ldi	r21, 0x3F	; 63
    1a02:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a06:	88 23       	and	r24, r24
    1a08:	2c f4       	brge	.+10     	; 0x1a14 <LCD_VidWriteData+0x8e>
		__ticks = 1;
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	9c 8b       	std	Y+20, r25	; 0x14
    1a10:	8b 8b       	std	Y+19, r24	; 0x13
    1a12:	3f c0       	rjmp	.+126    	; 0x1a92 <LCD_VidWriteData+0x10c>
	else if (__tmp > 65535)
    1a14:	6d 89       	ldd	r22, Y+21	; 0x15
    1a16:	7e 89       	ldd	r23, Y+22	; 0x16
    1a18:	8f 89       	ldd	r24, Y+23	; 0x17
    1a1a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	3f ef       	ldi	r19, 0xFF	; 255
    1a20:	4f e7       	ldi	r20, 0x7F	; 127
    1a22:	57 e4       	ldi	r21, 0x47	; 71
    1a24:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a28:	18 16       	cp	r1, r24
    1a2a:	4c f5       	brge	.+82     	; 0x1a7e <LCD_VidWriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a2c:	69 8d       	ldd	r22, Y+25	; 0x19
    1a2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	40 e2       	ldi	r20, 0x20	; 32
    1a3a:	51 e4       	ldi	r21, 0x41	; 65
    1a3c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	bc 01       	movw	r22, r24
    1a46:	cd 01       	movw	r24, r26
    1a48:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	cb 01       	movw	r24, r22
    1a50:	9c 8b       	std	Y+20, r25	; 0x14
    1a52:	8b 8b       	std	Y+19, r24	; 0x13
    1a54:	0f c0       	rjmp	.+30     	; 0x1a74 <LCD_VidWriteData+0xee>
    1a56:	88 ec       	ldi	r24, 0xC8	; 200
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	9a 8b       	std	Y+18, r25	; 0x12
    1a5c:	89 8b       	std	Y+17, r24	; 0x11
    1a5e:	89 89       	ldd	r24, Y+17	; 0x11
    1a60:	9a 89       	ldd	r25, Y+18	; 0x12
    1a62:	01 97       	sbiw	r24, 0x01	; 1
    1a64:	f1 f7       	brne	.-4      	; 0x1a62 <LCD_VidWriteData+0xdc>
    1a66:	9a 8b       	std	Y+18, r25	; 0x12
    1a68:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a6a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a6c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a6e:	01 97       	sbiw	r24, 0x01	; 1
    1a70:	9c 8b       	std	Y+20, r25	; 0x14
    1a72:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a74:	8b 89       	ldd	r24, Y+19	; 0x13
    1a76:	9c 89       	ldd	r25, Y+20	; 0x14
    1a78:	00 97       	sbiw	r24, 0x00	; 0
    1a7a:	69 f7       	brne	.-38     	; 0x1a56 <LCD_VidWriteData+0xd0>
    1a7c:	14 c0       	rjmp	.+40     	; 0x1aa6 <LCD_VidWriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a7e:	6d 89       	ldd	r22, Y+21	; 0x15
    1a80:	7e 89       	ldd	r23, Y+22	; 0x16
    1a82:	8f 89       	ldd	r24, Y+23	; 0x17
    1a84:	98 8d       	ldd	r25, Y+24	; 0x18
    1a86:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	9c 8b       	std	Y+20, r25	; 0x14
    1a90:	8b 8b       	std	Y+19, r24	; 0x13
    1a92:	8b 89       	ldd	r24, Y+19	; 0x13
    1a94:	9c 89       	ldd	r25, Y+20	; 0x14
    1a96:	98 8b       	std	Y+16, r25	; 0x10
    1a98:	8f 87       	std	Y+15, r24	; 0x0f
    1a9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a9c:	98 89       	ldd	r25, Y+16	; 0x10
    1a9e:	01 97       	sbiw	r24, 0x01	; 1
    1aa0:	f1 f7       	brne	.-4      	; 0x1a9e <LCD_VidWriteData+0x118>
    1aa2:	98 8b       	std	Y+16, r25	; 0x10
    1aa4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VidSetPinValue(3 , 2 , 0);     //enable = 0 
    1aa6:	83 e0       	ldi	r24, 0x03	; 3
    1aa8:	62 e0       	ldi	r22, 0x02	; 2
    1aaa:	40 e0       	ldi	r20, 0x00	; 0
    1aac:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_VidSetPinValue>
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	a0 e8       	ldi	r26, 0x80	; 128
    1ab6:	bf e3       	ldi	r27, 0x3F	; 63
    1ab8:	8b 87       	std	Y+11, r24	; 0x0b
    1aba:	9c 87       	std	Y+12, r25	; 0x0c
    1abc:	ad 87       	std	Y+13, r26	; 0x0d
    1abe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ac0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ac2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ac4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ac6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	4a ef       	ldi	r20, 0xFA	; 250
    1ace:	54 e4       	ldi	r21, 0x44	; 68
    1ad0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	8f 83       	std	Y+7, r24	; 0x07
    1ada:	98 87       	std	Y+8, r25	; 0x08
    1adc:	a9 87       	std	Y+9, r26	; 0x09
    1ade:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ae0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ae2:	78 85       	ldd	r23, Y+8	; 0x08
    1ae4:	89 85       	ldd	r24, Y+9	; 0x09
    1ae6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	40 e8       	ldi	r20, 0x80	; 128
    1aee:	5f e3       	ldi	r21, 0x3F	; 63
    1af0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1af4:	88 23       	and	r24, r24
    1af6:	2c f4       	brge	.+10     	; 0x1b02 <LCD_VidWriteData+0x17c>
		__ticks = 1;
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	9e 83       	std	Y+6, r25	; 0x06
    1afe:	8d 83       	std	Y+5, r24	; 0x05
    1b00:	3f c0       	rjmp	.+126    	; 0x1b80 <LCD_VidWriteData+0x1fa>
	else if (__tmp > 65535)
    1b02:	6f 81       	ldd	r22, Y+7	; 0x07
    1b04:	78 85       	ldd	r23, Y+8	; 0x08
    1b06:	89 85       	ldd	r24, Y+9	; 0x09
    1b08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	3f ef       	ldi	r19, 0xFF	; 255
    1b0e:	4f e7       	ldi	r20, 0x7F	; 127
    1b10:	57 e4       	ldi	r21, 0x47	; 71
    1b12:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b16:	18 16       	cp	r1, r24
    1b18:	4c f5       	brge	.+82     	; 0x1b6c <LCD_VidWriteData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b20:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	40 e2       	ldi	r20, 0x20	; 32
    1b28:	51 e4       	ldi	r21, 0x41	; 65
    1b2a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	bc 01       	movw	r22, r24
    1b34:	cd 01       	movw	r24, r26
    1b36:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	9e 83       	std	Y+6, r25	; 0x06
    1b40:	8d 83       	std	Y+5, r24	; 0x05
    1b42:	0f c0       	rjmp	.+30     	; 0x1b62 <LCD_VidWriteData+0x1dc>
    1b44:	88 ec       	ldi	r24, 0xC8	; 200
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	9c 83       	std	Y+4, r25	; 0x04
    1b4a:	8b 83       	std	Y+3, r24	; 0x03
    1b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b50:	01 97       	sbiw	r24, 0x01	; 1
    1b52:	f1 f7       	brne	.-4      	; 0x1b50 <LCD_VidWriteData+0x1ca>
    1b54:	9c 83       	std	Y+4, r25	; 0x04
    1b56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b58:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b5c:	01 97       	sbiw	r24, 0x01	; 1
    1b5e:	9e 83       	std	Y+6, r25	; 0x06
    1b60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b62:	8d 81       	ldd	r24, Y+5	; 0x05
    1b64:	9e 81       	ldd	r25, Y+6	; 0x06
    1b66:	00 97       	sbiw	r24, 0x00	; 0
    1b68:	69 f7       	brne	.-38     	; 0x1b44 <LCD_VidWriteData+0x1be>
    1b6a:	14 c0       	rjmp	.+40     	; 0x1b94 <LCD_VidWriteData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b6e:	78 85       	ldd	r23, Y+8	; 0x08
    1b70:	89 85       	ldd	r24, Y+9	; 0x09
    1b72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b74:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b78:	dc 01       	movw	r26, r24
    1b7a:	cb 01       	movw	r24, r22
    1b7c:	9e 83       	std	Y+6, r25	; 0x06
    1b7e:	8d 83       	std	Y+5, r24	; 0x05
    1b80:	8d 81       	ldd	r24, Y+5	; 0x05
    1b82:	9e 81       	ldd	r25, Y+6	; 0x06
    1b84:	9a 83       	std	Y+2, r25	; 0x02
    1b86:	89 83       	std	Y+1, r24	; 0x01
    1b88:	89 81       	ldd	r24, Y+1	; 0x01
    1b8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b8c:	01 97       	sbiw	r24, 0x01	; 1
    1b8e:	f1 f7       	brne	.-4      	; 0x1b8c <LCD_VidWriteData+0x206>
    1b90:	9a 83       	std	Y+2, r25	; 0x02
    1b92:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1b94:	6d 96       	adiw	r28, 0x1d	; 29
    1b96:	0f b6       	in	r0, 0x3f	; 63
    1b98:	f8 94       	cli
    1b9a:	de bf       	out	0x3e, r29	; 62
    1b9c:	0f be       	out	0x3f, r0	; 63
    1b9e:	cd bf       	out	0x3d, r28	; 61
    1ba0:	cf 91       	pop	r28
    1ba2:	df 91       	pop	r29
    1ba4:	08 95       	ret

00001ba6 <LCD_VidWriteCommand>:

void LCD_VidWriteCommand(u8 Command)
{
    1ba6:	df 93       	push	r29
    1ba8:	cf 93       	push	r28
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
    1bae:	6d 97       	sbiw	r28, 0x1d	; 29
    1bb0:	0f b6       	in	r0, 0x3f	; 63
    1bb2:	f8 94       	cli
    1bb4:	de bf       	out	0x3e, r29	; 62
    1bb6:	0f be       	out	0x3f, r0	; 63
    1bb8:	cd bf       	out	0x3d, r28	; 61
    1bba:	8d 8f       	std	Y+29, r24	; 0x1d
	 DIO_VidSetPinValue(3 , 0 , 0);     //RS = 0 to select command
    1bbc:	83 e0       	ldi	r24, 0x03	; 3
    1bbe:	60 e0       	ldi	r22, 0x00	; 0
    1bc0:	40 e0       	ldi	r20, 0x00	; 0
    1bc2:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_VidSetPinValue>
	 DIO_VidSetPinValue(3 , 1 , 0);     //Rw = 0 to write command
    1bc6:	83 e0       	ldi	r24, 0x03	; 3
    1bc8:	61 e0       	ldi	r22, 0x01	; 1
    1bca:	40 e0       	ldi	r20, 0x00	; 0
    1bcc:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_VidSetPinValue>
	 DIO_VidSetPortValue(2 , Command);		// PORTC = Command
    1bd0:	82 e0       	ldi	r24, 0x02	; 2
    1bd2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1bd4:	0e 94 77 08 	call	0x10ee	; 0x10ee <DIO_VidSetPortValue>
	
	// enable
	DIO_VidSetPinValue(3 , 2 , 1);     //enable = 1 
    1bd8:	83 e0       	ldi	r24, 0x03	; 3
    1bda:	62 e0       	ldi	r22, 0x02	; 2
    1bdc:	41 e0       	ldi	r20, 0x01	; 1
    1bde:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_VidSetPinValue>
    1be2:	80 e0       	ldi	r24, 0x00	; 0
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	a0 e8       	ldi	r26, 0x80	; 128
    1be8:	bf e3       	ldi	r27, 0x3F	; 63
    1bea:	89 8f       	std	Y+25, r24	; 0x19
    1bec:	9a 8f       	std	Y+26, r25	; 0x1a
    1bee:	ab 8f       	std	Y+27, r26	; 0x1b
    1bf0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bf2:	69 8d       	ldd	r22, Y+25	; 0x19
    1bf4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bf6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bf8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	4a ef       	ldi	r20, 0xFA	; 250
    1c00:	54 e4       	ldi	r21, 0x44	; 68
    1c02:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c06:	dc 01       	movw	r26, r24
    1c08:	cb 01       	movw	r24, r22
    1c0a:	8d 8b       	std	Y+21, r24	; 0x15
    1c0c:	9e 8b       	std	Y+22, r25	; 0x16
    1c0e:	af 8b       	std	Y+23, r26	; 0x17
    1c10:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c12:	6d 89       	ldd	r22, Y+21	; 0x15
    1c14:	7e 89       	ldd	r23, Y+22	; 0x16
    1c16:	8f 89       	ldd	r24, Y+23	; 0x17
    1c18:	98 8d       	ldd	r25, Y+24	; 0x18
    1c1a:	20 e0       	ldi	r18, 0x00	; 0
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	40 e8       	ldi	r20, 0x80	; 128
    1c20:	5f e3       	ldi	r21, 0x3F	; 63
    1c22:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c26:	88 23       	and	r24, r24
    1c28:	2c f4       	brge	.+10     	; 0x1c34 <LCD_VidWriteCommand+0x8e>
		__ticks = 1;
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	9c 8b       	std	Y+20, r25	; 0x14
    1c30:	8b 8b       	std	Y+19, r24	; 0x13
    1c32:	3f c0       	rjmp	.+126    	; 0x1cb2 <LCD_VidWriteCommand+0x10c>
	else if (__tmp > 65535)
    1c34:	6d 89       	ldd	r22, Y+21	; 0x15
    1c36:	7e 89       	ldd	r23, Y+22	; 0x16
    1c38:	8f 89       	ldd	r24, Y+23	; 0x17
    1c3a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	3f ef       	ldi	r19, 0xFF	; 255
    1c40:	4f e7       	ldi	r20, 0x7F	; 127
    1c42:	57 e4       	ldi	r21, 0x47	; 71
    1c44:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c48:	18 16       	cp	r1, r24
    1c4a:	4c f5       	brge	.+82     	; 0x1c9e <LCD_VidWriteCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c4c:	69 8d       	ldd	r22, Y+25	; 0x19
    1c4e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c50:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c52:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c54:	20 e0       	ldi	r18, 0x00	; 0
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	40 e2       	ldi	r20, 0x20	; 32
    1c5a:	51 e4       	ldi	r21, 0x41	; 65
    1c5c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c60:	dc 01       	movw	r26, r24
    1c62:	cb 01       	movw	r24, r22
    1c64:	bc 01       	movw	r22, r24
    1c66:	cd 01       	movw	r24, r26
    1c68:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	9c 8b       	std	Y+20, r25	; 0x14
    1c72:	8b 8b       	std	Y+19, r24	; 0x13
    1c74:	0f c0       	rjmp	.+30     	; 0x1c94 <LCD_VidWriteCommand+0xee>
    1c76:	88 ec       	ldi	r24, 0xC8	; 200
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	9a 8b       	std	Y+18, r25	; 0x12
    1c7c:	89 8b       	std	Y+17, r24	; 0x11
    1c7e:	89 89       	ldd	r24, Y+17	; 0x11
    1c80:	9a 89       	ldd	r25, Y+18	; 0x12
    1c82:	01 97       	sbiw	r24, 0x01	; 1
    1c84:	f1 f7       	brne	.-4      	; 0x1c82 <LCD_VidWriteCommand+0xdc>
    1c86:	9a 8b       	std	Y+18, r25	; 0x12
    1c88:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c8e:	01 97       	sbiw	r24, 0x01	; 1
    1c90:	9c 8b       	std	Y+20, r25	; 0x14
    1c92:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c94:	8b 89       	ldd	r24, Y+19	; 0x13
    1c96:	9c 89       	ldd	r25, Y+20	; 0x14
    1c98:	00 97       	sbiw	r24, 0x00	; 0
    1c9a:	69 f7       	brne	.-38     	; 0x1c76 <LCD_VidWriteCommand+0xd0>
    1c9c:	14 c0       	rjmp	.+40     	; 0x1cc6 <LCD_VidWriteCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c9e:	6d 89       	ldd	r22, Y+21	; 0x15
    1ca0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ca2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ca4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ca6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1caa:	dc 01       	movw	r26, r24
    1cac:	cb 01       	movw	r24, r22
    1cae:	9c 8b       	std	Y+20, r25	; 0x14
    1cb0:	8b 8b       	std	Y+19, r24	; 0x13
    1cb2:	8b 89       	ldd	r24, Y+19	; 0x13
    1cb4:	9c 89       	ldd	r25, Y+20	; 0x14
    1cb6:	98 8b       	std	Y+16, r25	; 0x10
    1cb8:	8f 87       	std	Y+15, r24	; 0x0f
    1cba:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cbc:	98 89       	ldd	r25, Y+16	; 0x10
    1cbe:	01 97       	sbiw	r24, 0x01	; 1
    1cc0:	f1 f7       	brne	.-4      	; 0x1cbe <LCD_VidWriteCommand+0x118>
    1cc2:	98 8b       	std	Y+16, r25	; 0x10
    1cc4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VidSetPinValue(3 , 2 , 0);     //enable = 0 
    1cc6:	83 e0       	ldi	r24, 0x03	; 3
    1cc8:	62 e0       	ldi	r22, 0x02	; 2
    1cca:	40 e0       	ldi	r20, 0x00	; 0
    1ccc:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_VidSetPinValue>
    1cd0:	80 e0       	ldi	r24, 0x00	; 0
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	a0 e8       	ldi	r26, 0x80	; 128
    1cd6:	bf e3       	ldi	r27, 0x3F	; 63
    1cd8:	8b 87       	std	Y+11, r24	; 0x0b
    1cda:	9c 87       	std	Y+12, r25	; 0x0c
    1cdc:	ad 87       	std	Y+13, r26	; 0x0d
    1cde:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ce2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ce4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ce6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	4a ef       	ldi	r20, 0xFA	; 250
    1cee:	54 e4       	ldi	r21, 0x44	; 68
    1cf0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	cb 01       	movw	r24, r22
    1cf8:	8f 83       	std	Y+7, r24	; 0x07
    1cfa:	98 87       	std	Y+8, r25	; 0x08
    1cfc:	a9 87       	std	Y+9, r26	; 0x09
    1cfe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d00:	6f 81       	ldd	r22, Y+7	; 0x07
    1d02:	78 85       	ldd	r23, Y+8	; 0x08
    1d04:	89 85       	ldd	r24, Y+9	; 0x09
    1d06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	40 e8       	ldi	r20, 0x80	; 128
    1d0e:	5f e3       	ldi	r21, 0x3F	; 63
    1d10:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d14:	88 23       	and	r24, r24
    1d16:	2c f4       	brge	.+10     	; 0x1d22 <LCD_VidWriteCommand+0x17c>
		__ticks = 1;
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	9e 83       	std	Y+6, r25	; 0x06
    1d1e:	8d 83       	std	Y+5, r24	; 0x05
    1d20:	3f c0       	rjmp	.+126    	; 0x1da0 <LCD_VidWriteCommand+0x1fa>
	else if (__tmp > 65535)
    1d22:	6f 81       	ldd	r22, Y+7	; 0x07
    1d24:	78 85       	ldd	r23, Y+8	; 0x08
    1d26:	89 85       	ldd	r24, Y+9	; 0x09
    1d28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d2a:	20 e0       	ldi	r18, 0x00	; 0
    1d2c:	3f ef       	ldi	r19, 0xFF	; 255
    1d2e:	4f e7       	ldi	r20, 0x7F	; 127
    1d30:	57 e4       	ldi	r21, 0x47	; 71
    1d32:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d36:	18 16       	cp	r1, r24
    1d38:	4c f5       	brge	.+82     	; 0x1d8c <LCD_VidWriteCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d40:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d42:	20 e0       	ldi	r18, 0x00	; 0
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	40 e2       	ldi	r20, 0x20	; 32
    1d48:	51 e4       	ldi	r21, 0x41	; 65
    1d4a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d4e:	dc 01       	movw	r26, r24
    1d50:	cb 01       	movw	r24, r22
    1d52:	bc 01       	movw	r22, r24
    1d54:	cd 01       	movw	r24, r26
    1d56:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	9e 83       	std	Y+6, r25	; 0x06
    1d60:	8d 83       	std	Y+5, r24	; 0x05
    1d62:	0f c0       	rjmp	.+30     	; 0x1d82 <LCD_VidWriteCommand+0x1dc>
    1d64:	88 ec       	ldi	r24, 0xC8	; 200
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	9c 83       	std	Y+4, r25	; 0x04
    1d6a:	8b 83       	std	Y+3, r24	; 0x03
    1d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d70:	01 97       	sbiw	r24, 0x01	; 1
    1d72:	f1 f7       	brne	.-4      	; 0x1d70 <LCD_VidWriteCommand+0x1ca>
    1d74:	9c 83       	std	Y+4, r25	; 0x04
    1d76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d78:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d7c:	01 97       	sbiw	r24, 0x01	; 1
    1d7e:	9e 83       	std	Y+6, r25	; 0x06
    1d80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d82:	8d 81       	ldd	r24, Y+5	; 0x05
    1d84:	9e 81       	ldd	r25, Y+6	; 0x06
    1d86:	00 97       	sbiw	r24, 0x00	; 0
    1d88:	69 f7       	brne	.-38     	; 0x1d64 <LCD_VidWriteCommand+0x1be>
    1d8a:	14 c0       	rjmp	.+40     	; 0x1db4 <LCD_VidWriteCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d8e:	78 85       	ldd	r23, Y+8	; 0x08
    1d90:	89 85       	ldd	r24, Y+9	; 0x09
    1d92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d94:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d98:	dc 01       	movw	r26, r24
    1d9a:	cb 01       	movw	r24, r22
    1d9c:	9e 83       	std	Y+6, r25	; 0x06
    1d9e:	8d 83       	std	Y+5, r24	; 0x05
    1da0:	8d 81       	ldd	r24, Y+5	; 0x05
    1da2:	9e 81       	ldd	r25, Y+6	; 0x06
    1da4:	9a 83       	std	Y+2, r25	; 0x02
    1da6:	89 83       	std	Y+1, r24	; 0x01
    1da8:	89 81       	ldd	r24, Y+1	; 0x01
    1daa:	9a 81       	ldd	r25, Y+2	; 0x02
    1dac:	01 97       	sbiw	r24, 0x01	; 1
    1dae:	f1 f7       	brne	.-4      	; 0x1dac <LCD_VidWriteCommand+0x206>
    1db0:	9a 83       	std	Y+2, r25	; 0x02
    1db2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1db4:	6d 96       	adiw	r28, 0x1d	; 29
    1db6:	0f b6       	in	r0, 0x3f	; 63
    1db8:	f8 94       	cli
    1dba:	de bf       	out	0x3e, r29	; 62
    1dbc:	0f be       	out	0x3f, r0	; 63
    1dbe:	cd bf       	out	0x3d, r28	; 61
    1dc0:	cf 91       	pop	r28
    1dc2:	df 91       	pop	r29
    1dc4:	08 95       	ret

00001dc6 <LCD_Clear>:
void LCD_Clear()
{
    1dc6:	df 93       	push	r29
    1dc8:	cf 93       	push	r28
    1dca:	cd b7       	in	r28, 0x3d	; 61
    1dcc:	de b7       	in	r29, 0x3e	; 62
    1dce:	2e 97       	sbiw	r28, 0x0e	; 14
    1dd0:	0f b6       	in	r0, 0x3f	; 63
    1dd2:	f8 94       	cli
    1dd4:	de bf       	out	0x3e, r29	; 62
    1dd6:	0f be       	out	0x3f, r0	; 63
    1dd8:	cd bf       	out	0x3d, r28	; 61
	LCD_VidWriteCommand (0x01);		/* Clear display */
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <LCD_VidWriteCommand>
    1de0:	80 e0       	ldi	r24, 0x00	; 0
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	a0 e0       	ldi	r26, 0x00	; 0
    1de6:	b0 e4       	ldi	r27, 0x40	; 64
    1de8:	8b 87       	std	Y+11, r24	; 0x0b
    1dea:	9c 87       	std	Y+12, r25	; 0x0c
    1dec:	ad 87       	std	Y+13, r26	; 0x0d
    1dee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1df0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1df2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1df4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1df6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1df8:	20 e0       	ldi	r18, 0x00	; 0
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	4a ef       	ldi	r20, 0xFA	; 250
    1dfe:	54 e4       	ldi	r21, 0x44	; 68
    1e00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e04:	dc 01       	movw	r26, r24
    1e06:	cb 01       	movw	r24, r22
    1e08:	8f 83       	std	Y+7, r24	; 0x07
    1e0a:	98 87       	std	Y+8, r25	; 0x08
    1e0c:	a9 87       	std	Y+9, r26	; 0x09
    1e0e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e10:	6f 81       	ldd	r22, Y+7	; 0x07
    1e12:	78 85       	ldd	r23, Y+8	; 0x08
    1e14:	89 85       	ldd	r24, Y+9	; 0x09
    1e16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	40 e8       	ldi	r20, 0x80	; 128
    1e1e:	5f e3       	ldi	r21, 0x3F	; 63
    1e20:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e24:	88 23       	and	r24, r24
    1e26:	2c f4       	brge	.+10     	; 0x1e32 <LCD_Clear+0x6c>
		__ticks = 1;
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	9e 83       	std	Y+6, r25	; 0x06
    1e2e:	8d 83       	std	Y+5, r24	; 0x05
    1e30:	3f c0       	rjmp	.+126    	; 0x1eb0 <LCD_Clear+0xea>
	else if (__tmp > 65535)
    1e32:	6f 81       	ldd	r22, Y+7	; 0x07
    1e34:	78 85       	ldd	r23, Y+8	; 0x08
    1e36:	89 85       	ldd	r24, Y+9	; 0x09
    1e38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	3f ef       	ldi	r19, 0xFF	; 255
    1e3e:	4f e7       	ldi	r20, 0x7F	; 127
    1e40:	57 e4       	ldi	r21, 0x47	; 71
    1e42:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e46:	18 16       	cp	r1, r24
    1e48:	4c f5       	brge	.+82     	; 0x1e9c <LCD_Clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e52:	20 e0       	ldi	r18, 0x00	; 0
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	40 e2       	ldi	r20, 0x20	; 32
    1e58:	51 e4       	ldi	r21, 0x41	; 65
    1e5a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e5e:	dc 01       	movw	r26, r24
    1e60:	cb 01       	movw	r24, r22
    1e62:	bc 01       	movw	r22, r24
    1e64:	cd 01       	movw	r24, r26
    1e66:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	9e 83       	std	Y+6, r25	; 0x06
    1e70:	8d 83       	std	Y+5, r24	; 0x05
    1e72:	0f c0       	rjmp	.+30     	; 0x1e92 <LCD_Clear+0xcc>
    1e74:	88 ec       	ldi	r24, 0xC8	; 200
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	9c 83       	std	Y+4, r25	; 0x04
    1e7a:	8b 83       	std	Y+3, r24	; 0x03
    1e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e80:	01 97       	sbiw	r24, 0x01	; 1
    1e82:	f1 f7       	brne	.-4      	; 0x1e80 <LCD_Clear+0xba>
    1e84:	9c 83       	std	Y+4, r25	; 0x04
    1e86:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e88:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e8c:	01 97       	sbiw	r24, 0x01	; 1
    1e8e:	9e 83       	std	Y+6, r25	; 0x06
    1e90:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e92:	8d 81       	ldd	r24, Y+5	; 0x05
    1e94:	9e 81       	ldd	r25, Y+6	; 0x06
    1e96:	00 97       	sbiw	r24, 0x00	; 0
    1e98:	69 f7       	brne	.-38     	; 0x1e74 <LCD_Clear+0xae>
    1e9a:	14 c0       	rjmp	.+40     	; 0x1ec4 <LCD_Clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e9e:	78 85       	ldd	r23, Y+8	; 0x08
    1ea0:	89 85       	ldd	r24, Y+9	; 0x09
    1ea2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	9e 83       	std	Y+6, r25	; 0x06
    1eae:	8d 83       	std	Y+5, r24	; 0x05
    1eb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb2:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb4:	9a 83       	std	Y+2, r25	; 0x02
    1eb6:	89 83       	std	Y+1, r24	; 0x01
    1eb8:	89 81       	ldd	r24, Y+1	; 0x01
    1eba:	9a 81       	ldd	r25, Y+2	; 0x02
    1ebc:	01 97       	sbiw	r24, 0x01	; 1
    1ebe:	f1 f7       	brne	.-4      	; 0x1ebc <LCD_Clear+0xf6>
    1ec0:	9a 83       	std	Y+2, r25	; 0x02
    1ec2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_VidWriteCommand (0x80);		/* Cursor at home position */
    1ec4:	80 e8       	ldi	r24, 0x80	; 128
    1ec6:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <LCD_VidWriteCommand>
}
    1eca:	2e 96       	adiw	r28, 0x0e	; 14
    1ecc:	0f b6       	in	r0, 0x3f	; 63
    1ece:	f8 94       	cli
    1ed0:	de bf       	out	0x3e, r29	; 62
    1ed2:	0f be       	out	0x3f, r0	; 63
    1ed4:	cd bf       	out	0x3d, r28	; 61
    1ed6:	cf 91       	pop	r28
    1ed8:	df 91       	pop	r29
    1eda:	08 95       	ret

00001edc <LCD_VidWriteString>:


void LCD_VidWriteString(u8 *StringOfCharacters)
{
    1edc:	df 93       	push	r29
    1ede:	cf 93       	push	r28
    1ee0:	00 d0       	rcall	.+0      	; 0x1ee2 <LCD_VidWriteString+0x6>
    1ee2:	cd b7       	in	r28, 0x3d	; 61
    1ee4:	de b7       	in	r29, 0x3e	; 62
    1ee6:	9a 83       	std	Y+2, r25	; 0x02
    1ee8:	89 83       	std	Y+1, r24	; 0x01
    1eea:	0b c0       	rjmp	.+22     	; 0x1f02 <LCD_VidWriteString+0x26>
while(*StringOfCharacters > 0)
{
	LCD_VidWriteData(*StringOfCharacters++);
    1eec:	e9 81       	ldd	r30, Y+1	; 0x01
    1eee:	fa 81       	ldd	r31, Y+2	; 0x02
    1ef0:	20 81       	ld	r18, Z
    1ef2:	89 81       	ldd	r24, Y+1	; 0x01
    1ef4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef6:	01 96       	adiw	r24, 0x01	; 1
    1ef8:	9a 83       	std	Y+2, r25	; 0x02
    1efa:	89 83       	std	Y+1, r24	; 0x01
    1efc:	82 2f       	mov	r24, r18
    1efe:	0e 94 c3 0c 	call	0x1986	; 0x1986 <LCD_VidWriteData>
}


void LCD_VidWriteString(u8 *StringOfCharacters)
{
while(*StringOfCharacters > 0)
    1f02:	e9 81       	ldd	r30, Y+1	; 0x01
    1f04:	fa 81       	ldd	r31, Y+2	; 0x02
    1f06:	80 81       	ld	r24, Z
    1f08:	88 23       	and	r24, r24
    1f0a:	81 f7       	brne	.-32     	; 0x1eec <LCD_VidWriteString+0x10>
{
	LCD_VidWriteData(*StringOfCharacters++);
}
}
    1f0c:	0f 90       	pop	r0
    1f0e:	0f 90       	pop	r0
    1f10:	cf 91       	pop	r28
    1f12:	df 91       	pop	r29
    1f14:	08 95       	ret

00001f16 <LCD_VidWriteNum>:


void LCD_VidWriteNum(u16 num)
{
    1f16:	df 93       	push	r29
    1f18:	cf 93       	push	r28
    1f1a:	00 d0       	rcall	.+0      	; 0x1f1c <LCD_VidWriteNum+0x6>
    1f1c:	00 d0       	rcall	.+0      	; 0x1f1e <LCD_VidWriteNum+0x8>
    1f1e:	00 d0       	rcall	.+0      	; 0x1f20 <LCD_VidWriteNum+0xa>
    1f20:	cd b7       	in	r28, 0x3d	; 61
    1f22:	de b7       	in	r29, 0x3e	; 62
    1f24:	9e 83       	std	Y+6, r25	; 0x06
    1f26:	8d 83       	std	Y+5, r24	; 0x05
	u8 rev=0;
    1f28:	1c 82       	std	Y+4, r1	; 0x04
	u8 rem=0;
    1f2a:	1b 82       	std	Y+3, r1	; 0x03
	u8 i=0;
    1f2c:	1a 82       	std	Y+2, r1	; 0x02
	u8 zero_flag=0;
    1f2e:	19 82       	std	Y+1, r1	; 0x01
    1f30:	29 c0       	rjmp	.+82     	; 0x1f84 <LCD_VidWriteNum+0x6e>
	while(num >0)
	{
		 rem= num % 10;
    1f32:	8d 81       	ldd	r24, Y+5	; 0x05
    1f34:	9e 81       	ldd	r25, Y+6	; 0x06
    1f36:	2a e0       	ldi	r18, 0x0A	; 10
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	b9 01       	movw	r22, r18
    1f3c:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <__udivmodhi4>
    1f40:	8b 83       	std	Y+3, r24	; 0x03
		 if (rem==0){
    1f42:	8b 81       	ldd	r24, Y+3	; 0x03
    1f44:	88 23       	and	r24, r24
    1f46:	19 f4       	brne	.+6      	; 0x1f4e <LCD_VidWriteNum+0x38>
			 zero_flag++;
    1f48:	89 81       	ldd	r24, Y+1	; 0x01
    1f4a:	8f 5f       	subi	r24, 0xFF	; 255
    1f4c:	89 83       	std	Y+1, r24	; 0x01
		 }
		 rev =rev*10+rem;
    1f4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f50:	88 2f       	mov	r24, r24
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	9c 01       	movw	r18, r24
    1f56:	22 0f       	add	r18, r18
    1f58:	33 1f       	adc	r19, r19
    1f5a:	c9 01       	movw	r24, r18
    1f5c:	88 0f       	add	r24, r24
    1f5e:	99 1f       	adc	r25, r25
    1f60:	88 0f       	add	r24, r24
    1f62:	99 1f       	adc	r25, r25
    1f64:	82 0f       	add	r24, r18
    1f66:	93 1f       	adc	r25, r19
    1f68:	98 2f       	mov	r25, r24
    1f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6c:	89 0f       	add	r24, r25
    1f6e:	8c 83       	std	Y+4, r24	; 0x04
		num/=10;
    1f70:	8d 81       	ldd	r24, Y+5	; 0x05
    1f72:	9e 81       	ldd	r25, Y+6	; 0x06
    1f74:	2a e0       	ldi	r18, 0x0A	; 10
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	b9 01       	movw	r22, r18
    1f7a:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <__udivmodhi4>
    1f7e:	cb 01       	movw	r24, r22
    1f80:	9e 83       	std	Y+6, r25	; 0x06
    1f82:	8d 83       	std	Y+5, r24	; 0x05
{
	u8 rev=0;
	u8 rem=0;
	u8 i=0;
	u8 zero_flag=0;
	while(num >0)
    1f84:	8d 81       	ldd	r24, Y+5	; 0x05
    1f86:	9e 81       	ldd	r25, Y+6	; 0x06
    1f88:	00 97       	sbiw	r24, 0x00	; 0
    1f8a:	99 f6       	brne	.-90     	; 0x1f32 <LCD_VidWriteNum+0x1c>
    1f8c:	1d c0       	rjmp	.+58     	; 0x1fc8 <LCD_VidWriteNum+0xb2>
		 rev =rev*10+rem;
		num/=10;
		}
	while(rev >1)
	{
		 rem= rev % 10;
    1f8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f90:	9a e0       	ldi	r25, 0x0A	; 10
    1f92:	69 2f       	mov	r22, r25
    1f94:	0e 94 c7 19 	call	0x338e	; 0x338e <__udivmodqi4>
    1f98:	89 2f       	mov	r24, r25
    1f9a:	8b 83       	std	Y+3, r24	; 0x03
		 LCD_VidWriteData(rem+48);
    1f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9e:	80 5d       	subi	r24, 0xD0	; 208
    1fa0:	0e 94 c3 0c 	call	0x1986	; 0x1986 <LCD_VidWriteData>
		rev/=10;
    1fa4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fa6:	9a e0       	ldi	r25, 0x0A	; 10
    1fa8:	69 2f       	mov	r22, r25
    1faa:	0e 94 c7 19 	call	0x338e	; 0x338e <__udivmodqi4>
    1fae:	8c 83       	std	Y+4, r24	; 0x04
		for(i=0;i<zero_flag;i++){
    1fb0:	1a 82       	std	Y+2, r1	; 0x02
    1fb2:	06 c0       	rjmp	.+12     	; 0x1fc0 <LCD_VidWriteNum+0xaa>
			LCD_VidWriteData(0+48);
    1fb4:	80 e3       	ldi	r24, 0x30	; 48
    1fb6:	0e 94 c3 0c 	call	0x1986	; 0x1986 <LCD_VidWriteData>
	while(rev >1)
	{
		 rem= rev % 10;
		 LCD_VidWriteData(rem+48);
		rev/=10;
		for(i=0;i<zero_flag;i++){
    1fba:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbc:	8f 5f       	subi	r24, 0xFF	; 255
    1fbe:	8a 83       	std	Y+2, r24	; 0x02
    1fc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc2:	89 81       	ldd	r24, Y+1	; 0x01
    1fc4:	98 17       	cp	r25, r24
    1fc6:	b0 f3       	brcs	.-20     	; 0x1fb4 <LCD_VidWriteNum+0x9e>
			 zero_flag++;
		 }
		 rev =rev*10+rem;
		num/=10;
		}
	while(rev >1)
    1fc8:	8c 81       	ldd	r24, Y+4	; 0x04
    1fca:	82 30       	cpi	r24, 0x02	; 2
    1fcc:	00 f7       	brcc	.-64     	; 0x1f8e <LCD_VidWriteNum+0x78>
		rev/=10;
		for(i=0;i<zero_flag;i++){
			LCD_VidWriteData(0+48);
		}
		}
}
    1fce:	26 96       	adiw	r28, 0x06	; 6
    1fd0:	0f b6       	in	r0, 0x3f	; 63
    1fd2:	f8 94       	cli
    1fd4:	de bf       	out	0x3e, r29	; 62
    1fd6:	0f be       	out	0x3f, r0	; 63
    1fd8:	cd bf       	out	0x3d, r28	; 61
    1fda:	cf 91       	pop	r28
    1fdc:	df 91       	pop	r29
    1fde:	08 95       	ret

00001fe0 <LDR_Read>:
#include "ADC_Interface.h"



u8 LDR_Read(u8 pin)
{
    1fe0:	df 93       	push	r29
    1fe2:	cf 93       	push	r28
    1fe4:	0f 92       	push	r0
    1fe6:	cd b7       	in	r28, 0x3d	; 61
    1fe8:	de b7       	in	r29, 0x3e	; 62
    1fea:	89 83       	std	Y+1, r24	; 0x01
	 ADC_Init();
    1fec:	0e 94 9b 05 	call	0xb36	; 0xb36 <ADC_Init>

 return ADC_ReadValue(pin);
    1ff0:	89 81       	ldd	r24, Y+1	; 0x01
    1ff2:	0e 94 e7 05 	call	0xbce	; 0xbce <ADC_ReadValue>
}
    1ff6:	0f 90       	pop	r0
    1ff8:	cf 91       	pop	r28
    1ffa:	df 91       	pop	r29
    1ffc:	08 95       	ret

00001ffe <LED_operate>:
#include "DIO_Interface.h"

#define output 1

void LED_operate(u8 Port, u8 pin, u8 value)
{
    1ffe:	df 93       	push	r29
    2000:	cf 93       	push	r28
    2002:	00 d0       	rcall	.+0      	; 0x2004 <LED_operate+0x6>
    2004:	0f 92       	push	r0
    2006:	cd b7       	in	r28, 0x3d	; 61
    2008:	de b7       	in	r29, 0x3e	; 62
    200a:	89 83       	std	Y+1, r24	; 0x01
    200c:	6a 83       	std	Y+2, r22	; 0x02
    200e:	4b 83       	std	Y+3, r20	; 0x03
	DIO_VidSetPinDirection(Port ,pin, output);
    2010:	89 81       	ldd	r24, Y+1	; 0x01
    2012:	6a 81       	ldd	r22, Y+2	; 0x02
    2014:	41 e0       	ldi	r20, 0x01	; 1
    2016:	0e 94 36 06 	call	0xc6c	; 0xc6c <DIO_VidSetPinDirection>
	
	DIO_VidSetPinValue(Port , pin, value);
    201a:	89 81       	ldd	r24, Y+1	; 0x01
    201c:	6a 81       	ldd	r22, Y+2	; 0x02
    201e:	4b 81       	ldd	r20, Y+3	; 0x03
    2020:	0e 94 36 07 	call	0xe6c	; 0xe6c <DIO_VidSetPinValue>
	
	
}
    2024:	0f 90       	pop	r0
    2026:	0f 90       	pop	r0
    2028:	0f 90       	pop	r0
    202a:	cf 91       	pop	r28
    202c:	df 91       	pop	r29
    202e:	08 95       	ret

00002030 <LED_Toggle>:

void LED_Toggle(u8 Port , u8 pin)
{
    2030:	df 93       	push	r29
    2032:	cf 93       	push	r28
    2034:	00 d0       	rcall	.+0      	; 0x2036 <LED_Toggle+0x6>
    2036:	cd b7       	in	r28, 0x3d	; 61
    2038:	de b7       	in	r29, 0x3e	; 62
    203a:	89 83       	std	Y+1, r24	; 0x01
    203c:	6a 83       	std	Y+2, r22	; 0x02
	
	DIO_VidSetPinDirection(Port ,pin, output);
    203e:	89 81       	ldd	r24, Y+1	; 0x01
    2040:	6a 81       	ldd	r22, Y+2	; 0x02
    2042:	41 e0       	ldi	r20, 0x01	; 1
    2044:	0e 94 36 06 	call	0xc6c	; 0xc6c <DIO_VidSetPinDirection>
	
	 DIO_VidTogglePin(Port , pin);
    2048:	89 81       	ldd	r24, Y+1	; 0x01
    204a:	6a 81       	ldd	r22, Y+2	; 0x02
    204c:	0e 94 31 09 	call	0x1262	; 0x1262 <DIO_VidTogglePin>

}
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	cf 91       	pop	r28
    2056:	df 91       	pop	r29
    2058:	08 95       	ret

0000205a <TEMP_Read>:
#include "BIT_MATH.h"
#include "ADC_Register.h"
#include "ADC_Interface.h"

u8 TEMP_Read(u8 pin)
{
    205a:	df 93       	push	r29
    205c:	cf 93       	push	r28
    205e:	0f 92       	push	r0
    2060:	cd b7       	in	r28, 0x3d	; 61
    2062:	de b7       	in	r29, 0x3e	; 62
    2064:	89 83       	std	Y+1, r24	; 0x01

 ADC_Init();
    2066:	0e 94 9b 05 	call	0xb36	; 0xb36 <ADC_Init>

 return ADC_ReadValue(pin);
    206a:	89 81       	ldd	r24, Y+1	; 0x01
    206c:	0e 94 e7 05 	call	0xbce	; 0xbce <ADC_ReadValue>
    2070:	0f 90       	pop	r0
    2072:	cf 91       	pop	r28
    2074:	df 91       	pop	r29
    2076:	08 95       	ret

00002078 <main>:



void main(void)

{
    2078:	0f 93       	push	r16
    207a:	1f 93       	push	r17
    207c:	df 93       	push	r29
    207e:	cf 93       	push	r28
    2080:	cd b7       	in	r28, 0x3d	; 61
    2082:	de b7       	in	r29, 0x3e	; 62
    2084:	cc 5f       	subi	r28, 0xFC	; 252
    2086:	d0 40       	sbci	r29, 0x00	; 0
    2088:	0f b6       	in	r0, 0x3f	; 63
    208a:	f8 94       	cli
    208c:	de bf       	out	0x3e, r29	; 62
    208e:	0f be       	out	0x3f, r0	; 63
    2090:	cd bf       	out	0x3d, r28	; 61
	char Passward 	      = 1234;
    2092:	fe 01       	movw	r30, r28
    2094:	e9 56       	subi	r30, 0x69	; 105
    2096:	ff 4f       	sbci	r31, 0xFF	; 255
    2098:	82 ed       	ldi	r24, 0xD2	; 210
    209a:	80 83       	st	Z, r24
	char msg[] 	      = "Enter your ID:";
    209c:	ce 01       	movw	r24, r28
    209e:	88 56       	subi	r24, 0x68	; 104
    20a0:	9f 4f       	sbci	r25, 0xFF	; 255
    20a2:	c6 52       	subi	r28, 0x26	; 38
    20a4:	df 4f       	sbci	r29, 0xFF	; 255
    20a6:	99 83       	std	Y+1, r25	; 0x01
    20a8:	88 83       	st	Y, r24
    20aa:	ca 5d       	subi	r28, 0xDA	; 218
    20ac:	d0 40       	sbci	r29, 0x00	; 0
    20ae:	20 e6       	ldi	r18, 0x60	; 96
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	c4 52       	subi	r28, 0x24	; 36
    20b4:	df 4f       	sbci	r29, 0xFF	; 255
    20b6:	39 83       	std	Y+1, r19	; 0x01
    20b8:	28 83       	st	Y, r18
    20ba:	cc 5d       	subi	r28, 0xDC	; 220
    20bc:	d0 40       	sbci	r29, 0x00	; 0
    20be:	3f e0       	ldi	r19, 0x0F	; 15
    20c0:	c2 52       	subi	r28, 0x22	; 34
    20c2:	df 4f       	sbci	r29, 0xFF	; 255
    20c4:	38 83       	st	Y, r19
    20c6:	ce 5d       	subi	r28, 0xDE	; 222
    20c8:	d0 40       	sbci	r29, 0x00	; 0
    20ca:	c4 52       	subi	r28, 0x24	; 36
    20cc:	df 4f       	sbci	r29, 0xFF	; 255
    20ce:	e8 81       	ld	r30, Y
    20d0:	f9 81       	ldd	r31, Y+1	; 0x01
    20d2:	cc 5d       	subi	r28, 0xDC	; 220
    20d4:	d0 40       	sbci	r29, 0x00	; 0
    20d6:	00 80       	ld	r0, Z
    20d8:	c4 52       	subi	r28, 0x24	; 36
    20da:	df 4f       	sbci	r29, 0xFF	; 255
    20dc:	28 81       	ld	r18, Y
    20de:	39 81       	ldd	r19, Y+1	; 0x01
    20e0:	cc 5d       	subi	r28, 0xDC	; 220
    20e2:	d0 40       	sbci	r29, 0x00	; 0
    20e4:	2f 5f       	subi	r18, 0xFF	; 255
    20e6:	3f 4f       	sbci	r19, 0xFF	; 255
    20e8:	c4 52       	subi	r28, 0x24	; 36
    20ea:	df 4f       	sbci	r29, 0xFF	; 255
    20ec:	39 83       	std	Y+1, r19	; 0x01
    20ee:	28 83       	st	Y, r18
    20f0:	cc 5d       	subi	r28, 0xDC	; 220
    20f2:	d0 40       	sbci	r29, 0x00	; 0
    20f4:	c6 52       	subi	r28, 0x26	; 38
    20f6:	df 4f       	sbci	r29, 0xFF	; 255
    20f8:	e8 81       	ld	r30, Y
    20fa:	f9 81       	ldd	r31, Y+1	; 0x01
    20fc:	ca 5d       	subi	r28, 0xDA	; 218
    20fe:	d0 40       	sbci	r29, 0x00	; 0
    2100:	00 82       	st	Z, r0
    2102:	c6 52       	subi	r28, 0x26	; 38
    2104:	df 4f       	sbci	r29, 0xFF	; 255
    2106:	28 81       	ld	r18, Y
    2108:	39 81       	ldd	r19, Y+1	; 0x01
    210a:	ca 5d       	subi	r28, 0xDA	; 218
    210c:	d0 40       	sbci	r29, 0x00	; 0
    210e:	2f 5f       	subi	r18, 0xFF	; 255
    2110:	3f 4f       	sbci	r19, 0xFF	; 255
    2112:	c6 52       	subi	r28, 0x26	; 38
    2114:	df 4f       	sbci	r29, 0xFF	; 255
    2116:	39 83       	std	Y+1, r19	; 0x01
    2118:	28 83       	st	Y, r18
    211a:	ca 5d       	subi	r28, 0xDA	; 218
    211c:	d0 40       	sbci	r29, 0x00	; 0
    211e:	c2 52       	subi	r28, 0x22	; 34
    2120:	df 4f       	sbci	r29, 0xFF	; 255
    2122:	38 81       	ld	r19, Y
    2124:	ce 5d       	subi	r28, 0xDE	; 222
    2126:	d0 40       	sbci	r29, 0x00	; 0
    2128:	31 50       	subi	r19, 0x01	; 1
    212a:	c2 52       	subi	r28, 0x22	; 34
    212c:	df 4f       	sbci	r29, 0xFF	; 255
    212e:	38 83       	st	Y, r19
    2130:	ce 5d       	subi	r28, 0xDE	; 222
    2132:	d0 40       	sbci	r29, 0x00	; 0
    2134:	c2 52       	subi	r28, 0x22	; 34
    2136:	df 4f       	sbci	r29, 0xFF	; 255
    2138:	88 81       	ld	r24, Y
    213a:	ce 5d       	subi	r28, 0xDE	; 222
    213c:	d0 40       	sbci	r29, 0x00	; 0
    213e:	88 23       	and	r24, r24
    2140:	21 f6       	brne	.-120    	; 0x20ca <main+0x52>
	char Stop[] 	      = "3-Stop";
    2142:	ce 01       	movw	r24, r28
    2144:	89 55       	subi	r24, 0x59	; 89
    2146:	9f 4f       	sbci	r25, 0xFF	; 255
    2148:	c1 52       	subi	r28, 0x21	; 33
    214a:	df 4f       	sbci	r29, 0xFF	; 255
    214c:	99 83       	std	Y+1, r25	; 0x01
    214e:	88 83       	st	Y, r24
    2150:	cf 5d       	subi	r28, 0xDF	; 223
    2152:	d0 40       	sbci	r29, 0x00	; 0
    2154:	ef e6       	ldi	r30, 0x6F	; 111
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	cf 51       	subi	r28, 0x1F	; 31
    215a:	df 4f       	sbci	r29, 0xFF	; 255
    215c:	f9 83       	std	Y+1, r31	; 0x01
    215e:	e8 83       	st	Y, r30
    2160:	c1 5e       	subi	r28, 0xE1	; 225
    2162:	d0 40       	sbci	r29, 0x00	; 0
    2164:	f7 e0       	ldi	r31, 0x07	; 7
    2166:	cd 51       	subi	r28, 0x1D	; 29
    2168:	df 4f       	sbci	r29, 0xFF	; 255
    216a:	f8 83       	st	Y, r31
    216c:	c3 5e       	subi	r28, 0xE3	; 227
    216e:	d0 40       	sbci	r29, 0x00	; 0
    2170:	cf 51       	subi	r28, 0x1F	; 31
    2172:	df 4f       	sbci	r29, 0xFF	; 255
    2174:	e8 81       	ld	r30, Y
    2176:	f9 81       	ldd	r31, Y+1	; 0x01
    2178:	c1 5e       	subi	r28, 0xE1	; 225
    217a:	d0 40       	sbci	r29, 0x00	; 0
    217c:	00 80       	ld	r0, Z
    217e:	cf 51       	subi	r28, 0x1F	; 31
    2180:	df 4f       	sbci	r29, 0xFF	; 255
    2182:	28 81       	ld	r18, Y
    2184:	39 81       	ldd	r19, Y+1	; 0x01
    2186:	c1 5e       	subi	r28, 0xE1	; 225
    2188:	d0 40       	sbci	r29, 0x00	; 0
    218a:	2f 5f       	subi	r18, 0xFF	; 255
    218c:	3f 4f       	sbci	r19, 0xFF	; 255
    218e:	cf 51       	subi	r28, 0x1F	; 31
    2190:	df 4f       	sbci	r29, 0xFF	; 255
    2192:	39 83       	std	Y+1, r19	; 0x01
    2194:	28 83       	st	Y, r18
    2196:	c1 5e       	subi	r28, 0xE1	; 225
    2198:	d0 40       	sbci	r29, 0x00	; 0
    219a:	c1 52       	subi	r28, 0x21	; 33
    219c:	df 4f       	sbci	r29, 0xFF	; 255
    219e:	e8 81       	ld	r30, Y
    21a0:	f9 81       	ldd	r31, Y+1	; 0x01
    21a2:	cf 5d       	subi	r28, 0xDF	; 223
    21a4:	d0 40       	sbci	r29, 0x00	; 0
    21a6:	00 82       	st	Z, r0
    21a8:	c1 52       	subi	r28, 0x21	; 33
    21aa:	df 4f       	sbci	r29, 0xFF	; 255
    21ac:	28 81       	ld	r18, Y
    21ae:	39 81       	ldd	r19, Y+1	; 0x01
    21b0:	cf 5d       	subi	r28, 0xDF	; 223
    21b2:	d0 40       	sbci	r29, 0x00	; 0
    21b4:	2f 5f       	subi	r18, 0xFF	; 255
    21b6:	3f 4f       	sbci	r19, 0xFF	; 255
    21b8:	c1 52       	subi	r28, 0x21	; 33
    21ba:	df 4f       	sbci	r29, 0xFF	; 255
    21bc:	39 83       	std	Y+1, r19	; 0x01
    21be:	28 83       	st	Y, r18
    21c0:	cf 5d       	subi	r28, 0xDF	; 223
    21c2:	d0 40       	sbci	r29, 0x00	; 0
    21c4:	cd 51       	subi	r28, 0x1D	; 29
    21c6:	df 4f       	sbci	r29, 0xFF	; 255
    21c8:	38 81       	ld	r19, Y
    21ca:	c3 5e       	subi	r28, 0xE3	; 227
    21cc:	d0 40       	sbci	r29, 0x00	; 0
    21ce:	31 50       	subi	r19, 0x01	; 1
    21d0:	cd 51       	subi	r28, 0x1D	; 29
    21d2:	df 4f       	sbci	r29, 0xFF	; 255
    21d4:	38 83       	st	Y, r19
    21d6:	c3 5e       	subi	r28, 0xE3	; 227
    21d8:	d0 40       	sbci	r29, 0x00	; 0
    21da:	cd 51       	subi	r28, 0x1D	; 29
    21dc:	df 4f       	sbci	r29, 0xFF	; 255
    21de:	88 81       	ld	r24, Y
    21e0:	c3 5e       	subi	r28, 0xE3	; 227
    21e2:	d0 40       	sbci	r29, 0x00	; 0
    21e4:	88 23       	and	r24, r24
    21e6:	21 f6       	brne	.-120    	; 0x2170 <main+0xf8>
	char TEMP[] 	      = "1-Temp";
    21e8:	ce 01       	movw	r24, r28
    21ea:	82 55       	subi	r24, 0x52	; 82
    21ec:	9f 4f       	sbci	r25, 0xFF	; 255
    21ee:	cc 51       	subi	r28, 0x1C	; 28
    21f0:	df 4f       	sbci	r29, 0xFF	; 255
    21f2:	99 83       	std	Y+1, r25	; 0x01
    21f4:	88 83       	st	Y, r24
    21f6:	c4 5e       	subi	r28, 0xE4	; 228
    21f8:	d0 40       	sbci	r29, 0x00	; 0
    21fa:	e6 e7       	ldi	r30, 0x76	; 118
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	ca 51       	subi	r28, 0x1A	; 26
    2200:	df 4f       	sbci	r29, 0xFF	; 255
    2202:	f9 83       	std	Y+1, r31	; 0x01
    2204:	e8 83       	st	Y, r30
    2206:	c6 5e       	subi	r28, 0xE6	; 230
    2208:	d0 40       	sbci	r29, 0x00	; 0
    220a:	f7 e0       	ldi	r31, 0x07	; 7
    220c:	c8 51       	subi	r28, 0x18	; 24
    220e:	df 4f       	sbci	r29, 0xFF	; 255
    2210:	f8 83       	st	Y, r31
    2212:	c8 5e       	subi	r28, 0xE8	; 232
    2214:	d0 40       	sbci	r29, 0x00	; 0
    2216:	ca 51       	subi	r28, 0x1A	; 26
    2218:	df 4f       	sbci	r29, 0xFF	; 255
    221a:	e8 81       	ld	r30, Y
    221c:	f9 81       	ldd	r31, Y+1	; 0x01
    221e:	c6 5e       	subi	r28, 0xE6	; 230
    2220:	d0 40       	sbci	r29, 0x00	; 0
    2222:	00 80       	ld	r0, Z
    2224:	ca 51       	subi	r28, 0x1A	; 26
    2226:	df 4f       	sbci	r29, 0xFF	; 255
    2228:	28 81       	ld	r18, Y
    222a:	39 81       	ldd	r19, Y+1	; 0x01
    222c:	c6 5e       	subi	r28, 0xE6	; 230
    222e:	d0 40       	sbci	r29, 0x00	; 0
    2230:	2f 5f       	subi	r18, 0xFF	; 255
    2232:	3f 4f       	sbci	r19, 0xFF	; 255
    2234:	ca 51       	subi	r28, 0x1A	; 26
    2236:	df 4f       	sbci	r29, 0xFF	; 255
    2238:	39 83       	std	Y+1, r19	; 0x01
    223a:	28 83       	st	Y, r18
    223c:	c6 5e       	subi	r28, 0xE6	; 230
    223e:	d0 40       	sbci	r29, 0x00	; 0
    2240:	cc 51       	subi	r28, 0x1C	; 28
    2242:	df 4f       	sbci	r29, 0xFF	; 255
    2244:	e8 81       	ld	r30, Y
    2246:	f9 81       	ldd	r31, Y+1	; 0x01
    2248:	c4 5e       	subi	r28, 0xE4	; 228
    224a:	d0 40       	sbci	r29, 0x00	; 0
    224c:	00 82       	st	Z, r0
    224e:	cc 51       	subi	r28, 0x1C	; 28
    2250:	df 4f       	sbci	r29, 0xFF	; 255
    2252:	28 81       	ld	r18, Y
    2254:	39 81       	ldd	r19, Y+1	; 0x01
    2256:	c4 5e       	subi	r28, 0xE4	; 228
    2258:	d0 40       	sbci	r29, 0x00	; 0
    225a:	2f 5f       	subi	r18, 0xFF	; 255
    225c:	3f 4f       	sbci	r19, 0xFF	; 255
    225e:	cc 51       	subi	r28, 0x1C	; 28
    2260:	df 4f       	sbci	r29, 0xFF	; 255
    2262:	39 83       	std	Y+1, r19	; 0x01
    2264:	28 83       	st	Y, r18
    2266:	c4 5e       	subi	r28, 0xE4	; 228
    2268:	d0 40       	sbci	r29, 0x00	; 0
    226a:	c8 51       	subi	r28, 0x18	; 24
    226c:	df 4f       	sbci	r29, 0xFF	; 255
    226e:	38 81       	ld	r19, Y
    2270:	c8 5e       	subi	r28, 0xE8	; 232
    2272:	d0 40       	sbci	r29, 0x00	; 0
    2274:	31 50       	subi	r19, 0x01	; 1
    2276:	c8 51       	subi	r28, 0x18	; 24
    2278:	df 4f       	sbci	r29, 0xFF	; 255
    227a:	38 83       	st	Y, r19
    227c:	c8 5e       	subi	r28, 0xE8	; 232
    227e:	d0 40       	sbci	r29, 0x00	; 0
    2280:	c8 51       	subi	r28, 0x18	; 24
    2282:	df 4f       	sbci	r29, 0xFF	; 255
    2284:	88 81       	ld	r24, Y
    2286:	c8 5e       	subi	r28, 0xE8	; 232
    2288:	d0 40       	sbci	r29, 0x00	; 0
    228a:	88 23       	and	r24, r24
    228c:	21 f6       	brne	.-120    	; 0x2216 <main+0x19e>
	char LDR[] 	      = "2-LDR";
    228e:	ce 01       	movw	r24, r28
    2290:	8b 54       	subi	r24, 0x4B	; 75
    2292:	9f 4f       	sbci	r25, 0xFF	; 255
    2294:	c7 51       	subi	r28, 0x17	; 23
    2296:	df 4f       	sbci	r29, 0xFF	; 255
    2298:	99 83       	std	Y+1, r25	; 0x01
    229a:	88 83       	st	Y, r24
    229c:	c9 5e       	subi	r28, 0xE9	; 233
    229e:	d0 40       	sbci	r29, 0x00	; 0
    22a0:	ed e7       	ldi	r30, 0x7D	; 125
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	c5 51       	subi	r28, 0x15	; 21
    22a6:	df 4f       	sbci	r29, 0xFF	; 255
    22a8:	f9 83       	std	Y+1, r31	; 0x01
    22aa:	e8 83       	st	Y, r30
    22ac:	cb 5e       	subi	r28, 0xEB	; 235
    22ae:	d0 40       	sbci	r29, 0x00	; 0
    22b0:	f6 e0       	ldi	r31, 0x06	; 6
    22b2:	c3 51       	subi	r28, 0x13	; 19
    22b4:	df 4f       	sbci	r29, 0xFF	; 255
    22b6:	f8 83       	st	Y, r31
    22b8:	cd 5e       	subi	r28, 0xED	; 237
    22ba:	d0 40       	sbci	r29, 0x00	; 0
    22bc:	c5 51       	subi	r28, 0x15	; 21
    22be:	df 4f       	sbci	r29, 0xFF	; 255
    22c0:	e8 81       	ld	r30, Y
    22c2:	f9 81       	ldd	r31, Y+1	; 0x01
    22c4:	cb 5e       	subi	r28, 0xEB	; 235
    22c6:	d0 40       	sbci	r29, 0x00	; 0
    22c8:	00 80       	ld	r0, Z
    22ca:	c5 51       	subi	r28, 0x15	; 21
    22cc:	df 4f       	sbci	r29, 0xFF	; 255
    22ce:	28 81       	ld	r18, Y
    22d0:	39 81       	ldd	r19, Y+1	; 0x01
    22d2:	cb 5e       	subi	r28, 0xEB	; 235
    22d4:	d0 40       	sbci	r29, 0x00	; 0
    22d6:	2f 5f       	subi	r18, 0xFF	; 255
    22d8:	3f 4f       	sbci	r19, 0xFF	; 255
    22da:	c5 51       	subi	r28, 0x15	; 21
    22dc:	df 4f       	sbci	r29, 0xFF	; 255
    22de:	39 83       	std	Y+1, r19	; 0x01
    22e0:	28 83       	st	Y, r18
    22e2:	cb 5e       	subi	r28, 0xEB	; 235
    22e4:	d0 40       	sbci	r29, 0x00	; 0
    22e6:	c7 51       	subi	r28, 0x17	; 23
    22e8:	df 4f       	sbci	r29, 0xFF	; 255
    22ea:	e8 81       	ld	r30, Y
    22ec:	f9 81       	ldd	r31, Y+1	; 0x01
    22ee:	c9 5e       	subi	r28, 0xE9	; 233
    22f0:	d0 40       	sbci	r29, 0x00	; 0
    22f2:	00 82       	st	Z, r0
    22f4:	c7 51       	subi	r28, 0x17	; 23
    22f6:	df 4f       	sbci	r29, 0xFF	; 255
    22f8:	28 81       	ld	r18, Y
    22fa:	39 81       	ldd	r19, Y+1	; 0x01
    22fc:	c9 5e       	subi	r28, 0xE9	; 233
    22fe:	d0 40       	sbci	r29, 0x00	; 0
    2300:	2f 5f       	subi	r18, 0xFF	; 255
    2302:	3f 4f       	sbci	r19, 0xFF	; 255
    2304:	c7 51       	subi	r28, 0x17	; 23
    2306:	df 4f       	sbci	r29, 0xFF	; 255
    2308:	39 83       	std	Y+1, r19	; 0x01
    230a:	28 83       	st	Y, r18
    230c:	c9 5e       	subi	r28, 0xE9	; 233
    230e:	d0 40       	sbci	r29, 0x00	; 0
    2310:	c3 51       	subi	r28, 0x13	; 19
    2312:	df 4f       	sbci	r29, 0xFF	; 255
    2314:	38 81       	ld	r19, Y
    2316:	cd 5e       	subi	r28, 0xED	; 237
    2318:	d0 40       	sbci	r29, 0x00	; 0
    231a:	31 50       	subi	r19, 0x01	; 1
    231c:	c3 51       	subi	r28, 0x13	; 19
    231e:	df 4f       	sbci	r29, 0xFF	; 255
    2320:	38 83       	st	Y, r19
    2322:	cd 5e       	subi	r28, 0xED	; 237
    2324:	d0 40       	sbci	r29, 0x00	; 0
    2326:	c3 51       	subi	r28, 0x13	; 19
    2328:	df 4f       	sbci	r29, 0xFF	; 255
    232a:	88 81       	ld	r24, Y
    232c:	cd 5e       	subi	r28, 0xED	; 237
    232e:	d0 40       	sbci	r29, 0x00	; 0
    2330:	88 23       	and	r24, r24
    2332:	21 f6       	brne	.-120    	; 0x22bc <main+0x244>
	char error[] 	      = "Error!";
    2334:	ce 01       	movw	r24, r28
    2336:	85 54       	subi	r24, 0x45	; 69
    2338:	9f 4f       	sbci	r25, 0xFF	; 255
    233a:	c2 51       	subi	r28, 0x12	; 18
    233c:	df 4f       	sbci	r29, 0xFF	; 255
    233e:	99 83       	std	Y+1, r25	; 0x01
    2340:	88 83       	st	Y, r24
    2342:	ce 5e       	subi	r28, 0xEE	; 238
    2344:	d0 40       	sbci	r29, 0x00	; 0
    2346:	e3 e8       	ldi	r30, 0x83	; 131
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	c0 51       	subi	r28, 0x10	; 16
    234c:	df 4f       	sbci	r29, 0xFF	; 255
    234e:	f9 83       	std	Y+1, r31	; 0x01
    2350:	e8 83       	st	Y, r30
    2352:	c0 5f       	subi	r28, 0xF0	; 240
    2354:	d0 40       	sbci	r29, 0x00	; 0
    2356:	f7 e0       	ldi	r31, 0x07	; 7
    2358:	ce 50       	subi	r28, 0x0E	; 14
    235a:	df 4f       	sbci	r29, 0xFF	; 255
    235c:	f8 83       	st	Y, r31
    235e:	c2 5f       	subi	r28, 0xF2	; 242
    2360:	d0 40       	sbci	r29, 0x00	; 0
    2362:	c0 51       	subi	r28, 0x10	; 16
    2364:	df 4f       	sbci	r29, 0xFF	; 255
    2366:	e8 81       	ld	r30, Y
    2368:	f9 81       	ldd	r31, Y+1	; 0x01
    236a:	c0 5f       	subi	r28, 0xF0	; 240
    236c:	d0 40       	sbci	r29, 0x00	; 0
    236e:	00 80       	ld	r0, Z
    2370:	c0 51       	subi	r28, 0x10	; 16
    2372:	df 4f       	sbci	r29, 0xFF	; 255
    2374:	28 81       	ld	r18, Y
    2376:	39 81       	ldd	r19, Y+1	; 0x01
    2378:	c0 5f       	subi	r28, 0xF0	; 240
    237a:	d0 40       	sbci	r29, 0x00	; 0
    237c:	2f 5f       	subi	r18, 0xFF	; 255
    237e:	3f 4f       	sbci	r19, 0xFF	; 255
    2380:	c0 51       	subi	r28, 0x10	; 16
    2382:	df 4f       	sbci	r29, 0xFF	; 255
    2384:	39 83       	std	Y+1, r19	; 0x01
    2386:	28 83       	st	Y, r18
    2388:	c0 5f       	subi	r28, 0xF0	; 240
    238a:	d0 40       	sbci	r29, 0x00	; 0
    238c:	c2 51       	subi	r28, 0x12	; 18
    238e:	df 4f       	sbci	r29, 0xFF	; 255
    2390:	e8 81       	ld	r30, Y
    2392:	f9 81       	ldd	r31, Y+1	; 0x01
    2394:	ce 5e       	subi	r28, 0xEE	; 238
    2396:	d0 40       	sbci	r29, 0x00	; 0
    2398:	00 82       	st	Z, r0
    239a:	c2 51       	subi	r28, 0x12	; 18
    239c:	df 4f       	sbci	r29, 0xFF	; 255
    239e:	28 81       	ld	r18, Y
    23a0:	39 81       	ldd	r19, Y+1	; 0x01
    23a2:	ce 5e       	subi	r28, 0xEE	; 238
    23a4:	d0 40       	sbci	r29, 0x00	; 0
    23a6:	2f 5f       	subi	r18, 0xFF	; 255
    23a8:	3f 4f       	sbci	r19, 0xFF	; 255
    23aa:	c2 51       	subi	r28, 0x12	; 18
    23ac:	df 4f       	sbci	r29, 0xFF	; 255
    23ae:	39 83       	std	Y+1, r19	; 0x01
    23b0:	28 83       	st	Y, r18
    23b2:	ce 5e       	subi	r28, 0xEE	; 238
    23b4:	d0 40       	sbci	r29, 0x00	; 0
    23b6:	ce 50       	subi	r28, 0x0E	; 14
    23b8:	df 4f       	sbci	r29, 0xFF	; 255
    23ba:	38 81       	ld	r19, Y
    23bc:	c2 5f       	subi	r28, 0xF2	; 242
    23be:	d0 40       	sbci	r29, 0x00	; 0
    23c0:	31 50       	subi	r19, 0x01	; 1
    23c2:	ce 50       	subi	r28, 0x0E	; 14
    23c4:	df 4f       	sbci	r29, 0xFF	; 255
    23c6:	38 83       	st	Y, r19
    23c8:	c2 5f       	subi	r28, 0xF2	; 242
    23ca:	d0 40       	sbci	r29, 0x00	; 0
    23cc:	ce 50       	subi	r28, 0x0E	; 14
    23ce:	df 4f       	sbci	r29, 0xFF	; 255
    23d0:	88 81       	ld	r24, Y
    23d2:	c2 5f       	subi	r28, 0xF2	; 242
    23d4:	d0 40       	sbci	r29, 0x00	; 0
    23d6:	88 23       	and	r24, r24
    23d8:	21 f6       	brne	.-120    	; 0x2362 <main+0x2ea>
	char welcome[] 	      = "welcome!";
    23da:	ce 01       	movw	r24, r28
    23dc:	8e 53       	subi	r24, 0x3E	; 62
    23de:	9f 4f       	sbci	r25, 0xFF	; 255
    23e0:	cd 50       	subi	r28, 0x0D	; 13
    23e2:	df 4f       	sbci	r29, 0xFF	; 255
    23e4:	99 83       	std	Y+1, r25	; 0x01
    23e6:	88 83       	st	Y, r24
    23e8:	c3 5f       	subi	r28, 0xF3	; 243
    23ea:	d0 40       	sbci	r29, 0x00	; 0
    23ec:	ea e8       	ldi	r30, 0x8A	; 138
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	cb 50       	subi	r28, 0x0B	; 11
    23f2:	df 4f       	sbci	r29, 0xFF	; 255
    23f4:	f9 83       	std	Y+1, r31	; 0x01
    23f6:	e8 83       	st	Y, r30
    23f8:	c5 5f       	subi	r28, 0xF5	; 245
    23fa:	d0 40       	sbci	r29, 0x00	; 0
    23fc:	f9 e0       	ldi	r31, 0x09	; 9
    23fe:	c9 50       	subi	r28, 0x09	; 9
    2400:	df 4f       	sbci	r29, 0xFF	; 255
    2402:	f8 83       	st	Y, r31
    2404:	c7 5f       	subi	r28, 0xF7	; 247
    2406:	d0 40       	sbci	r29, 0x00	; 0
    2408:	cb 50       	subi	r28, 0x0B	; 11
    240a:	df 4f       	sbci	r29, 0xFF	; 255
    240c:	e8 81       	ld	r30, Y
    240e:	f9 81       	ldd	r31, Y+1	; 0x01
    2410:	c5 5f       	subi	r28, 0xF5	; 245
    2412:	d0 40       	sbci	r29, 0x00	; 0
    2414:	00 80       	ld	r0, Z
    2416:	cb 50       	subi	r28, 0x0B	; 11
    2418:	df 4f       	sbci	r29, 0xFF	; 255
    241a:	28 81       	ld	r18, Y
    241c:	39 81       	ldd	r19, Y+1	; 0x01
    241e:	c5 5f       	subi	r28, 0xF5	; 245
    2420:	d0 40       	sbci	r29, 0x00	; 0
    2422:	2f 5f       	subi	r18, 0xFF	; 255
    2424:	3f 4f       	sbci	r19, 0xFF	; 255
    2426:	cb 50       	subi	r28, 0x0B	; 11
    2428:	df 4f       	sbci	r29, 0xFF	; 255
    242a:	39 83       	std	Y+1, r19	; 0x01
    242c:	28 83       	st	Y, r18
    242e:	c5 5f       	subi	r28, 0xF5	; 245
    2430:	d0 40       	sbci	r29, 0x00	; 0
    2432:	cd 50       	subi	r28, 0x0D	; 13
    2434:	df 4f       	sbci	r29, 0xFF	; 255
    2436:	e8 81       	ld	r30, Y
    2438:	f9 81       	ldd	r31, Y+1	; 0x01
    243a:	c3 5f       	subi	r28, 0xF3	; 243
    243c:	d0 40       	sbci	r29, 0x00	; 0
    243e:	00 82       	st	Z, r0
    2440:	cd 50       	subi	r28, 0x0D	; 13
    2442:	df 4f       	sbci	r29, 0xFF	; 255
    2444:	28 81       	ld	r18, Y
    2446:	39 81       	ldd	r19, Y+1	; 0x01
    2448:	c3 5f       	subi	r28, 0xF3	; 243
    244a:	d0 40       	sbci	r29, 0x00	; 0
    244c:	2f 5f       	subi	r18, 0xFF	; 255
    244e:	3f 4f       	sbci	r19, 0xFF	; 255
    2450:	cd 50       	subi	r28, 0x0D	; 13
    2452:	df 4f       	sbci	r29, 0xFF	; 255
    2454:	39 83       	std	Y+1, r19	; 0x01
    2456:	28 83       	st	Y, r18
    2458:	c3 5f       	subi	r28, 0xF3	; 243
    245a:	d0 40       	sbci	r29, 0x00	; 0
    245c:	c9 50       	subi	r28, 0x09	; 9
    245e:	df 4f       	sbci	r29, 0xFF	; 255
    2460:	38 81       	ld	r19, Y
    2462:	c7 5f       	subi	r28, 0xF7	; 247
    2464:	d0 40       	sbci	r29, 0x00	; 0
    2466:	31 50       	subi	r19, 0x01	; 1
    2468:	c9 50       	subi	r28, 0x09	; 9
    246a:	df 4f       	sbci	r29, 0xFF	; 255
    246c:	38 83       	st	Y, r19
    246e:	c7 5f       	subi	r28, 0xF7	; 247
    2470:	d0 40       	sbci	r29, 0x00	; 0
    2472:	c9 50       	subi	r28, 0x09	; 9
    2474:	df 4f       	sbci	r29, 0xFF	; 255
    2476:	88 81       	ld	r24, Y
    2478:	c7 5f       	subi	r28, 0xF7	; 247
    247a:	d0 40       	sbci	r29, 0x00	; 0
    247c:	88 23       	and	r24, r24
    247e:	21 f6       	brne	.-120    	; 0x2408 <main+0x390>
	char no_more_trials[] = "System Reset";
    2480:	ce 01       	movw	r24, r28
    2482:	85 53       	subi	r24, 0x35	; 53
    2484:	9f 4f       	sbci	r25, 0xFF	; 255
    2486:	c8 50       	subi	r28, 0x08	; 8
    2488:	df 4f       	sbci	r29, 0xFF	; 255
    248a:	99 83       	std	Y+1, r25	; 0x01
    248c:	88 83       	st	Y, r24
    248e:	c8 5f       	subi	r28, 0xF8	; 248
    2490:	d0 40       	sbci	r29, 0x00	; 0
    2492:	e3 e9       	ldi	r30, 0x93	; 147
    2494:	f0 e0       	ldi	r31, 0x00	; 0
    2496:	c6 50       	subi	r28, 0x06	; 6
    2498:	df 4f       	sbci	r29, 0xFF	; 255
    249a:	f9 83       	std	Y+1, r31	; 0x01
    249c:	e8 83       	st	Y, r30
    249e:	ca 5f       	subi	r28, 0xFA	; 250
    24a0:	d0 40       	sbci	r29, 0x00	; 0
    24a2:	fd e0       	ldi	r31, 0x0D	; 13
    24a4:	c4 50       	subi	r28, 0x04	; 4
    24a6:	df 4f       	sbci	r29, 0xFF	; 255
    24a8:	f8 83       	st	Y, r31
    24aa:	cc 5f       	subi	r28, 0xFC	; 252
    24ac:	d0 40       	sbci	r29, 0x00	; 0
    24ae:	c6 50       	subi	r28, 0x06	; 6
    24b0:	df 4f       	sbci	r29, 0xFF	; 255
    24b2:	e8 81       	ld	r30, Y
    24b4:	f9 81       	ldd	r31, Y+1	; 0x01
    24b6:	ca 5f       	subi	r28, 0xFA	; 250
    24b8:	d0 40       	sbci	r29, 0x00	; 0
    24ba:	00 80       	ld	r0, Z
    24bc:	c6 50       	subi	r28, 0x06	; 6
    24be:	df 4f       	sbci	r29, 0xFF	; 255
    24c0:	28 81       	ld	r18, Y
    24c2:	39 81       	ldd	r19, Y+1	; 0x01
    24c4:	ca 5f       	subi	r28, 0xFA	; 250
    24c6:	d0 40       	sbci	r29, 0x00	; 0
    24c8:	2f 5f       	subi	r18, 0xFF	; 255
    24ca:	3f 4f       	sbci	r19, 0xFF	; 255
    24cc:	c6 50       	subi	r28, 0x06	; 6
    24ce:	df 4f       	sbci	r29, 0xFF	; 255
    24d0:	39 83       	std	Y+1, r19	; 0x01
    24d2:	28 83       	st	Y, r18
    24d4:	ca 5f       	subi	r28, 0xFA	; 250
    24d6:	d0 40       	sbci	r29, 0x00	; 0
    24d8:	c8 50       	subi	r28, 0x08	; 8
    24da:	df 4f       	sbci	r29, 0xFF	; 255
    24dc:	e8 81       	ld	r30, Y
    24de:	f9 81       	ldd	r31, Y+1	; 0x01
    24e0:	c8 5f       	subi	r28, 0xF8	; 248
    24e2:	d0 40       	sbci	r29, 0x00	; 0
    24e4:	00 82       	st	Z, r0
    24e6:	c8 50       	subi	r28, 0x08	; 8
    24e8:	df 4f       	sbci	r29, 0xFF	; 255
    24ea:	28 81       	ld	r18, Y
    24ec:	39 81       	ldd	r19, Y+1	; 0x01
    24ee:	c8 5f       	subi	r28, 0xF8	; 248
    24f0:	d0 40       	sbci	r29, 0x00	; 0
    24f2:	2f 5f       	subi	r18, 0xFF	; 255
    24f4:	3f 4f       	sbci	r19, 0xFF	; 255
    24f6:	c8 50       	subi	r28, 0x08	; 8
    24f8:	df 4f       	sbci	r29, 0xFF	; 255
    24fa:	39 83       	std	Y+1, r19	; 0x01
    24fc:	28 83       	st	Y, r18
    24fe:	c8 5f       	subi	r28, 0xF8	; 248
    2500:	d0 40       	sbci	r29, 0x00	; 0
    2502:	c4 50       	subi	r28, 0x04	; 4
    2504:	df 4f       	sbci	r29, 0xFF	; 255
    2506:	38 81       	ld	r19, Y
    2508:	cc 5f       	subi	r28, 0xFC	; 252
    250a:	d0 40       	sbci	r29, 0x00	; 0
    250c:	31 50       	subi	r19, 0x01	; 1
    250e:	c4 50       	subi	r28, 0x04	; 4
    2510:	df 4f       	sbci	r29, 0xFF	; 255
    2512:	38 83       	st	Y, r19
    2514:	cc 5f       	subi	r28, 0xFC	; 252
    2516:	d0 40       	sbci	r29, 0x00	; 0
    2518:	c4 50       	subi	r28, 0x04	; 4
    251a:	df 4f       	sbci	r29, 0xFF	; 255
    251c:	88 81       	ld	r24, Y
    251e:	cc 5f       	subi	r28, 0xFC	; 252
    2520:	d0 40       	sbci	r29, 0x00	; 0
    2522:	88 23       	and	r24, r24
    2524:	21 f6       	brne	.-120    	; 0x24ae <main+0x436>
	int error_counter = 0, digit_counter = 0;
    2526:	fe 01       	movw	r30, r28
    2528:	eb 56       	subi	r30, 0x6B	; 107
    252a:	ff 4f       	sbci	r31, 0xFF	; 255
    252c:	11 82       	std	Z+1, r1	; 0x01
    252e:	10 82       	st	Z, r1
    2530:	fe 01       	movw	r30, r28
    2532:	ed 56       	subi	r30, 0x6D	; 109
    2534:	ff 4f       	sbci	r31, 0xFF	; 255
    2536:	11 82       	std	Z+1, r1	; 0x01
    2538:	10 82       	st	Z, r1
	u8 key=0;
    253a:	fe 01       	movw	r30, r28
    253c:	ee 56       	subi	r30, 0x6E	; 110
    253e:	ff 4f       	sbci	r31, 0xFF	; 255
    2540:	10 82       	st	Z, r1
	u8 pressedkey = 0;
    2542:	fe 01       	movw	r30, r28
    2544:	ef 56       	subi	r30, 0x6F	; 111
    2546:	ff 4f       	sbci	r31, 0xFF	; 255
    2548:	10 82       	st	Z, r1
	u8 Flag_correct = 0;
    254a:	fe 01       	movw	r30, r28
    254c:	e0 57       	subi	r30, 0x70	; 112
    254e:	ff 4f       	sbci	r31, 0xFF	; 255
    2550:	10 82       	st	Z, r1
	u8 operation;
	u8 temp;
	u8 ldr;


	LCD_VidInt();
    2552:	0e 94 a9 0a 	call	0x1552	; 0x1552 <LCD_VidInt>
	KPD_VidInit();
    2556:	0e 94 ae 09 	call	0x135c	; 0x135c <KPD_VidInit>
	while (1){

		LCD_Clear();
    255a:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <LCD_Clear>
    255e:	1f c4       	rjmp	.+2110   	; 0x2d9e <main+0xd26>
		while (error_counter < 3 && Flag_correct == 0){
			LCD_VidSetPosition(0, 0);
    2560:	80 e0       	ldi	r24, 0x00	; 0
    2562:	60 e0       	ldi	r22, 0x00	; 0
    2564:	0e 94 a3 0c 	call	0x1946	; 0x1946 <LCD_VidSetPosition>
			LCD_VidWriteString(&msg);
    2568:	ce 01       	movw	r24, r28
    256a:	88 56       	subi	r24, 0x68	; 104
    256c:	9f 4f       	sbci	r25, 0xFF	; 255
    256e:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <LCD_VidWriteString>
			LCD_VidSetPosition(1, 0);
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	60 e0       	ldi	r22, 0x00	; 0
    2576:	0e 94 a3 0c 	call	0x1946	; 0x1946 <LCD_VidSetPosition>
			//_delay_ms(10000);
			digit_counter=0;
    257a:	fe 01       	movw	r30, r28
    257c:	ed 56       	subi	r30, 0x6D	; 109
    257e:	ff 4f       	sbci	r31, 0xFF	; 255
    2580:	11 82       	std	Z+1, r1	; 0x01
    2582:	10 82       	st	Z, r1
			pressedkey=0;
    2584:	fe 01       	movw	r30, r28
    2586:	ef 56       	subi	r30, 0x6F	; 111
    2588:	ff 4f       	sbci	r31, 0xFF	; 255
    258a:	10 82       	st	Z, r1
    258c:	04 c1       	rjmp	.+520    	; 0x2796 <main+0x71e>
			while(digit_counter<4){
				key = KPD_U8GetPressedKey();
    258e:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <KPD_U8GetPressedKey>
    2592:	fe 01       	movw	r30, r28
    2594:	ee 56       	subi	r30, 0x6E	; 110
    2596:	ff 4f       	sbci	r31, 0xFF	; 255
    2598:	80 83       	st	Z, r24
				if (key != 0){
    259a:	fe 01       	movw	r30, r28
    259c:	ee 56       	subi	r30, 0x6E	; 110
    259e:	ff 4f       	sbci	r31, 0xFF	; 255
    25a0:	80 81       	ld	r24, Z
    25a2:	88 23       	and	r24, r24
    25a4:	09 f4       	brne	.+2      	; 0x25a8 <main+0x530>
    25a6:	f7 c0       	rjmp	.+494    	; 0x2796 <main+0x71e>
					if (key >= 48 && key <= 57){
    25a8:	fe 01       	movw	r30, r28
    25aa:	ee 56       	subi	r30, 0x6E	; 110
    25ac:	ff 4f       	sbci	r31, 0xFF	; 255
    25ae:	80 81       	ld	r24, Z
    25b0:	80 33       	cpi	r24, 0x30	; 48
    25b2:	08 f4       	brcc	.+2      	; 0x25b6 <main+0x53e>
    25b4:	f0 c0       	rjmp	.+480    	; 0x2796 <main+0x71e>
    25b6:	fe 01       	movw	r30, r28
    25b8:	ee 56       	subi	r30, 0x6E	; 110
    25ba:	ff 4f       	sbci	r31, 0xFF	; 255
    25bc:	80 81       	ld	r24, Z
    25be:	8a 33       	cpi	r24, 0x3A	; 58
    25c0:	08 f0       	brcs	.+2      	; 0x25c4 <main+0x54c>
    25c2:	e9 c0       	rjmp	.+466    	; 0x2796 <main+0x71e>
						key= key-48; //instead of switch case
    25c4:	de 01       	movw	r26, r28
    25c6:	ae 56       	subi	r26, 0x6E	; 110
    25c8:	bf 4f       	sbci	r27, 0xFF	; 255
    25ca:	fe 01       	movw	r30, r28
    25cc:	ee 56       	subi	r30, 0x6E	; 110
    25ce:	ff 4f       	sbci	r31, 0xFF	; 255
    25d0:	80 81       	ld	r24, Z
    25d2:	80 53       	subi	r24, 0x30	; 48
    25d4:	8c 93       	st	X, r24
						LCD_VidWriteData(key+48);
    25d6:	fe 01       	movw	r30, r28
    25d8:	ee 56       	subi	r30, 0x6E	; 110
    25da:	ff 4f       	sbci	r31, 0xFF	; 255
    25dc:	80 81       	ld	r24, Z
    25de:	80 5d       	subi	r24, 0xD0	; 208
    25e0:	0e 94 c3 0c 	call	0x1986	; 0x1986 <LCD_VidWriteData>
						pressedkey = pressedkey * 10 + key;
    25e4:	fe 01       	movw	r30, r28
    25e6:	ef 56       	subi	r30, 0x6F	; 111
    25e8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ea:	80 81       	ld	r24, Z
    25ec:	88 2f       	mov	r24, r24
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	9c 01       	movw	r18, r24
    25f2:	22 0f       	add	r18, r18
    25f4:	33 1f       	adc	r19, r19
    25f6:	c9 01       	movw	r24, r18
    25f8:	88 0f       	add	r24, r24
    25fa:	99 1f       	adc	r25, r25
    25fc:	88 0f       	add	r24, r24
    25fe:	99 1f       	adc	r25, r25
    2600:	82 0f       	add	r24, r18
    2602:	93 1f       	adc	r25, r19
    2604:	98 2f       	mov	r25, r24
    2606:	de 01       	movw	r26, r28
    2608:	af 56       	subi	r26, 0x6F	; 111
    260a:	bf 4f       	sbci	r27, 0xFF	; 255
    260c:	fe 01       	movw	r30, r28
    260e:	ee 56       	subi	r30, 0x6E	; 110
    2610:	ff 4f       	sbci	r31, 0xFF	; 255
    2612:	80 81       	ld	r24, Z
    2614:	89 0f       	add	r24, r25
    2616:	8c 93       	st	X, r24
    2618:	fe 01       	movw	r30, r28
    261a:	e7 57       	subi	r30, 0x77	; 119
    261c:	ff 4f       	sbci	r31, 0xFF	; 255
    261e:	80 e0       	ldi	r24, 0x00	; 0
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	aa ef       	ldi	r26, 0xFA	; 250
    2624:	b4 e4       	ldi	r27, 0x44	; 68
    2626:	80 83       	st	Z, r24
    2628:	91 83       	std	Z+1, r25	; 0x01
    262a:	a2 83       	std	Z+2, r26	; 0x02
    262c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    262e:	8e 01       	movw	r16, r28
    2630:	0b 57       	subi	r16, 0x7B	; 123
    2632:	1f 4f       	sbci	r17, 0xFF	; 255
    2634:	fe 01       	movw	r30, r28
    2636:	e7 57       	subi	r30, 0x77	; 119
    2638:	ff 4f       	sbci	r31, 0xFF	; 255
    263a:	60 81       	ld	r22, Z
    263c:	71 81       	ldd	r23, Z+1	; 0x01
    263e:	82 81       	ldd	r24, Z+2	; 0x02
    2640:	93 81       	ldd	r25, Z+3	; 0x03
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	4a ef       	ldi	r20, 0xFA	; 250
    2648:	54 e4       	ldi	r21, 0x44	; 68
    264a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	f8 01       	movw	r30, r16
    2654:	80 83       	st	Z, r24
    2656:	91 83       	std	Z+1, r25	; 0x01
    2658:	a2 83       	std	Z+2, r26	; 0x02
    265a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    265c:	fe 01       	movw	r30, r28
    265e:	eb 57       	subi	r30, 0x7B	; 123
    2660:	ff 4f       	sbci	r31, 0xFF	; 255
    2662:	60 81       	ld	r22, Z
    2664:	71 81       	ldd	r23, Z+1	; 0x01
    2666:	82 81       	ldd	r24, Z+2	; 0x02
    2668:	93 81       	ldd	r25, Z+3	; 0x03
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	40 e8       	ldi	r20, 0x80	; 128
    2670:	5f e3       	ldi	r21, 0x3F	; 63
    2672:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2676:	88 23       	and	r24, r24
    2678:	44 f4       	brge	.+16     	; 0x268a <main+0x612>
		__ticks = 1;
    267a:	fe 01       	movw	r30, r28
    267c:	ed 57       	subi	r30, 0x7D	; 125
    267e:	ff 4f       	sbci	r31, 0xFF	; 255
    2680:	81 e0       	ldi	r24, 0x01	; 1
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	91 83       	std	Z+1, r25	; 0x01
    2686:	80 83       	st	Z, r24
    2688:	64 c0       	rjmp	.+200    	; 0x2752 <main+0x6da>
	else if (__tmp > 65535)
    268a:	fe 01       	movw	r30, r28
    268c:	eb 57       	subi	r30, 0x7B	; 123
    268e:	ff 4f       	sbci	r31, 0xFF	; 255
    2690:	60 81       	ld	r22, Z
    2692:	71 81       	ldd	r23, Z+1	; 0x01
    2694:	82 81       	ldd	r24, Z+2	; 0x02
    2696:	93 81       	ldd	r25, Z+3	; 0x03
    2698:	20 e0       	ldi	r18, 0x00	; 0
    269a:	3f ef       	ldi	r19, 0xFF	; 255
    269c:	4f e7       	ldi	r20, 0x7F	; 127
    269e:	57 e4       	ldi	r21, 0x47	; 71
    26a0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    26a4:	18 16       	cp	r1, r24
    26a6:	0c f0       	brlt	.+2      	; 0x26aa <main+0x632>
    26a8:	43 c0       	rjmp	.+134    	; 0x2730 <main+0x6b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26aa:	fe 01       	movw	r30, r28
    26ac:	e7 57       	subi	r30, 0x77	; 119
    26ae:	ff 4f       	sbci	r31, 0xFF	; 255
    26b0:	60 81       	ld	r22, Z
    26b2:	71 81       	ldd	r23, Z+1	; 0x01
    26b4:	82 81       	ldd	r24, Z+2	; 0x02
    26b6:	93 81       	ldd	r25, Z+3	; 0x03
    26b8:	20 e0       	ldi	r18, 0x00	; 0
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	40 e2       	ldi	r20, 0x20	; 32
    26be:	51 e4       	ldi	r21, 0x41	; 65
    26c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26c4:	dc 01       	movw	r26, r24
    26c6:	cb 01       	movw	r24, r22
    26c8:	8e 01       	movw	r16, r28
    26ca:	0d 57       	subi	r16, 0x7D	; 125
    26cc:	1f 4f       	sbci	r17, 0xFF	; 255
    26ce:	bc 01       	movw	r22, r24
    26d0:	cd 01       	movw	r24, r26
    26d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26d6:	dc 01       	movw	r26, r24
    26d8:	cb 01       	movw	r24, r22
    26da:	f8 01       	movw	r30, r16
    26dc:	91 83       	std	Z+1, r25	; 0x01
    26de:	80 83       	st	Z, r24
    26e0:	1f c0       	rjmp	.+62     	; 0x2720 <main+0x6a8>
    26e2:	fe 01       	movw	r30, r28
    26e4:	ef 57       	subi	r30, 0x7F	; 127
    26e6:	ff 4f       	sbci	r31, 0xFF	; 255
    26e8:	88 ec       	ldi	r24, 0xC8	; 200
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	91 83       	std	Z+1, r25	; 0x01
    26ee:	80 83       	st	Z, r24
    26f0:	fe 01       	movw	r30, r28
    26f2:	ef 57       	subi	r30, 0x7F	; 127
    26f4:	ff 4f       	sbci	r31, 0xFF	; 255
    26f6:	80 81       	ld	r24, Z
    26f8:	91 81       	ldd	r25, Z+1	; 0x01
    26fa:	01 97       	sbiw	r24, 0x01	; 1
    26fc:	f1 f7       	brne	.-4      	; 0x26fa <main+0x682>
    26fe:	fe 01       	movw	r30, r28
    2700:	ef 57       	subi	r30, 0x7F	; 127
    2702:	ff 4f       	sbci	r31, 0xFF	; 255
    2704:	91 83       	std	Z+1, r25	; 0x01
    2706:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2708:	de 01       	movw	r26, r28
    270a:	ad 57       	subi	r26, 0x7D	; 125
    270c:	bf 4f       	sbci	r27, 0xFF	; 255
    270e:	fe 01       	movw	r30, r28
    2710:	ed 57       	subi	r30, 0x7D	; 125
    2712:	ff 4f       	sbci	r31, 0xFF	; 255
    2714:	80 81       	ld	r24, Z
    2716:	91 81       	ldd	r25, Z+1	; 0x01
    2718:	01 97       	sbiw	r24, 0x01	; 1
    271a:	11 96       	adiw	r26, 0x01	; 1
    271c:	9c 93       	st	X, r25
    271e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2720:	fe 01       	movw	r30, r28
    2722:	ed 57       	subi	r30, 0x7D	; 125
    2724:	ff 4f       	sbci	r31, 0xFF	; 255
    2726:	80 81       	ld	r24, Z
    2728:	91 81       	ldd	r25, Z+1	; 0x01
    272a:	00 97       	sbiw	r24, 0x00	; 0
    272c:	d1 f6       	brne	.-76     	; 0x26e2 <main+0x66a>
    272e:	27 c0       	rjmp	.+78     	; 0x277e <main+0x706>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2730:	8e 01       	movw	r16, r28
    2732:	0d 57       	subi	r16, 0x7D	; 125
    2734:	1f 4f       	sbci	r17, 0xFF	; 255
    2736:	fe 01       	movw	r30, r28
    2738:	eb 57       	subi	r30, 0x7B	; 123
    273a:	ff 4f       	sbci	r31, 0xFF	; 255
    273c:	60 81       	ld	r22, Z
    273e:	71 81       	ldd	r23, Z+1	; 0x01
    2740:	82 81       	ldd	r24, Z+2	; 0x02
    2742:	93 81       	ldd	r25, Z+3	; 0x03
    2744:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2748:	dc 01       	movw	r26, r24
    274a:	cb 01       	movw	r24, r22
    274c:	f8 01       	movw	r30, r16
    274e:	91 83       	std	Z+1, r25	; 0x01
    2750:	80 83       	st	Z, r24
    2752:	de 01       	movw	r26, r28
    2754:	a1 58       	subi	r26, 0x81	; 129
    2756:	bf 4f       	sbci	r27, 0xFF	; 255
    2758:	fe 01       	movw	r30, r28
    275a:	ed 57       	subi	r30, 0x7D	; 125
    275c:	ff 4f       	sbci	r31, 0xFF	; 255
    275e:	80 81       	ld	r24, Z
    2760:	91 81       	ldd	r25, Z+1	; 0x01
    2762:	8d 93       	st	X+, r24
    2764:	9c 93       	st	X, r25
    2766:	fe 01       	movw	r30, r28
    2768:	e1 58       	subi	r30, 0x81	; 129
    276a:	ff 4f       	sbci	r31, 0xFF	; 255
    276c:	80 81       	ld	r24, Z
    276e:	91 81       	ldd	r25, Z+1	; 0x01
    2770:	01 97       	sbiw	r24, 0x01	; 1
    2772:	f1 f7       	brne	.-4      	; 0x2770 <main+0x6f8>
    2774:	fe 01       	movw	r30, r28
    2776:	e1 58       	subi	r30, 0x81	; 129
    2778:	ff 4f       	sbci	r31, 0xFF	; 255
    277a:	91 83       	std	Z+1, r25	; 0x01
    277c:	80 83       	st	Z, r24
						_delay_ms(2000);
						digit_counter++;
    277e:	de 01       	movw	r26, r28
    2780:	ad 56       	subi	r26, 0x6D	; 109
    2782:	bf 4f       	sbci	r27, 0xFF	; 255
    2784:	fe 01       	movw	r30, r28
    2786:	ed 56       	subi	r30, 0x6D	; 109
    2788:	ff 4f       	sbci	r31, 0xFF	; 255
    278a:	80 81       	ld	r24, Z
    278c:	91 81       	ldd	r25, Z+1	; 0x01
    278e:	01 96       	adiw	r24, 0x01	; 1
    2790:	11 96       	adiw	r26, 0x01	; 1
    2792:	9c 93       	st	X, r25
    2794:	8e 93       	st	-X, r24
			LCD_VidWriteString(&msg);
			LCD_VidSetPosition(1, 0);
			//_delay_ms(10000);
			digit_counter=0;
			pressedkey=0;
			while(digit_counter<4){
    2796:	fe 01       	movw	r30, r28
    2798:	ed 56       	subi	r30, 0x6D	; 109
    279a:	ff 4f       	sbci	r31, 0xFF	; 255
    279c:	80 81       	ld	r24, Z
    279e:	91 81       	ldd	r25, Z+1	; 0x01
    27a0:	84 30       	cpi	r24, 0x04	; 4
    27a2:	91 05       	cpc	r25, r1
    27a4:	0c f4       	brge	.+2      	; 0x27a8 <main+0x730>
    27a6:	f3 ce       	rjmp	.-538    	; 0x258e <main+0x516>
				else{

				}

			}
			if (Passward == pressedkey){
    27a8:	fe 01       	movw	r30, r28
    27aa:	e9 56       	subi	r30, 0x69	; 105
    27ac:	ff 4f       	sbci	r31, 0xFF	; 255
    27ae:	de 01       	movw	r26, r28
    27b0:	af 56       	subi	r26, 0x6F	; 111
    27b2:	bf 4f       	sbci	r27, 0xFF	; 255
    27b4:	90 81       	ld	r25, Z
    27b6:	8c 91       	ld	r24, X
    27b8:	98 17       	cp	r25, r24
    27ba:	09 f0       	breq	.+2      	; 0x27be <main+0x746>
    27bc:	73 c1       	rjmp	.+742    	; 0x2aa4 <main+0xa2c>
    27be:	fe 01       	movw	r30, r28
    27c0:	e5 58       	subi	r30, 0x85	; 133
    27c2:	ff 4f       	sbci	r31, 0xFF	; 255
    27c4:	80 e0       	ldi	r24, 0x00	; 0
    27c6:	90 e4       	ldi	r25, 0x40	; 64
    27c8:	ac e9       	ldi	r26, 0x9C	; 156
    27ca:	b5 e4       	ldi	r27, 0x45	; 69
    27cc:	80 83       	st	Z, r24
    27ce:	91 83       	std	Z+1, r25	; 0x01
    27d0:	a2 83       	std	Z+2, r26	; 0x02
    27d2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27d4:	8e 01       	movw	r16, r28
    27d6:	09 58       	subi	r16, 0x89	; 137
    27d8:	1f 4f       	sbci	r17, 0xFF	; 255
    27da:	fe 01       	movw	r30, r28
    27dc:	e5 58       	subi	r30, 0x85	; 133
    27de:	ff 4f       	sbci	r31, 0xFF	; 255
    27e0:	60 81       	ld	r22, Z
    27e2:	71 81       	ldd	r23, Z+1	; 0x01
    27e4:	82 81       	ldd	r24, Z+2	; 0x02
    27e6:	93 81       	ldd	r25, Z+3	; 0x03
    27e8:	20 e0       	ldi	r18, 0x00	; 0
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	4a ef       	ldi	r20, 0xFA	; 250
    27ee:	54 e4       	ldi	r21, 0x44	; 68
    27f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27f4:	dc 01       	movw	r26, r24
    27f6:	cb 01       	movw	r24, r22
    27f8:	f8 01       	movw	r30, r16
    27fa:	80 83       	st	Z, r24
    27fc:	91 83       	std	Z+1, r25	; 0x01
    27fe:	a2 83       	std	Z+2, r26	; 0x02
    2800:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2802:	fe 01       	movw	r30, r28
    2804:	e9 58       	subi	r30, 0x89	; 137
    2806:	ff 4f       	sbci	r31, 0xFF	; 255
    2808:	60 81       	ld	r22, Z
    280a:	71 81       	ldd	r23, Z+1	; 0x01
    280c:	82 81       	ldd	r24, Z+2	; 0x02
    280e:	93 81       	ldd	r25, Z+3	; 0x03
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	40 e8       	ldi	r20, 0x80	; 128
    2816:	5f e3       	ldi	r21, 0x3F	; 63
    2818:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    281c:	88 23       	and	r24, r24
    281e:	44 f4       	brge	.+16     	; 0x2830 <main+0x7b8>
		__ticks = 1;
    2820:	fe 01       	movw	r30, r28
    2822:	eb 58       	subi	r30, 0x8B	; 139
    2824:	ff 4f       	sbci	r31, 0xFF	; 255
    2826:	81 e0       	ldi	r24, 0x01	; 1
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	91 83       	std	Z+1, r25	; 0x01
    282c:	80 83       	st	Z, r24
    282e:	64 c0       	rjmp	.+200    	; 0x28f8 <main+0x880>
	else if (__tmp > 65535)
    2830:	fe 01       	movw	r30, r28
    2832:	e9 58       	subi	r30, 0x89	; 137
    2834:	ff 4f       	sbci	r31, 0xFF	; 255
    2836:	60 81       	ld	r22, Z
    2838:	71 81       	ldd	r23, Z+1	; 0x01
    283a:	82 81       	ldd	r24, Z+2	; 0x02
    283c:	93 81       	ldd	r25, Z+3	; 0x03
    283e:	20 e0       	ldi	r18, 0x00	; 0
    2840:	3f ef       	ldi	r19, 0xFF	; 255
    2842:	4f e7       	ldi	r20, 0x7F	; 127
    2844:	57 e4       	ldi	r21, 0x47	; 71
    2846:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    284a:	18 16       	cp	r1, r24
    284c:	0c f0       	brlt	.+2      	; 0x2850 <main+0x7d8>
    284e:	43 c0       	rjmp	.+134    	; 0x28d6 <main+0x85e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2850:	fe 01       	movw	r30, r28
    2852:	e5 58       	subi	r30, 0x85	; 133
    2854:	ff 4f       	sbci	r31, 0xFF	; 255
    2856:	60 81       	ld	r22, Z
    2858:	71 81       	ldd	r23, Z+1	; 0x01
    285a:	82 81       	ldd	r24, Z+2	; 0x02
    285c:	93 81       	ldd	r25, Z+3	; 0x03
    285e:	20 e0       	ldi	r18, 0x00	; 0
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	40 e2       	ldi	r20, 0x20	; 32
    2864:	51 e4       	ldi	r21, 0x41	; 65
    2866:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    286a:	dc 01       	movw	r26, r24
    286c:	cb 01       	movw	r24, r22
    286e:	8e 01       	movw	r16, r28
    2870:	0b 58       	subi	r16, 0x8B	; 139
    2872:	1f 4f       	sbci	r17, 0xFF	; 255
    2874:	bc 01       	movw	r22, r24
    2876:	cd 01       	movw	r24, r26
    2878:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    287c:	dc 01       	movw	r26, r24
    287e:	cb 01       	movw	r24, r22
    2880:	f8 01       	movw	r30, r16
    2882:	91 83       	std	Z+1, r25	; 0x01
    2884:	80 83       	st	Z, r24
    2886:	1f c0       	rjmp	.+62     	; 0x28c6 <main+0x84e>
    2888:	fe 01       	movw	r30, r28
    288a:	ed 58       	subi	r30, 0x8D	; 141
    288c:	ff 4f       	sbci	r31, 0xFF	; 255
    288e:	88 ec       	ldi	r24, 0xC8	; 200
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	91 83       	std	Z+1, r25	; 0x01
    2894:	80 83       	st	Z, r24
    2896:	fe 01       	movw	r30, r28
    2898:	ed 58       	subi	r30, 0x8D	; 141
    289a:	ff 4f       	sbci	r31, 0xFF	; 255
    289c:	80 81       	ld	r24, Z
    289e:	91 81       	ldd	r25, Z+1	; 0x01
    28a0:	01 97       	sbiw	r24, 0x01	; 1
    28a2:	f1 f7       	brne	.-4      	; 0x28a0 <main+0x828>
    28a4:	fe 01       	movw	r30, r28
    28a6:	ed 58       	subi	r30, 0x8D	; 141
    28a8:	ff 4f       	sbci	r31, 0xFF	; 255
    28aa:	91 83       	std	Z+1, r25	; 0x01
    28ac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ae:	de 01       	movw	r26, r28
    28b0:	ab 58       	subi	r26, 0x8B	; 139
    28b2:	bf 4f       	sbci	r27, 0xFF	; 255
    28b4:	fe 01       	movw	r30, r28
    28b6:	eb 58       	subi	r30, 0x8B	; 139
    28b8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ba:	80 81       	ld	r24, Z
    28bc:	91 81       	ldd	r25, Z+1	; 0x01
    28be:	01 97       	sbiw	r24, 0x01	; 1
    28c0:	11 96       	adiw	r26, 0x01	; 1
    28c2:	9c 93       	st	X, r25
    28c4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c6:	fe 01       	movw	r30, r28
    28c8:	eb 58       	subi	r30, 0x8B	; 139
    28ca:	ff 4f       	sbci	r31, 0xFF	; 255
    28cc:	80 81       	ld	r24, Z
    28ce:	91 81       	ldd	r25, Z+1	; 0x01
    28d0:	00 97       	sbiw	r24, 0x00	; 0
    28d2:	d1 f6       	brne	.-76     	; 0x2888 <main+0x810>
    28d4:	27 c0       	rjmp	.+78     	; 0x2924 <main+0x8ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28d6:	8e 01       	movw	r16, r28
    28d8:	0b 58       	subi	r16, 0x8B	; 139
    28da:	1f 4f       	sbci	r17, 0xFF	; 255
    28dc:	fe 01       	movw	r30, r28
    28de:	e9 58       	subi	r30, 0x89	; 137
    28e0:	ff 4f       	sbci	r31, 0xFF	; 255
    28e2:	60 81       	ld	r22, Z
    28e4:	71 81       	ldd	r23, Z+1	; 0x01
    28e6:	82 81       	ldd	r24, Z+2	; 0x02
    28e8:	93 81       	ldd	r25, Z+3	; 0x03
    28ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28ee:	dc 01       	movw	r26, r24
    28f0:	cb 01       	movw	r24, r22
    28f2:	f8 01       	movw	r30, r16
    28f4:	91 83       	std	Z+1, r25	; 0x01
    28f6:	80 83       	st	Z, r24
    28f8:	de 01       	movw	r26, r28
    28fa:	af 58       	subi	r26, 0x8F	; 143
    28fc:	bf 4f       	sbci	r27, 0xFF	; 255
    28fe:	fe 01       	movw	r30, r28
    2900:	eb 58       	subi	r30, 0x8B	; 139
    2902:	ff 4f       	sbci	r31, 0xFF	; 255
    2904:	80 81       	ld	r24, Z
    2906:	91 81       	ldd	r25, Z+1	; 0x01
    2908:	8d 93       	st	X+, r24
    290a:	9c 93       	st	X, r25
    290c:	fe 01       	movw	r30, r28
    290e:	ef 58       	subi	r30, 0x8F	; 143
    2910:	ff 4f       	sbci	r31, 0xFF	; 255
    2912:	80 81       	ld	r24, Z
    2914:	91 81       	ldd	r25, Z+1	; 0x01
    2916:	01 97       	sbiw	r24, 0x01	; 1
    2918:	f1 f7       	brne	.-4      	; 0x2916 <main+0x89e>
    291a:	fe 01       	movw	r30, r28
    291c:	ef 58       	subi	r30, 0x8F	; 143
    291e:	ff 4f       	sbci	r31, 0xFF	; 255
    2920:	91 83       	std	Z+1, r25	; 0x01
    2922:	80 83       	st	Z, r24
				_delay_ms(5000);
				LCD_Clear();
    2924:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <LCD_Clear>
    2928:	fe 01       	movw	r30, r28
    292a:	e3 59       	subi	r30, 0x93	; 147
    292c:	ff 4f       	sbci	r31, 0xFF	; 255
    292e:	80 e0       	ldi	r24, 0x00	; 0
    2930:	90 e4       	ldi	r25, 0x40	; 64
    2932:	ac e9       	ldi	r26, 0x9C	; 156
    2934:	b5 e4       	ldi	r27, 0x45	; 69
    2936:	80 83       	st	Z, r24
    2938:	91 83       	std	Z+1, r25	; 0x01
    293a:	a2 83       	std	Z+2, r26	; 0x02
    293c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    293e:	8e 01       	movw	r16, r28
    2940:	07 59       	subi	r16, 0x97	; 151
    2942:	1f 4f       	sbci	r17, 0xFF	; 255
    2944:	fe 01       	movw	r30, r28
    2946:	e3 59       	subi	r30, 0x93	; 147
    2948:	ff 4f       	sbci	r31, 0xFF	; 255
    294a:	60 81       	ld	r22, Z
    294c:	71 81       	ldd	r23, Z+1	; 0x01
    294e:	82 81       	ldd	r24, Z+2	; 0x02
    2950:	93 81       	ldd	r25, Z+3	; 0x03
    2952:	20 e0       	ldi	r18, 0x00	; 0
    2954:	30 e0       	ldi	r19, 0x00	; 0
    2956:	4a ef       	ldi	r20, 0xFA	; 250
    2958:	54 e4       	ldi	r21, 0x44	; 68
    295a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    295e:	dc 01       	movw	r26, r24
    2960:	cb 01       	movw	r24, r22
    2962:	f8 01       	movw	r30, r16
    2964:	80 83       	st	Z, r24
    2966:	91 83       	std	Z+1, r25	; 0x01
    2968:	a2 83       	std	Z+2, r26	; 0x02
    296a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    296c:	fe 01       	movw	r30, r28
    296e:	e7 59       	subi	r30, 0x97	; 151
    2970:	ff 4f       	sbci	r31, 0xFF	; 255
    2972:	60 81       	ld	r22, Z
    2974:	71 81       	ldd	r23, Z+1	; 0x01
    2976:	82 81       	ldd	r24, Z+2	; 0x02
    2978:	93 81       	ldd	r25, Z+3	; 0x03
    297a:	20 e0       	ldi	r18, 0x00	; 0
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	40 e8       	ldi	r20, 0x80	; 128
    2980:	5f e3       	ldi	r21, 0x3F	; 63
    2982:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2986:	88 23       	and	r24, r24
    2988:	44 f4       	brge	.+16     	; 0x299a <main+0x922>
		__ticks = 1;
    298a:	fe 01       	movw	r30, r28
    298c:	e9 59       	subi	r30, 0x99	; 153
    298e:	ff 4f       	sbci	r31, 0xFF	; 255
    2990:	81 e0       	ldi	r24, 0x01	; 1
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	91 83       	std	Z+1, r25	; 0x01
    2996:	80 83       	st	Z, r24
    2998:	64 c0       	rjmp	.+200    	; 0x2a62 <main+0x9ea>
	else if (__tmp > 65535)
    299a:	fe 01       	movw	r30, r28
    299c:	e7 59       	subi	r30, 0x97	; 151
    299e:	ff 4f       	sbci	r31, 0xFF	; 255
    29a0:	60 81       	ld	r22, Z
    29a2:	71 81       	ldd	r23, Z+1	; 0x01
    29a4:	82 81       	ldd	r24, Z+2	; 0x02
    29a6:	93 81       	ldd	r25, Z+3	; 0x03
    29a8:	20 e0       	ldi	r18, 0x00	; 0
    29aa:	3f ef       	ldi	r19, 0xFF	; 255
    29ac:	4f e7       	ldi	r20, 0x7F	; 127
    29ae:	57 e4       	ldi	r21, 0x47	; 71
    29b0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    29b4:	18 16       	cp	r1, r24
    29b6:	0c f0       	brlt	.+2      	; 0x29ba <main+0x942>
    29b8:	43 c0       	rjmp	.+134    	; 0x2a40 <main+0x9c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ba:	fe 01       	movw	r30, r28
    29bc:	e3 59       	subi	r30, 0x93	; 147
    29be:	ff 4f       	sbci	r31, 0xFF	; 255
    29c0:	60 81       	ld	r22, Z
    29c2:	71 81       	ldd	r23, Z+1	; 0x01
    29c4:	82 81       	ldd	r24, Z+2	; 0x02
    29c6:	93 81       	ldd	r25, Z+3	; 0x03
    29c8:	20 e0       	ldi	r18, 0x00	; 0
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	40 e2       	ldi	r20, 0x20	; 32
    29ce:	51 e4       	ldi	r21, 0x41	; 65
    29d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29d4:	dc 01       	movw	r26, r24
    29d6:	cb 01       	movw	r24, r22
    29d8:	8e 01       	movw	r16, r28
    29da:	09 59       	subi	r16, 0x99	; 153
    29dc:	1f 4f       	sbci	r17, 0xFF	; 255
    29de:	bc 01       	movw	r22, r24
    29e0:	cd 01       	movw	r24, r26
    29e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29e6:	dc 01       	movw	r26, r24
    29e8:	cb 01       	movw	r24, r22
    29ea:	f8 01       	movw	r30, r16
    29ec:	91 83       	std	Z+1, r25	; 0x01
    29ee:	80 83       	st	Z, r24
    29f0:	1f c0       	rjmp	.+62     	; 0x2a30 <main+0x9b8>
    29f2:	fe 01       	movw	r30, r28
    29f4:	eb 59       	subi	r30, 0x9B	; 155
    29f6:	ff 4f       	sbci	r31, 0xFF	; 255
    29f8:	88 ec       	ldi	r24, 0xC8	; 200
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	91 83       	std	Z+1, r25	; 0x01
    29fe:	80 83       	st	Z, r24
    2a00:	fe 01       	movw	r30, r28
    2a02:	eb 59       	subi	r30, 0x9B	; 155
    2a04:	ff 4f       	sbci	r31, 0xFF	; 255
    2a06:	80 81       	ld	r24, Z
    2a08:	91 81       	ldd	r25, Z+1	; 0x01
    2a0a:	01 97       	sbiw	r24, 0x01	; 1
    2a0c:	f1 f7       	brne	.-4      	; 0x2a0a <main+0x992>
    2a0e:	fe 01       	movw	r30, r28
    2a10:	eb 59       	subi	r30, 0x9B	; 155
    2a12:	ff 4f       	sbci	r31, 0xFF	; 255
    2a14:	91 83       	std	Z+1, r25	; 0x01
    2a16:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a18:	de 01       	movw	r26, r28
    2a1a:	a9 59       	subi	r26, 0x99	; 153
    2a1c:	bf 4f       	sbci	r27, 0xFF	; 255
    2a1e:	fe 01       	movw	r30, r28
    2a20:	e9 59       	subi	r30, 0x99	; 153
    2a22:	ff 4f       	sbci	r31, 0xFF	; 255
    2a24:	80 81       	ld	r24, Z
    2a26:	91 81       	ldd	r25, Z+1	; 0x01
    2a28:	01 97       	sbiw	r24, 0x01	; 1
    2a2a:	11 96       	adiw	r26, 0x01	; 1
    2a2c:	9c 93       	st	X, r25
    2a2e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a30:	fe 01       	movw	r30, r28
    2a32:	e9 59       	subi	r30, 0x99	; 153
    2a34:	ff 4f       	sbci	r31, 0xFF	; 255
    2a36:	80 81       	ld	r24, Z
    2a38:	91 81       	ldd	r25, Z+1	; 0x01
    2a3a:	00 97       	sbiw	r24, 0x00	; 0
    2a3c:	d1 f6       	brne	.-76     	; 0x29f2 <main+0x97a>
    2a3e:	27 c0       	rjmp	.+78     	; 0x2a8e <main+0xa16>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a40:	8e 01       	movw	r16, r28
    2a42:	09 59       	subi	r16, 0x99	; 153
    2a44:	1f 4f       	sbci	r17, 0xFF	; 255
    2a46:	fe 01       	movw	r30, r28
    2a48:	e7 59       	subi	r30, 0x97	; 151
    2a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4c:	60 81       	ld	r22, Z
    2a4e:	71 81       	ldd	r23, Z+1	; 0x01
    2a50:	82 81       	ldd	r24, Z+2	; 0x02
    2a52:	93 81       	ldd	r25, Z+3	; 0x03
    2a54:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a58:	dc 01       	movw	r26, r24
    2a5a:	cb 01       	movw	r24, r22
    2a5c:	f8 01       	movw	r30, r16
    2a5e:	91 83       	std	Z+1, r25	; 0x01
    2a60:	80 83       	st	Z, r24
    2a62:	de 01       	movw	r26, r28
    2a64:	ad 59       	subi	r26, 0x9D	; 157
    2a66:	bf 4f       	sbci	r27, 0xFF	; 255
    2a68:	fe 01       	movw	r30, r28
    2a6a:	e9 59       	subi	r30, 0x99	; 153
    2a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6e:	80 81       	ld	r24, Z
    2a70:	91 81       	ldd	r25, Z+1	; 0x01
    2a72:	8d 93       	st	X+, r24
    2a74:	9c 93       	st	X, r25
    2a76:	fe 01       	movw	r30, r28
    2a78:	ed 59       	subi	r30, 0x9D	; 157
    2a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7c:	80 81       	ld	r24, Z
    2a7e:	91 81       	ldd	r25, Z+1	; 0x01
    2a80:	01 97       	sbiw	r24, 0x01	; 1
    2a82:	f1 f7       	brne	.-4      	; 0x2a80 <main+0xa08>
    2a84:	fe 01       	movw	r30, r28
    2a86:	ed 59       	subi	r30, 0x9D	; 157
    2a88:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8a:	91 83       	std	Z+1, r25	; 0x01
    2a8c:	80 83       	st	Z, r24
				_delay_ms(5000);
				LCD_VidWriteString(&welcome);
    2a8e:	ce 01       	movw	r24, r28
    2a90:	8e 53       	subi	r24, 0x3E	; 62
    2a92:	9f 4f       	sbci	r25, 0xFF	; 255
    2a94:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <LCD_VidWriteString>
				Flag_correct = 1;
    2a98:	fe 01       	movw	r30, r28
    2a9a:	e0 57       	subi	r30, 0x70	; 112
    2a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9e:	81 e0       	ldi	r24, 0x01	; 1
    2aa0:	80 83       	st	Z, r24
    2aa2:	7d c1       	rjmp	.+762    	; 0x2d9e <main+0xd26>
    2aa4:	fe 01       	movw	r30, r28
    2aa6:	e1 5a       	subi	r30, 0xA1	; 161
    2aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aaa:	80 e0       	ldi	r24, 0x00	; 0
    2aac:	90 e4       	ldi	r25, 0x40	; 64
    2aae:	ac e9       	ldi	r26, 0x9C	; 156
    2ab0:	b5 e4       	ldi	r27, 0x45	; 69
    2ab2:	80 83       	st	Z, r24
    2ab4:	91 83       	std	Z+1, r25	; 0x01
    2ab6:	a2 83       	std	Z+2, r26	; 0x02
    2ab8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aba:	8e 01       	movw	r16, r28
    2abc:	05 5a       	subi	r16, 0xA5	; 165
    2abe:	1f 4f       	sbci	r17, 0xFF	; 255
    2ac0:	fe 01       	movw	r30, r28
    2ac2:	e1 5a       	subi	r30, 0xA1	; 161
    2ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac6:	60 81       	ld	r22, Z
    2ac8:	71 81       	ldd	r23, Z+1	; 0x01
    2aca:	82 81       	ldd	r24, Z+2	; 0x02
    2acc:	93 81       	ldd	r25, Z+3	; 0x03
    2ace:	20 e0       	ldi	r18, 0x00	; 0
    2ad0:	30 e0       	ldi	r19, 0x00	; 0
    2ad2:	4a ef       	ldi	r20, 0xFA	; 250
    2ad4:	54 e4       	ldi	r21, 0x44	; 68
    2ad6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ada:	dc 01       	movw	r26, r24
    2adc:	cb 01       	movw	r24, r22
    2ade:	f8 01       	movw	r30, r16
    2ae0:	80 83       	st	Z, r24
    2ae2:	91 83       	std	Z+1, r25	; 0x01
    2ae4:	a2 83       	std	Z+2, r26	; 0x02
    2ae6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ae8:	fe 01       	movw	r30, r28
    2aea:	e5 5a       	subi	r30, 0xA5	; 165
    2aec:	ff 4f       	sbci	r31, 0xFF	; 255
    2aee:	60 81       	ld	r22, Z
    2af0:	71 81       	ldd	r23, Z+1	; 0x01
    2af2:	82 81       	ldd	r24, Z+2	; 0x02
    2af4:	93 81       	ldd	r25, Z+3	; 0x03
    2af6:	20 e0       	ldi	r18, 0x00	; 0
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	40 e8       	ldi	r20, 0x80	; 128
    2afc:	5f e3       	ldi	r21, 0x3F	; 63
    2afe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2b02:	88 23       	and	r24, r24
    2b04:	44 f4       	brge	.+16     	; 0x2b16 <main+0xa9e>
		__ticks = 1;
    2b06:	fe 01       	movw	r30, r28
    2b08:	e7 5a       	subi	r30, 0xA7	; 167
    2b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0c:	81 e0       	ldi	r24, 0x01	; 1
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	91 83       	std	Z+1, r25	; 0x01
    2b12:	80 83       	st	Z, r24
    2b14:	64 c0       	rjmp	.+200    	; 0x2bde <main+0xb66>
	else if (__tmp > 65535)
    2b16:	fe 01       	movw	r30, r28
    2b18:	e5 5a       	subi	r30, 0xA5	; 165
    2b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1c:	60 81       	ld	r22, Z
    2b1e:	71 81       	ldd	r23, Z+1	; 0x01
    2b20:	82 81       	ldd	r24, Z+2	; 0x02
    2b22:	93 81       	ldd	r25, Z+3	; 0x03
    2b24:	20 e0       	ldi	r18, 0x00	; 0
    2b26:	3f ef       	ldi	r19, 0xFF	; 255
    2b28:	4f e7       	ldi	r20, 0x7F	; 127
    2b2a:	57 e4       	ldi	r21, 0x47	; 71
    2b2c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2b30:	18 16       	cp	r1, r24
    2b32:	0c f0       	brlt	.+2      	; 0x2b36 <main+0xabe>
    2b34:	43 c0       	rjmp	.+134    	; 0x2bbc <main+0xb44>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b36:	fe 01       	movw	r30, r28
    2b38:	e1 5a       	subi	r30, 0xA1	; 161
    2b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3c:	60 81       	ld	r22, Z
    2b3e:	71 81       	ldd	r23, Z+1	; 0x01
    2b40:	82 81       	ldd	r24, Z+2	; 0x02
    2b42:	93 81       	ldd	r25, Z+3	; 0x03
    2b44:	20 e0       	ldi	r18, 0x00	; 0
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	40 e2       	ldi	r20, 0x20	; 32
    2b4a:	51 e4       	ldi	r21, 0x41	; 65
    2b4c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b50:	dc 01       	movw	r26, r24
    2b52:	cb 01       	movw	r24, r22
    2b54:	8e 01       	movw	r16, r28
    2b56:	07 5a       	subi	r16, 0xA7	; 167
    2b58:	1f 4f       	sbci	r17, 0xFF	; 255
    2b5a:	bc 01       	movw	r22, r24
    2b5c:	cd 01       	movw	r24, r26
    2b5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b62:	dc 01       	movw	r26, r24
    2b64:	cb 01       	movw	r24, r22
    2b66:	f8 01       	movw	r30, r16
    2b68:	91 83       	std	Z+1, r25	; 0x01
    2b6a:	80 83       	st	Z, r24
    2b6c:	1f c0       	rjmp	.+62     	; 0x2bac <main+0xb34>
    2b6e:	fe 01       	movw	r30, r28
    2b70:	e9 5a       	subi	r30, 0xA9	; 169
    2b72:	ff 4f       	sbci	r31, 0xFF	; 255
    2b74:	88 ec       	ldi	r24, 0xC8	; 200
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	91 83       	std	Z+1, r25	; 0x01
    2b7a:	80 83       	st	Z, r24
    2b7c:	fe 01       	movw	r30, r28
    2b7e:	e9 5a       	subi	r30, 0xA9	; 169
    2b80:	ff 4f       	sbci	r31, 0xFF	; 255
    2b82:	80 81       	ld	r24, Z
    2b84:	91 81       	ldd	r25, Z+1	; 0x01
    2b86:	01 97       	sbiw	r24, 0x01	; 1
    2b88:	f1 f7       	brne	.-4      	; 0x2b86 <main+0xb0e>
    2b8a:	fe 01       	movw	r30, r28
    2b8c:	e9 5a       	subi	r30, 0xA9	; 169
    2b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b90:	91 83       	std	Z+1, r25	; 0x01
    2b92:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b94:	de 01       	movw	r26, r28
    2b96:	a7 5a       	subi	r26, 0xA7	; 167
    2b98:	bf 4f       	sbci	r27, 0xFF	; 255
    2b9a:	fe 01       	movw	r30, r28
    2b9c:	e7 5a       	subi	r30, 0xA7	; 167
    2b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba0:	80 81       	ld	r24, Z
    2ba2:	91 81       	ldd	r25, Z+1	; 0x01
    2ba4:	01 97       	sbiw	r24, 0x01	; 1
    2ba6:	11 96       	adiw	r26, 0x01	; 1
    2ba8:	9c 93       	st	X, r25
    2baa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bac:	fe 01       	movw	r30, r28
    2bae:	e7 5a       	subi	r30, 0xA7	; 167
    2bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb2:	80 81       	ld	r24, Z
    2bb4:	91 81       	ldd	r25, Z+1	; 0x01
    2bb6:	00 97       	sbiw	r24, 0x00	; 0
    2bb8:	d1 f6       	brne	.-76     	; 0x2b6e <main+0xaf6>
    2bba:	27 c0       	rjmp	.+78     	; 0x2c0a <main+0xb92>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bbc:	8e 01       	movw	r16, r28
    2bbe:	07 5a       	subi	r16, 0xA7	; 167
    2bc0:	1f 4f       	sbci	r17, 0xFF	; 255
    2bc2:	fe 01       	movw	r30, r28
    2bc4:	e5 5a       	subi	r30, 0xA5	; 165
    2bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc8:	60 81       	ld	r22, Z
    2bca:	71 81       	ldd	r23, Z+1	; 0x01
    2bcc:	82 81       	ldd	r24, Z+2	; 0x02
    2bce:	93 81       	ldd	r25, Z+3	; 0x03
    2bd0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bd4:	dc 01       	movw	r26, r24
    2bd6:	cb 01       	movw	r24, r22
    2bd8:	f8 01       	movw	r30, r16
    2bda:	91 83       	std	Z+1, r25	; 0x01
    2bdc:	80 83       	st	Z, r24
    2bde:	de 01       	movw	r26, r28
    2be0:	ab 5a       	subi	r26, 0xAB	; 171
    2be2:	bf 4f       	sbci	r27, 0xFF	; 255
    2be4:	fe 01       	movw	r30, r28
    2be6:	e7 5a       	subi	r30, 0xA7	; 167
    2be8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bea:	80 81       	ld	r24, Z
    2bec:	91 81       	ldd	r25, Z+1	; 0x01
    2bee:	8d 93       	st	X+, r24
    2bf0:	9c 93       	st	X, r25
    2bf2:	fe 01       	movw	r30, r28
    2bf4:	eb 5a       	subi	r30, 0xAB	; 171
    2bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf8:	80 81       	ld	r24, Z
    2bfa:	91 81       	ldd	r25, Z+1	; 0x01
    2bfc:	01 97       	sbiw	r24, 0x01	; 1
    2bfe:	f1 f7       	brne	.-4      	; 0x2bfc <main+0xb84>
    2c00:	fe 01       	movw	r30, r28
    2c02:	eb 5a       	subi	r30, 0xAB	; 171
    2c04:	ff 4f       	sbci	r31, 0xFF	; 255
    2c06:	91 83       	std	Z+1, r25	; 0x01
    2c08:	80 83       	st	Z, r24
			}
			else{
				_delay_ms(5000);
				LCD_Clear();
    2c0a:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <LCD_Clear>
    2c0e:	fe 01       	movw	r30, r28
    2c10:	ef 5a       	subi	r30, 0xAF	; 175
    2c12:	ff 4f       	sbci	r31, 0xFF	; 255
    2c14:	80 e0       	ldi	r24, 0x00	; 0
    2c16:	90 e4       	ldi	r25, 0x40	; 64
    2c18:	ac e9       	ldi	r26, 0x9C	; 156
    2c1a:	b5 e4       	ldi	r27, 0x45	; 69
    2c1c:	80 83       	st	Z, r24
    2c1e:	91 83       	std	Z+1, r25	; 0x01
    2c20:	a2 83       	std	Z+2, r26	; 0x02
    2c22:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c24:	8e 01       	movw	r16, r28
    2c26:	03 5b       	subi	r16, 0xB3	; 179
    2c28:	1f 4f       	sbci	r17, 0xFF	; 255
    2c2a:	fe 01       	movw	r30, r28
    2c2c:	ef 5a       	subi	r30, 0xAF	; 175
    2c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c30:	60 81       	ld	r22, Z
    2c32:	71 81       	ldd	r23, Z+1	; 0x01
    2c34:	82 81       	ldd	r24, Z+2	; 0x02
    2c36:	93 81       	ldd	r25, Z+3	; 0x03
    2c38:	20 e0       	ldi	r18, 0x00	; 0
    2c3a:	30 e0       	ldi	r19, 0x00	; 0
    2c3c:	4a ef       	ldi	r20, 0xFA	; 250
    2c3e:	54 e4       	ldi	r21, 0x44	; 68
    2c40:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c44:	dc 01       	movw	r26, r24
    2c46:	cb 01       	movw	r24, r22
    2c48:	f8 01       	movw	r30, r16
    2c4a:	80 83       	st	Z, r24
    2c4c:	91 83       	std	Z+1, r25	; 0x01
    2c4e:	a2 83       	std	Z+2, r26	; 0x02
    2c50:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c52:	fe 01       	movw	r30, r28
    2c54:	e3 5b       	subi	r30, 0xB3	; 179
    2c56:	ff 4f       	sbci	r31, 0xFF	; 255
    2c58:	60 81       	ld	r22, Z
    2c5a:	71 81       	ldd	r23, Z+1	; 0x01
    2c5c:	82 81       	ldd	r24, Z+2	; 0x02
    2c5e:	93 81       	ldd	r25, Z+3	; 0x03
    2c60:	20 e0       	ldi	r18, 0x00	; 0
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	40 e8       	ldi	r20, 0x80	; 128
    2c66:	5f e3       	ldi	r21, 0x3F	; 63
    2c68:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2c6c:	88 23       	and	r24, r24
    2c6e:	44 f4       	brge	.+16     	; 0x2c80 <main+0xc08>
		__ticks = 1;
    2c70:	fe 01       	movw	r30, r28
    2c72:	e5 5b       	subi	r30, 0xB5	; 181
    2c74:	ff 4f       	sbci	r31, 0xFF	; 255
    2c76:	81 e0       	ldi	r24, 0x01	; 1
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	91 83       	std	Z+1, r25	; 0x01
    2c7c:	80 83       	st	Z, r24
    2c7e:	64 c0       	rjmp	.+200    	; 0x2d48 <main+0xcd0>
	else if (__tmp > 65535)
    2c80:	fe 01       	movw	r30, r28
    2c82:	e3 5b       	subi	r30, 0xB3	; 179
    2c84:	ff 4f       	sbci	r31, 0xFF	; 255
    2c86:	60 81       	ld	r22, Z
    2c88:	71 81       	ldd	r23, Z+1	; 0x01
    2c8a:	82 81       	ldd	r24, Z+2	; 0x02
    2c8c:	93 81       	ldd	r25, Z+3	; 0x03
    2c8e:	20 e0       	ldi	r18, 0x00	; 0
    2c90:	3f ef       	ldi	r19, 0xFF	; 255
    2c92:	4f e7       	ldi	r20, 0x7F	; 127
    2c94:	57 e4       	ldi	r21, 0x47	; 71
    2c96:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2c9a:	18 16       	cp	r1, r24
    2c9c:	0c f0       	brlt	.+2      	; 0x2ca0 <main+0xc28>
    2c9e:	43 c0       	rjmp	.+134    	; 0x2d26 <main+0xcae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ca0:	fe 01       	movw	r30, r28
    2ca2:	ef 5a       	subi	r30, 0xAF	; 175
    2ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca6:	60 81       	ld	r22, Z
    2ca8:	71 81       	ldd	r23, Z+1	; 0x01
    2caa:	82 81       	ldd	r24, Z+2	; 0x02
    2cac:	93 81       	ldd	r25, Z+3	; 0x03
    2cae:	20 e0       	ldi	r18, 0x00	; 0
    2cb0:	30 e0       	ldi	r19, 0x00	; 0
    2cb2:	40 e2       	ldi	r20, 0x20	; 32
    2cb4:	51 e4       	ldi	r21, 0x41	; 65
    2cb6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cba:	dc 01       	movw	r26, r24
    2cbc:	cb 01       	movw	r24, r22
    2cbe:	8e 01       	movw	r16, r28
    2cc0:	05 5b       	subi	r16, 0xB5	; 181
    2cc2:	1f 4f       	sbci	r17, 0xFF	; 255
    2cc4:	bc 01       	movw	r22, r24
    2cc6:	cd 01       	movw	r24, r26
    2cc8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ccc:	dc 01       	movw	r26, r24
    2cce:	cb 01       	movw	r24, r22
    2cd0:	f8 01       	movw	r30, r16
    2cd2:	91 83       	std	Z+1, r25	; 0x01
    2cd4:	80 83       	st	Z, r24
    2cd6:	1f c0       	rjmp	.+62     	; 0x2d16 <main+0xc9e>
    2cd8:	fe 01       	movw	r30, r28
    2cda:	e7 5b       	subi	r30, 0xB7	; 183
    2cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cde:	88 ec       	ldi	r24, 0xC8	; 200
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	91 83       	std	Z+1, r25	; 0x01
    2ce4:	80 83       	st	Z, r24
    2ce6:	fe 01       	movw	r30, r28
    2ce8:	e7 5b       	subi	r30, 0xB7	; 183
    2cea:	ff 4f       	sbci	r31, 0xFF	; 255
    2cec:	80 81       	ld	r24, Z
    2cee:	91 81       	ldd	r25, Z+1	; 0x01
    2cf0:	01 97       	sbiw	r24, 0x01	; 1
    2cf2:	f1 f7       	brne	.-4      	; 0x2cf0 <main+0xc78>
    2cf4:	fe 01       	movw	r30, r28
    2cf6:	e7 5b       	subi	r30, 0xB7	; 183
    2cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfa:	91 83       	std	Z+1, r25	; 0x01
    2cfc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cfe:	de 01       	movw	r26, r28
    2d00:	a5 5b       	subi	r26, 0xB5	; 181
    2d02:	bf 4f       	sbci	r27, 0xFF	; 255
    2d04:	fe 01       	movw	r30, r28
    2d06:	e5 5b       	subi	r30, 0xB5	; 181
    2d08:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0a:	80 81       	ld	r24, Z
    2d0c:	91 81       	ldd	r25, Z+1	; 0x01
    2d0e:	01 97       	sbiw	r24, 0x01	; 1
    2d10:	11 96       	adiw	r26, 0x01	; 1
    2d12:	9c 93       	st	X, r25
    2d14:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d16:	fe 01       	movw	r30, r28
    2d18:	e5 5b       	subi	r30, 0xB5	; 181
    2d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1c:	80 81       	ld	r24, Z
    2d1e:	91 81       	ldd	r25, Z+1	; 0x01
    2d20:	00 97       	sbiw	r24, 0x00	; 0
    2d22:	d1 f6       	brne	.-76     	; 0x2cd8 <main+0xc60>
    2d24:	27 c0       	rjmp	.+78     	; 0x2d74 <main+0xcfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d26:	8e 01       	movw	r16, r28
    2d28:	05 5b       	subi	r16, 0xB5	; 181
    2d2a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d2c:	fe 01       	movw	r30, r28
    2d2e:	e3 5b       	subi	r30, 0xB3	; 179
    2d30:	ff 4f       	sbci	r31, 0xFF	; 255
    2d32:	60 81       	ld	r22, Z
    2d34:	71 81       	ldd	r23, Z+1	; 0x01
    2d36:	82 81       	ldd	r24, Z+2	; 0x02
    2d38:	93 81       	ldd	r25, Z+3	; 0x03
    2d3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d3e:	dc 01       	movw	r26, r24
    2d40:	cb 01       	movw	r24, r22
    2d42:	f8 01       	movw	r30, r16
    2d44:	91 83       	std	Z+1, r25	; 0x01
    2d46:	80 83       	st	Z, r24
    2d48:	de 01       	movw	r26, r28
    2d4a:	a9 5b       	subi	r26, 0xB9	; 185
    2d4c:	bf 4f       	sbci	r27, 0xFF	; 255
    2d4e:	fe 01       	movw	r30, r28
    2d50:	e5 5b       	subi	r30, 0xB5	; 181
    2d52:	ff 4f       	sbci	r31, 0xFF	; 255
    2d54:	80 81       	ld	r24, Z
    2d56:	91 81       	ldd	r25, Z+1	; 0x01
    2d58:	8d 93       	st	X+, r24
    2d5a:	9c 93       	st	X, r25
    2d5c:	fe 01       	movw	r30, r28
    2d5e:	e9 5b       	subi	r30, 0xB9	; 185
    2d60:	ff 4f       	sbci	r31, 0xFF	; 255
    2d62:	80 81       	ld	r24, Z
    2d64:	91 81       	ldd	r25, Z+1	; 0x01
    2d66:	01 97       	sbiw	r24, 0x01	; 1
    2d68:	f1 f7       	brne	.-4      	; 0x2d66 <main+0xcee>
    2d6a:	fe 01       	movw	r30, r28
    2d6c:	e9 5b       	subi	r30, 0xB9	; 185
    2d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d70:	91 83       	std	Z+1, r25	; 0x01
    2d72:	80 83       	st	Z, r24
				_delay_ms(5000);
				LCD_VidWriteString(&error);
    2d74:	ce 01       	movw	r24, r28
    2d76:	85 54       	subi	r24, 0x45	; 69
    2d78:	9f 4f       	sbci	r25, 0xFF	; 255
    2d7a:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <LCD_VidWriteString>
				error_counter++;
    2d7e:	de 01       	movw	r26, r28
    2d80:	ab 56       	subi	r26, 0x6B	; 107
    2d82:	bf 4f       	sbci	r27, 0xFF	; 255
    2d84:	fe 01       	movw	r30, r28
    2d86:	eb 56       	subi	r30, 0x6B	; 107
    2d88:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8a:	80 81       	ld	r24, Z
    2d8c:	91 81       	ldd	r25, Z+1	; 0x01
    2d8e:	01 96       	adiw	r24, 0x01	; 1
    2d90:	11 96       	adiw	r26, 0x01	; 1
    2d92:	9c 93       	st	X, r25
    2d94:	8e 93       	st	-X, r24
				Flag_correct = 0;
    2d96:	fe 01       	movw	r30, r28
    2d98:	e0 57       	subi	r30, 0x70	; 112
    2d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9c:	10 82       	st	Z, r1
	LCD_VidInt();
	KPD_VidInit();
	while (1){

		LCD_Clear();
		while (error_counter < 3 && Flag_correct == 0){
    2d9e:	fe 01       	movw	r30, r28
    2da0:	eb 56       	subi	r30, 0x6B	; 107
    2da2:	ff 4f       	sbci	r31, 0xFF	; 255
    2da4:	80 81       	ld	r24, Z
    2da6:	91 81       	ldd	r25, Z+1	; 0x01
    2da8:	83 30       	cpi	r24, 0x03	; 3
    2daa:	91 05       	cpc	r25, r1
    2dac:	3c f4       	brge	.+14     	; 0x2dbc <main+0xd44>
    2dae:	fe 01       	movw	r30, r28
    2db0:	e0 57       	subi	r30, 0x70	; 112
    2db2:	ff 4f       	sbci	r31, 0xFF	; 255
    2db4:	80 81       	ld	r24, Z
    2db6:	88 23       	and	r24, r24
    2db8:	09 f4       	brne	.+2      	; 0x2dbc <main+0xd44>
    2dba:	d2 cb       	rjmp	.-2140   	; 0x2560 <main+0x4e8>
				error_counter++;
				Flag_correct = 0;
			}

		}
		if((error_counter >= 3) && (Flag_correct== 0)){
    2dbc:	fe 01       	movw	r30, r28
    2dbe:	eb 56       	subi	r30, 0x6B	; 107
    2dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc2:	80 81       	ld	r24, Z
    2dc4:	91 81       	ldd	r25, Z+1	; 0x01
    2dc6:	83 30       	cpi	r24, 0x03	; 3
    2dc8:	91 05       	cpc	r25, r1
    2dca:	0c f4       	brge	.+2      	; 0x2dce <main+0xd56>
    2dcc:	06 c1       	rjmp	.+524    	; 0x2fda <main+0xf62>
    2dce:	fe 01       	movw	r30, r28
    2dd0:	e0 57       	subi	r30, 0x70	; 112
    2dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd4:	80 81       	ld	r24, Z
    2dd6:	88 23       	and	r24, r24
    2dd8:	09 f0       	breq	.+2      	; 0x2ddc <main+0xd64>
    2dda:	ff c0       	rjmp	.+510    	; 0x2fda <main+0xf62>
    2ddc:	fe 01       	movw	r30, r28
    2dde:	ed 5b       	subi	r30, 0xBD	; 189
    2de0:	ff 4f       	sbci	r31, 0xFF	; 255
    2de2:	80 e0       	ldi	r24, 0x00	; 0
    2de4:	90 e4       	ldi	r25, 0x40	; 64
    2de6:	ac e9       	ldi	r26, 0x9C	; 156
    2de8:	b5 e4       	ldi	r27, 0x45	; 69
    2dea:	80 83       	st	Z, r24
    2dec:	91 83       	std	Z+1, r25	; 0x01
    2dee:	a2 83       	std	Z+2, r26	; 0x02
    2df0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2df2:	8e 01       	movw	r16, r28
    2df4:	01 5c       	subi	r16, 0xC1	; 193
    2df6:	1f 4f       	sbci	r17, 0xFF	; 255
    2df8:	fe 01       	movw	r30, r28
    2dfa:	ed 5b       	subi	r30, 0xBD	; 189
    2dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfe:	60 81       	ld	r22, Z
    2e00:	71 81       	ldd	r23, Z+1	; 0x01
    2e02:	82 81       	ldd	r24, Z+2	; 0x02
    2e04:	93 81       	ldd	r25, Z+3	; 0x03
    2e06:	20 e0       	ldi	r18, 0x00	; 0
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	4a ef       	ldi	r20, 0xFA	; 250
    2e0c:	54 e4       	ldi	r21, 0x44	; 68
    2e0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e12:	dc 01       	movw	r26, r24
    2e14:	cb 01       	movw	r24, r22
    2e16:	f8 01       	movw	r30, r16
    2e18:	80 83       	st	Z, r24
    2e1a:	91 83       	std	Z+1, r25	; 0x01
    2e1c:	a2 83       	std	Z+2, r26	; 0x02
    2e1e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e20:	fe 01       	movw	r30, r28
    2e22:	ff 96       	adiw	r30, 0x3f	; 63
    2e24:	60 81       	ld	r22, Z
    2e26:	71 81       	ldd	r23, Z+1	; 0x01
    2e28:	82 81       	ldd	r24, Z+2	; 0x02
    2e2a:	93 81       	ldd	r25, Z+3	; 0x03
    2e2c:	20 e0       	ldi	r18, 0x00	; 0
    2e2e:	30 e0       	ldi	r19, 0x00	; 0
    2e30:	40 e8       	ldi	r20, 0x80	; 128
    2e32:	5f e3       	ldi	r21, 0x3F	; 63
    2e34:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2e38:	88 23       	and	r24, r24
    2e3a:	2c f4       	brge	.+10     	; 0x2e46 <main+0xdce>
		__ticks = 1;
    2e3c:	81 e0       	ldi	r24, 0x01	; 1
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	9e af       	std	Y+62, r25	; 0x3e
    2e42:	8d af       	std	Y+61, r24	; 0x3d
    2e44:	46 c0       	rjmp	.+140    	; 0x2ed2 <main+0xe5a>
	else if (__tmp > 65535)
    2e46:	fe 01       	movw	r30, r28
    2e48:	ff 96       	adiw	r30, 0x3f	; 63
    2e4a:	60 81       	ld	r22, Z
    2e4c:	71 81       	ldd	r23, Z+1	; 0x01
    2e4e:	82 81       	ldd	r24, Z+2	; 0x02
    2e50:	93 81       	ldd	r25, Z+3	; 0x03
    2e52:	20 e0       	ldi	r18, 0x00	; 0
    2e54:	3f ef       	ldi	r19, 0xFF	; 255
    2e56:	4f e7       	ldi	r20, 0x7F	; 127
    2e58:	57 e4       	ldi	r21, 0x47	; 71
    2e5a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2e5e:	18 16       	cp	r1, r24
    2e60:	64 f5       	brge	.+88     	; 0x2eba <main+0xe42>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e62:	fe 01       	movw	r30, r28
    2e64:	ed 5b       	subi	r30, 0xBD	; 189
    2e66:	ff 4f       	sbci	r31, 0xFF	; 255
    2e68:	60 81       	ld	r22, Z
    2e6a:	71 81       	ldd	r23, Z+1	; 0x01
    2e6c:	82 81       	ldd	r24, Z+2	; 0x02
    2e6e:	93 81       	ldd	r25, Z+3	; 0x03
    2e70:	20 e0       	ldi	r18, 0x00	; 0
    2e72:	30 e0       	ldi	r19, 0x00	; 0
    2e74:	40 e2       	ldi	r20, 0x20	; 32
    2e76:	51 e4       	ldi	r21, 0x41	; 65
    2e78:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e7c:	dc 01       	movw	r26, r24
    2e7e:	cb 01       	movw	r24, r22
    2e80:	bc 01       	movw	r22, r24
    2e82:	cd 01       	movw	r24, r26
    2e84:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e88:	dc 01       	movw	r26, r24
    2e8a:	cb 01       	movw	r24, r22
    2e8c:	9e af       	std	Y+62, r25	; 0x3e
    2e8e:	8d af       	std	Y+61, r24	; 0x3d
    2e90:	0f c0       	rjmp	.+30     	; 0x2eb0 <main+0xe38>
    2e92:	88 ec       	ldi	r24, 0xC8	; 200
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	9c af       	std	Y+60, r25	; 0x3c
    2e98:	8b af       	std	Y+59, r24	; 0x3b
    2e9a:	8b ad       	ldd	r24, Y+59	; 0x3b
    2e9c:	9c ad       	ldd	r25, Y+60	; 0x3c
    2e9e:	01 97       	sbiw	r24, 0x01	; 1
    2ea0:	f1 f7       	brne	.-4      	; 0x2e9e <main+0xe26>
    2ea2:	9c af       	std	Y+60, r25	; 0x3c
    2ea4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ea6:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ea8:	9e ad       	ldd	r25, Y+62	; 0x3e
    2eaa:	01 97       	sbiw	r24, 0x01	; 1
    2eac:	9e af       	std	Y+62, r25	; 0x3e
    2eae:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eb0:	8d ad       	ldd	r24, Y+61	; 0x3d
    2eb2:	9e ad       	ldd	r25, Y+62	; 0x3e
    2eb4:	00 97       	sbiw	r24, 0x00	; 0
    2eb6:	69 f7       	brne	.-38     	; 0x2e92 <main+0xe1a>
    2eb8:	16 c0       	rjmp	.+44     	; 0x2ee6 <main+0xe6e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eba:	fe 01       	movw	r30, r28
    2ebc:	ff 96       	adiw	r30, 0x3f	; 63
    2ebe:	60 81       	ld	r22, Z
    2ec0:	71 81       	ldd	r23, Z+1	; 0x01
    2ec2:	82 81       	ldd	r24, Z+2	; 0x02
    2ec4:	93 81       	ldd	r25, Z+3	; 0x03
    2ec6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2eca:	dc 01       	movw	r26, r24
    2ecc:	cb 01       	movw	r24, r22
    2ece:	9e af       	std	Y+62, r25	; 0x3e
    2ed0:	8d af       	std	Y+61, r24	; 0x3d
    2ed2:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ed4:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ed6:	9a af       	std	Y+58, r25	; 0x3a
    2ed8:	89 af       	std	Y+57, r24	; 0x39
    2eda:	89 ad       	ldd	r24, Y+57	; 0x39
    2edc:	9a ad       	ldd	r25, Y+58	; 0x3a
    2ede:	01 97       	sbiw	r24, 0x01	; 1
    2ee0:	f1 f7       	brne	.-4      	; 0x2ede <main+0xe66>
    2ee2:	9a af       	std	Y+58, r25	; 0x3a
    2ee4:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(5000);
			LCD_Clear();
    2ee6:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <LCD_Clear>
    2eea:	80 e0       	ldi	r24, 0x00	; 0
    2eec:	90 e4       	ldi	r25, 0x40	; 64
    2eee:	ac e9       	ldi	r26, 0x9C	; 156
    2ef0:	b5 e4       	ldi	r27, 0x45	; 69
    2ef2:	8d ab       	std	Y+53, r24	; 0x35
    2ef4:	9e ab       	std	Y+54, r25	; 0x36
    2ef6:	af ab       	std	Y+55, r26	; 0x37
    2ef8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2efa:	6d a9       	ldd	r22, Y+53	; 0x35
    2efc:	7e a9       	ldd	r23, Y+54	; 0x36
    2efe:	8f a9       	ldd	r24, Y+55	; 0x37
    2f00:	98 ad       	ldd	r25, Y+56	; 0x38
    2f02:	20 e0       	ldi	r18, 0x00	; 0
    2f04:	30 e0       	ldi	r19, 0x00	; 0
    2f06:	4a ef       	ldi	r20, 0xFA	; 250
    2f08:	54 e4       	ldi	r21, 0x44	; 68
    2f0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f0e:	dc 01       	movw	r26, r24
    2f10:	cb 01       	movw	r24, r22
    2f12:	89 ab       	std	Y+49, r24	; 0x31
    2f14:	9a ab       	std	Y+50, r25	; 0x32
    2f16:	ab ab       	std	Y+51, r26	; 0x33
    2f18:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f1a:	69 a9       	ldd	r22, Y+49	; 0x31
    2f1c:	7a a9       	ldd	r23, Y+50	; 0x32
    2f1e:	8b a9       	ldd	r24, Y+51	; 0x33
    2f20:	9c a9       	ldd	r25, Y+52	; 0x34
    2f22:	20 e0       	ldi	r18, 0x00	; 0
    2f24:	30 e0       	ldi	r19, 0x00	; 0
    2f26:	40 e8       	ldi	r20, 0x80	; 128
    2f28:	5f e3       	ldi	r21, 0x3F	; 63
    2f2a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2f2e:	88 23       	and	r24, r24
    2f30:	2c f4       	brge	.+10     	; 0x2f3c <main+0xec4>
		__ticks = 1;
    2f32:	81 e0       	ldi	r24, 0x01	; 1
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	98 ab       	std	Y+48, r25	; 0x30
    2f38:	8f a7       	std	Y+47, r24	; 0x2f
    2f3a:	3f c0       	rjmp	.+126    	; 0x2fba <main+0xf42>
	else if (__tmp > 65535)
    2f3c:	69 a9       	ldd	r22, Y+49	; 0x31
    2f3e:	7a a9       	ldd	r23, Y+50	; 0x32
    2f40:	8b a9       	ldd	r24, Y+51	; 0x33
    2f42:	9c a9       	ldd	r25, Y+52	; 0x34
    2f44:	20 e0       	ldi	r18, 0x00	; 0
    2f46:	3f ef       	ldi	r19, 0xFF	; 255
    2f48:	4f e7       	ldi	r20, 0x7F	; 127
    2f4a:	57 e4       	ldi	r21, 0x47	; 71
    2f4c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2f50:	18 16       	cp	r1, r24
    2f52:	4c f5       	brge	.+82     	; 0x2fa6 <main+0xf2e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f54:	6d a9       	ldd	r22, Y+53	; 0x35
    2f56:	7e a9       	ldd	r23, Y+54	; 0x36
    2f58:	8f a9       	ldd	r24, Y+55	; 0x37
    2f5a:	98 ad       	ldd	r25, Y+56	; 0x38
    2f5c:	20 e0       	ldi	r18, 0x00	; 0
    2f5e:	30 e0       	ldi	r19, 0x00	; 0
    2f60:	40 e2       	ldi	r20, 0x20	; 32
    2f62:	51 e4       	ldi	r21, 0x41	; 65
    2f64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f68:	dc 01       	movw	r26, r24
    2f6a:	cb 01       	movw	r24, r22
    2f6c:	bc 01       	movw	r22, r24
    2f6e:	cd 01       	movw	r24, r26
    2f70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f74:	dc 01       	movw	r26, r24
    2f76:	cb 01       	movw	r24, r22
    2f78:	98 ab       	std	Y+48, r25	; 0x30
    2f7a:	8f a7       	std	Y+47, r24	; 0x2f
    2f7c:	0f c0       	rjmp	.+30     	; 0x2f9c <main+0xf24>
    2f7e:	88 ec       	ldi	r24, 0xC8	; 200
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	9e a7       	std	Y+46, r25	; 0x2e
    2f84:	8d a7       	std	Y+45, r24	; 0x2d
    2f86:	8d a5       	ldd	r24, Y+45	; 0x2d
    2f88:	9e a5       	ldd	r25, Y+46	; 0x2e
    2f8a:	01 97       	sbiw	r24, 0x01	; 1
    2f8c:	f1 f7       	brne	.-4      	; 0x2f8a <main+0xf12>
    2f8e:	9e a7       	std	Y+46, r25	; 0x2e
    2f90:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f92:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f94:	98 a9       	ldd	r25, Y+48	; 0x30
    2f96:	01 97       	sbiw	r24, 0x01	; 1
    2f98:	98 ab       	std	Y+48, r25	; 0x30
    2f9a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f9c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f9e:	98 a9       	ldd	r25, Y+48	; 0x30
    2fa0:	00 97       	sbiw	r24, 0x00	; 0
    2fa2:	69 f7       	brne	.-38     	; 0x2f7e <main+0xf06>
    2fa4:	14 c0       	rjmp	.+40     	; 0x2fce <main+0xf56>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fa6:	69 a9       	ldd	r22, Y+49	; 0x31
    2fa8:	7a a9       	ldd	r23, Y+50	; 0x32
    2faa:	8b a9       	ldd	r24, Y+51	; 0x33
    2fac:	9c a9       	ldd	r25, Y+52	; 0x34
    2fae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2fb2:	dc 01       	movw	r26, r24
    2fb4:	cb 01       	movw	r24, r22
    2fb6:	98 ab       	std	Y+48, r25	; 0x30
    2fb8:	8f a7       	std	Y+47, r24	; 0x2f
    2fba:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fbc:	98 a9       	ldd	r25, Y+48	; 0x30
    2fbe:	9c a7       	std	Y+44, r25	; 0x2c
    2fc0:	8b a7       	std	Y+43, r24	; 0x2b
    2fc2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fc4:	9c a5       	ldd	r25, Y+44	; 0x2c
    2fc6:	01 97       	sbiw	r24, 0x01	; 1
    2fc8:	f1 f7       	brne	.-4      	; 0x2fc6 <main+0xf4e>
    2fca:	9c a7       	std	Y+44, r25	; 0x2c
    2fcc:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(5000);
			LCD_VidWriteString(&no_more_trials);
    2fce:	ce 01       	movw	r24, r28
    2fd0:	85 53       	subi	r24, 0x35	; 53
    2fd2:	9f 4f       	sbci	r25, 0xFF	; 255
    2fd4:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <LCD_VidWriteString>
    2fd8:	c0 ca       	rjmp	.-2688   	; 0x255a <main+0x4e2>

		}
		else if ((error_counter <3) && (Flag_correct == 1)){
    2fda:	fe 01       	movw	r30, r28
    2fdc:	eb 56       	subi	r30, 0x6B	; 107
    2fde:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe0:	80 81       	ld	r24, Z
    2fe2:	91 81       	ldd	r25, Z+1	; 0x01
    2fe4:	83 30       	cpi	r24, 0x03	; 3
    2fe6:	91 05       	cpc	r25, r1
    2fe8:	0c f0       	brlt	.+2      	; 0x2fec <main+0xf74>
    2fea:	b7 ca       	rjmp	.-2706   	; 0x255a <main+0x4e2>
    2fec:	fe 01       	movw	r30, r28
    2fee:	e0 57       	subi	r30, 0x70	; 112
    2ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff2:	80 81       	ld	r24, Z
    2ff4:	81 30       	cpi	r24, 0x01	; 1
    2ff6:	09 f0       	breq	.+2      	; 0x2ffa <main+0xf82>
    2ff8:	b0 ca       	rjmp	.-2720   	; 0x255a <main+0x4e2>
    2ffa:	80 e0       	ldi	r24, 0x00	; 0
    2ffc:	90 e4       	ldi	r25, 0x40	; 64
    2ffe:	ac e9       	ldi	r26, 0x9C	; 156
    3000:	b5 e4       	ldi	r27, 0x45	; 69
    3002:	8f a3       	std	Y+39, r24	; 0x27
    3004:	98 a7       	std	Y+40, r25	; 0x28
    3006:	a9 a7       	std	Y+41, r26	; 0x29
    3008:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    300a:	6f a1       	ldd	r22, Y+39	; 0x27
    300c:	78 a5       	ldd	r23, Y+40	; 0x28
    300e:	89 a5       	ldd	r24, Y+41	; 0x29
    3010:	9a a5       	ldd	r25, Y+42	; 0x2a
    3012:	20 e0       	ldi	r18, 0x00	; 0
    3014:	30 e0       	ldi	r19, 0x00	; 0
    3016:	4a ef       	ldi	r20, 0xFA	; 250
    3018:	54 e4       	ldi	r21, 0x44	; 68
    301a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    301e:	dc 01       	movw	r26, r24
    3020:	cb 01       	movw	r24, r22
    3022:	8b a3       	std	Y+35, r24	; 0x23
    3024:	9c a3       	std	Y+36, r25	; 0x24
    3026:	ad a3       	std	Y+37, r26	; 0x25
    3028:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    302a:	6b a1       	ldd	r22, Y+35	; 0x23
    302c:	7c a1       	ldd	r23, Y+36	; 0x24
    302e:	8d a1       	ldd	r24, Y+37	; 0x25
    3030:	9e a1       	ldd	r25, Y+38	; 0x26
    3032:	20 e0       	ldi	r18, 0x00	; 0
    3034:	30 e0       	ldi	r19, 0x00	; 0
    3036:	40 e8       	ldi	r20, 0x80	; 128
    3038:	5f e3       	ldi	r21, 0x3F	; 63
    303a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    303e:	88 23       	and	r24, r24
    3040:	2c f4       	brge	.+10     	; 0x304c <main+0xfd4>
		__ticks = 1;
    3042:	81 e0       	ldi	r24, 0x01	; 1
    3044:	90 e0       	ldi	r25, 0x00	; 0
    3046:	9a a3       	std	Y+34, r25	; 0x22
    3048:	89 a3       	std	Y+33, r24	; 0x21
    304a:	3f c0       	rjmp	.+126    	; 0x30ca <main+0x1052>
	else if (__tmp > 65535)
    304c:	6b a1       	ldd	r22, Y+35	; 0x23
    304e:	7c a1       	ldd	r23, Y+36	; 0x24
    3050:	8d a1       	ldd	r24, Y+37	; 0x25
    3052:	9e a1       	ldd	r25, Y+38	; 0x26
    3054:	20 e0       	ldi	r18, 0x00	; 0
    3056:	3f ef       	ldi	r19, 0xFF	; 255
    3058:	4f e7       	ldi	r20, 0x7F	; 127
    305a:	57 e4       	ldi	r21, 0x47	; 71
    305c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3060:	18 16       	cp	r1, r24
    3062:	4c f5       	brge	.+82     	; 0x30b6 <main+0x103e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3064:	6f a1       	ldd	r22, Y+39	; 0x27
    3066:	78 a5       	ldd	r23, Y+40	; 0x28
    3068:	89 a5       	ldd	r24, Y+41	; 0x29
    306a:	9a a5       	ldd	r25, Y+42	; 0x2a
    306c:	20 e0       	ldi	r18, 0x00	; 0
    306e:	30 e0       	ldi	r19, 0x00	; 0
    3070:	40 e2       	ldi	r20, 0x20	; 32
    3072:	51 e4       	ldi	r21, 0x41	; 65
    3074:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3078:	dc 01       	movw	r26, r24
    307a:	cb 01       	movw	r24, r22
    307c:	bc 01       	movw	r22, r24
    307e:	cd 01       	movw	r24, r26
    3080:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3084:	dc 01       	movw	r26, r24
    3086:	cb 01       	movw	r24, r22
    3088:	9a a3       	std	Y+34, r25	; 0x22
    308a:	89 a3       	std	Y+33, r24	; 0x21
    308c:	0f c0       	rjmp	.+30     	; 0x30ac <main+0x1034>
    308e:	88 ec       	ldi	r24, 0xC8	; 200
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	98 a3       	std	Y+32, r25	; 0x20
    3094:	8f 8f       	std	Y+31, r24	; 0x1f
    3096:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3098:	98 a1       	ldd	r25, Y+32	; 0x20
    309a:	01 97       	sbiw	r24, 0x01	; 1
    309c:	f1 f7       	brne	.-4      	; 0x309a <main+0x1022>
    309e:	98 a3       	std	Y+32, r25	; 0x20
    30a0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30a2:	89 a1       	ldd	r24, Y+33	; 0x21
    30a4:	9a a1       	ldd	r25, Y+34	; 0x22
    30a6:	01 97       	sbiw	r24, 0x01	; 1
    30a8:	9a a3       	std	Y+34, r25	; 0x22
    30aa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ac:	89 a1       	ldd	r24, Y+33	; 0x21
    30ae:	9a a1       	ldd	r25, Y+34	; 0x22
    30b0:	00 97       	sbiw	r24, 0x00	; 0
    30b2:	69 f7       	brne	.-38     	; 0x308e <main+0x1016>
    30b4:	14 c0       	rjmp	.+40     	; 0x30de <main+0x1066>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30b6:	6b a1       	ldd	r22, Y+35	; 0x23
    30b8:	7c a1       	ldd	r23, Y+36	; 0x24
    30ba:	8d a1       	ldd	r24, Y+37	; 0x25
    30bc:	9e a1       	ldd	r25, Y+38	; 0x26
    30be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30c2:	dc 01       	movw	r26, r24
    30c4:	cb 01       	movw	r24, r22
    30c6:	9a a3       	std	Y+34, r25	; 0x22
    30c8:	89 a3       	std	Y+33, r24	; 0x21
    30ca:	89 a1       	ldd	r24, Y+33	; 0x21
    30cc:	9a a1       	ldd	r25, Y+34	; 0x22
    30ce:	9e 8f       	std	Y+30, r25	; 0x1e
    30d0:	8d 8f       	std	Y+29, r24	; 0x1d
    30d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30d6:	01 97       	sbiw	r24, 0x01	; 1
    30d8:	f1 f7       	brne	.-4      	; 0x30d6 <main+0x105e>
    30da:	9e 8f       	std	Y+30, r25	; 0x1e
    30dc:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(5000);
			LCD_Clear();
    30de:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <LCD_Clear>
    30e2:	80 e0       	ldi	r24, 0x00	; 0
    30e4:	90 e4       	ldi	r25, 0x40	; 64
    30e6:	ac e9       	ldi	r26, 0x9C	; 156
    30e8:	b5 e4       	ldi	r27, 0x45	; 69
    30ea:	89 8f       	std	Y+25, r24	; 0x19
    30ec:	9a 8f       	std	Y+26, r25	; 0x1a
    30ee:	ab 8f       	std	Y+27, r26	; 0x1b
    30f0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30f2:	69 8d       	ldd	r22, Y+25	; 0x19
    30f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30fa:	20 e0       	ldi	r18, 0x00	; 0
    30fc:	30 e0       	ldi	r19, 0x00	; 0
    30fe:	4a ef       	ldi	r20, 0xFA	; 250
    3100:	54 e4       	ldi	r21, 0x44	; 68
    3102:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3106:	dc 01       	movw	r26, r24
    3108:	cb 01       	movw	r24, r22
    310a:	8d 8b       	std	Y+21, r24	; 0x15
    310c:	9e 8b       	std	Y+22, r25	; 0x16
    310e:	af 8b       	std	Y+23, r26	; 0x17
    3110:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3112:	6d 89       	ldd	r22, Y+21	; 0x15
    3114:	7e 89       	ldd	r23, Y+22	; 0x16
    3116:	8f 89       	ldd	r24, Y+23	; 0x17
    3118:	98 8d       	ldd	r25, Y+24	; 0x18
    311a:	20 e0       	ldi	r18, 0x00	; 0
    311c:	30 e0       	ldi	r19, 0x00	; 0
    311e:	40 e8       	ldi	r20, 0x80	; 128
    3120:	5f e3       	ldi	r21, 0x3F	; 63
    3122:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3126:	88 23       	and	r24, r24
    3128:	2c f4       	brge	.+10     	; 0x3134 <main+0x10bc>
		__ticks = 1;
    312a:	81 e0       	ldi	r24, 0x01	; 1
    312c:	90 e0       	ldi	r25, 0x00	; 0
    312e:	9c 8b       	std	Y+20, r25	; 0x14
    3130:	8b 8b       	std	Y+19, r24	; 0x13
    3132:	3f c0       	rjmp	.+126    	; 0x31b2 <main+0x113a>
	else if (__tmp > 65535)
    3134:	6d 89       	ldd	r22, Y+21	; 0x15
    3136:	7e 89       	ldd	r23, Y+22	; 0x16
    3138:	8f 89       	ldd	r24, Y+23	; 0x17
    313a:	98 8d       	ldd	r25, Y+24	; 0x18
    313c:	20 e0       	ldi	r18, 0x00	; 0
    313e:	3f ef       	ldi	r19, 0xFF	; 255
    3140:	4f e7       	ldi	r20, 0x7F	; 127
    3142:	57 e4       	ldi	r21, 0x47	; 71
    3144:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3148:	18 16       	cp	r1, r24
    314a:	4c f5       	brge	.+82     	; 0x319e <main+0x1126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    314c:	69 8d       	ldd	r22, Y+25	; 0x19
    314e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3150:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3152:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3154:	20 e0       	ldi	r18, 0x00	; 0
    3156:	30 e0       	ldi	r19, 0x00	; 0
    3158:	40 e2       	ldi	r20, 0x20	; 32
    315a:	51 e4       	ldi	r21, 0x41	; 65
    315c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3160:	dc 01       	movw	r26, r24
    3162:	cb 01       	movw	r24, r22
    3164:	bc 01       	movw	r22, r24
    3166:	cd 01       	movw	r24, r26
    3168:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    316c:	dc 01       	movw	r26, r24
    316e:	cb 01       	movw	r24, r22
    3170:	9c 8b       	std	Y+20, r25	; 0x14
    3172:	8b 8b       	std	Y+19, r24	; 0x13
    3174:	0f c0       	rjmp	.+30     	; 0x3194 <main+0x111c>
    3176:	88 ec       	ldi	r24, 0xC8	; 200
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	9a 8b       	std	Y+18, r25	; 0x12
    317c:	89 8b       	std	Y+17, r24	; 0x11
    317e:	89 89       	ldd	r24, Y+17	; 0x11
    3180:	9a 89       	ldd	r25, Y+18	; 0x12
    3182:	01 97       	sbiw	r24, 0x01	; 1
    3184:	f1 f7       	brne	.-4      	; 0x3182 <main+0x110a>
    3186:	9a 8b       	std	Y+18, r25	; 0x12
    3188:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    318a:	8b 89       	ldd	r24, Y+19	; 0x13
    318c:	9c 89       	ldd	r25, Y+20	; 0x14
    318e:	01 97       	sbiw	r24, 0x01	; 1
    3190:	9c 8b       	std	Y+20, r25	; 0x14
    3192:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3194:	8b 89       	ldd	r24, Y+19	; 0x13
    3196:	9c 89       	ldd	r25, Y+20	; 0x14
    3198:	00 97       	sbiw	r24, 0x00	; 0
    319a:	69 f7       	brne	.-38     	; 0x3176 <main+0x10fe>
    319c:	14 c0       	rjmp	.+40     	; 0x31c6 <main+0x114e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    319e:	6d 89       	ldd	r22, Y+21	; 0x15
    31a0:	7e 89       	ldd	r23, Y+22	; 0x16
    31a2:	8f 89       	ldd	r24, Y+23	; 0x17
    31a4:	98 8d       	ldd	r25, Y+24	; 0x18
    31a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31aa:	dc 01       	movw	r26, r24
    31ac:	cb 01       	movw	r24, r22
    31ae:	9c 8b       	std	Y+20, r25	; 0x14
    31b0:	8b 8b       	std	Y+19, r24	; 0x13
    31b2:	8b 89       	ldd	r24, Y+19	; 0x13
    31b4:	9c 89       	ldd	r25, Y+20	; 0x14
    31b6:	98 8b       	std	Y+16, r25	; 0x10
    31b8:	8f 87       	std	Y+15, r24	; 0x0f
    31ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    31bc:	98 89       	ldd	r25, Y+16	; 0x10
    31be:	01 97       	sbiw	r24, 0x01	; 1
    31c0:	f1 f7       	brne	.-4      	; 0x31be <main+0x1146>
    31c2:	98 8b       	std	Y+16, r25	; 0x10
    31c4:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(5000);
			LCD_VidSetPosition(0, 0);
    31c6:	80 e0       	ldi	r24, 0x00	; 0
    31c8:	60 e0       	ldi	r22, 0x00	; 0
    31ca:	0e 94 a3 0c 	call	0x1946	; 0x1946 <LCD_VidSetPosition>
			LCD_VidWriteString(&TEMP);
    31ce:	ce 01       	movw	r24, r28
    31d0:	82 55       	subi	r24, 0x52	; 82
    31d2:	9f 4f       	sbci	r25, 0xFF	; 255
    31d4:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <LCD_VidWriteString>
			LCD_VidSetPosition(0, 8);
    31d8:	80 e0       	ldi	r24, 0x00	; 0
    31da:	68 e0       	ldi	r22, 0x08	; 8
    31dc:	0e 94 a3 0c 	call	0x1946	; 0x1946 <LCD_VidSetPosition>
			LCD_VidWriteString(&LDR);
    31e0:	ce 01       	movw	r24, r28
    31e2:	8b 54       	subi	r24, 0x4B	; 75
    31e4:	9f 4f       	sbci	r25, 0xFF	; 255
    31e6:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <LCD_VidWriteString>
			LCD_VidSetPosition(1, 3);
    31ea:	81 e0       	ldi	r24, 0x01	; 1
    31ec:	63 e0       	ldi	r22, 0x03	; 3
    31ee:	0e 94 a3 0c 	call	0x1946	; 0x1946 <LCD_VidSetPosition>
			LCD_VidWriteString(&Stop);
    31f2:	ce 01       	movw	r24, r28
    31f4:	89 55       	subi	r24, 0x59	; 89
    31f6:	9f 4f       	sbci	r25, 0xFF	; 255
    31f8:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <LCD_VidWriteString>
    31fc:	80 e0       	ldi	r24, 0x00	; 0
    31fe:	90 e4       	ldi	r25, 0x40	; 64
    3200:	ac e9       	ldi	r26, 0x9C	; 156
    3202:	b5 e4       	ldi	r27, 0x45	; 69
    3204:	8b 87       	std	Y+11, r24	; 0x0b
    3206:	9c 87       	std	Y+12, r25	; 0x0c
    3208:	ad 87       	std	Y+13, r26	; 0x0d
    320a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    320c:	6b 85       	ldd	r22, Y+11	; 0x0b
    320e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3210:	8d 85       	ldd	r24, Y+13	; 0x0d
    3212:	9e 85       	ldd	r25, Y+14	; 0x0e
    3214:	20 e0       	ldi	r18, 0x00	; 0
    3216:	30 e0       	ldi	r19, 0x00	; 0
    3218:	4a ef       	ldi	r20, 0xFA	; 250
    321a:	54 e4       	ldi	r21, 0x44	; 68
    321c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3220:	dc 01       	movw	r26, r24
    3222:	cb 01       	movw	r24, r22
    3224:	8f 83       	std	Y+7, r24	; 0x07
    3226:	98 87       	std	Y+8, r25	; 0x08
    3228:	a9 87       	std	Y+9, r26	; 0x09
    322a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    322c:	6f 81       	ldd	r22, Y+7	; 0x07
    322e:	78 85       	ldd	r23, Y+8	; 0x08
    3230:	89 85       	ldd	r24, Y+9	; 0x09
    3232:	9a 85       	ldd	r25, Y+10	; 0x0a
    3234:	20 e0       	ldi	r18, 0x00	; 0
    3236:	30 e0       	ldi	r19, 0x00	; 0
    3238:	40 e8       	ldi	r20, 0x80	; 128
    323a:	5f e3       	ldi	r21, 0x3F	; 63
    323c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3240:	88 23       	and	r24, r24
    3242:	2c f4       	brge	.+10     	; 0x324e <main+0x11d6>
		__ticks = 1;
    3244:	81 e0       	ldi	r24, 0x01	; 1
    3246:	90 e0       	ldi	r25, 0x00	; 0
    3248:	9e 83       	std	Y+6, r25	; 0x06
    324a:	8d 83       	std	Y+5, r24	; 0x05
    324c:	3f c0       	rjmp	.+126    	; 0x32cc <main+0x1254>
	else if (__tmp > 65535)
    324e:	6f 81       	ldd	r22, Y+7	; 0x07
    3250:	78 85       	ldd	r23, Y+8	; 0x08
    3252:	89 85       	ldd	r24, Y+9	; 0x09
    3254:	9a 85       	ldd	r25, Y+10	; 0x0a
    3256:	20 e0       	ldi	r18, 0x00	; 0
    3258:	3f ef       	ldi	r19, 0xFF	; 255
    325a:	4f e7       	ldi	r20, 0x7F	; 127
    325c:	57 e4       	ldi	r21, 0x47	; 71
    325e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3262:	18 16       	cp	r1, r24
    3264:	4c f5       	brge	.+82     	; 0x32b8 <main+0x1240>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3266:	6b 85       	ldd	r22, Y+11	; 0x0b
    3268:	7c 85       	ldd	r23, Y+12	; 0x0c
    326a:	8d 85       	ldd	r24, Y+13	; 0x0d
    326c:	9e 85       	ldd	r25, Y+14	; 0x0e
    326e:	20 e0       	ldi	r18, 0x00	; 0
    3270:	30 e0       	ldi	r19, 0x00	; 0
    3272:	40 e2       	ldi	r20, 0x20	; 32
    3274:	51 e4       	ldi	r21, 0x41	; 65
    3276:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    327a:	dc 01       	movw	r26, r24
    327c:	cb 01       	movw	r24, r22
    327e:	bc 01       	movw	r22, r24
    3280:	cd 01       	movw	r24, r26
    3282:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3286:	dc 01       	movw	r26, r24
    3288:	cb 01       	movw	r24, r22
    328a:	9e 83       	std	Y+6, r25	; 0x06
    328c:	8d 83       	std	Y+5, r24	; 0x05
    328e:	0f c0       	rjmp	.+30     	; 0x32ae <main+0x1236>
    3290:	88 ec       	ldi	r24, 0xC8	; 200
    3292:	90 e0       	ldi	r25, 0x00	; 0
    3294:	9c 83       	std	Y+4, r25	; 0x04
    3296:	8b 83       	std	Y+3, r24	; 0x03
    3298:	8b 81       	ldd	r24, Y+3	; 0x03
    329a:	9c 81       	ldd	r25, Y+4	; 0x04
    329c:	01 97       	sbiw	r24, 0x01	; 1
    329e:	f1 f7       	brne	.-4      	; 0x329c <main+0x1224>
    32a0:	9c 83       	std	Y+4, r25	; 0x04
    32a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32a4:	8d 81       	ldd	r24, Y+5	; 0x05
    32a6:	9e 81       	ldd	r25, Y+6	; 0x06
    32a8:	01 97       	sbiw	r24, 0x01	; 1
    32aa:	9e 83       	std	Y+6, r25	; 0x06
    32ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32ae:	8d 81       	ldd	r24, Y+5	; 0x05
    32b0:	9e 81       	ldd	r25, Y+6	; 0x06
    32b2:	00 97       	sbiw	r24, 0x00	; 0
    32b4:	69 f7       	brne	.-38     	; 0x3290 <main+0x1218>
    32b6:	14 c0       	rjmp	.+40     	; 0x32e0 <main+0x1268>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32b8:	6f 81       	ldd	r22, Y+7	; 0x07
    32ba:	78 85       	ldd	r23, Y+8	; 0x08
    32bc:	89 85       	ldd	r24, Y+9	; 0x09
    32be:	9a 85       	ldd	r25, Y+10	; 0x0a
    32c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    32c4:	dc 01       	movw	r26, r24
    32c6:	cb 01       	movw	r24, r22
    32c8:	9e 83       	std	Y+6, r25	; 0x06
    32ca:	8d 83       	std	Y+5, r24	; 0x05
    32cc:	8d 81       	ldd	r24, Y+5	; 0x05
    32ce:	9e 81       	ldd	r25, Y+6	; 0x06
    32d0:	9a 83       	std	Y+2, r25	; 0x02
    32d2:	89 83       	std	Y+1, r24	; 0x01
    32d4:	89 81       	ldd	r24, Y+1	; 0x01
    32d6:	9a 81       	ldd	r25, Y+2	; 0x02
    32d8:	01 97       	sbiw	r24, 0x01	; 1
    32da:	f1 f7       	brne	.-4      	; 0x32d8 <main+0x1260>
    32dc:	9a 83       	std	Y+2, r25	; 0x02
    32de:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(5000);
			operation = KPD_U8GetPressedKey();
    32e0:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <KPD_U8GetPressedKey>
    32e4:	fe 01       	movw	r30, r28
    32e6:	e1 57       	subi	r30, 0x71	; 113
    32e8:	ff 4f       	sbci	r31, 0xFF	; 255
    32ea:	80 83       	st	Z, r24
			if(operation!=0){
    32ec:	fe 01       	movw	r30, r28
    32ee:	e1 57       	subi	r30, 0x71	; 113
    32f0:	ff 4f       	sbci	r31, 0xFF	; 255
    32f2:	80 81       	ld	r24, Z
    32f4:	88 23       	and	r24, r24
    32f6:	09 f4       	brne	.+2      	; 0x32fa <main+0x1282>
    32f8:	30 c9       	rjmp	.-3488   	; 0x255a <main+0x4e2>
				switch (operation){
    32fa:	fe 01       	movw	r30, r28
    32fc:	e1 57       	subi	r30, 0x71	; 113
    32fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3300:	80 81       	ld	r24, Z
    3302:	28 2f       	mov	r18, r24
    3304:	30 e0       	ldi	r19, 0x00	; 0
    3306:	c8 52       	subi	r28, 0x28	; 40
    3308:	df 4f       	sbci	r29, 0xFF	; 255
    330a:	39 83       	std	Y+1, r19	; 0x01
    330c:	28 83       	st	Y, r18
    330e:	c8 5d       	subi	r28, 0xD8	; 216
    3310:	d0 40       	sbci	r29, 0x00	; 0
    3312:	c8 52       	subi	r28, 0x28	; 40
    3314:	df 4f       	sbci	r29, 0xFF	; 255
    3316:	88 81       	ld	r24, Y
    3318:	99 81       	ldd	r25, Y+1	; 0x01
    331a:	c8 5d       	subi	r28, 0xD8	; 216
    331c:	d0 40       	sbci	r29, 0x00	; 0
    331e:	82 33       	cpi	r24, 0x32	; 50
    3320:	91 05       	cpc	r25, r1
    3322:	19 f1       	breq	.+70     	; 0x336a <main+0x12f2>
    3324:	c8 52       	subi	r28, 0x28	; 40
    3326:	df 4f       	sbci	r29, 0xFF	; 255
    3328:	e8 81       	ld	r30, Y
    332a:	f9 81       	ldd	r31, Y+1	; 0x01
    332c:	c8 5d       	subi	r28, 0xD8	; 216
    332e:	d0 40       	sbci	r29, 0x00	; 0
    3330:	e3 33       	cpi	r30, 0x33	; 51
    3332:	f1 05       	cpc	r31, r1
    3334:	49 f1       	breq	.+82     	; 0x3388 <main+0x1310>
    3336:	c8 52       	subi	r28, 0x28	; 40
    3338:	df 4f       	sbci	r29, 0xFF	; 255
    333a:	28 81       	ld	r18, Y
    333c:	39 81       	ldd	r19, Y+1	; 0x01
    333e:	c8 5d       	subi	r28, 0xD8	; 216
    3340:	d0 40       	sbci	r29, 0x00	; 0
    3342:	21 33       	cpi	r18, 0x31	; 49
    3344:	31 05       	cpc	r19, r1
    3346:	09 f0       	breq	.+2      	; 0x334a <main+0x12d2>
    3348:	08 c9       	rjmp	.-3568   	; 0x255a <main+0x4e2>
					case '1':
						LCD_Clear();
    334a:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <LCD_Clear>
						temp = TEMP_Read(1);
    334e:	81 e0       	ldi	r24, 0x01	; 1
    3350:	0e 94 2d 10 	call	0x205a	; 0x205a <TEMP_Read>
    3354:	fe 01       	movw	r30, r28
    3356:	e2 57       	subi	r30, 0x72	; 114
    3358:	ff 4f       	sbci	r31, 0xFF	; 255
    335a:	80 83       	st	Z, r24
						LCD_VidWriteData(temp);
    335c:	fe 01       	movw	r30, r28
    335e:	e2 57       	subi	r30, 0x72	; 114
    3360:	ff 4f       	sbci	r31, 0xFF	; 255
    3362:	80 81       	ld	r24, Z
    3364:	0e 94 c3 0c 	call	0x1986	; 0x1986 <LCD_VidWriteData>
    3368:	f8 c8       	rjmp	.-3600   	; 0x255a <main+0x4e2>
						break;

					case '2':
						LCD_Clear();
    336a:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <LCD_Clear>
						ldr = LDR_Read(0);
    336e:	80 e0       	ldi	r24, 0x00	; 0
    3370:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LDR_Read>
    3374:	fe 01       	movw	r30, r28
    3376:	e3 57       	subi	r30, 0x73	; 115
    3378:	ff 4f       	sbci	r31, 0xFF	; 255
    337a:	80 83       	st	Z, r24
						LCD_VidWriteData(LDR);
    337c:	ce 01       	movw	r24, r28
    337e:	8b 54       	subi	r24, 0x4B	; 75
    3380:	9f 4f       	sbci	r25, 0xFF	; 255
    3382:	0e 94 c3 0c 	call	0x1986	; 0x1986 <LCD_VidWriteData>
    3386:	e9 c8       	rjmp	.-3630   	; 0x255a <main+0x4e2>
						break;

					case '3':
						LCD_Clear();
    3388:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <LCD_Clear>
    338c:	e6 c8       	rjmp	.-3636   	; 0x255a <main+0x4e2>

0000338e <__udivmodqi4>:
    338e:	99 1b       	sub	r25, r25
    3390:	79 e0       	ldi	r23, 0x09	; 9
    3392:	04 c0       	rjmp	.+8      	; 0x339c <__udivmodqi4_ep>

00003394 <__udivmodqi4_loop>:
    3394:	99 1f       	adc	r25, r25
    3396:	96 17       	cp	r25, r22
    3398:	08 f0       	brcs	.+2      	; 0x339c <__udivmodqi4_ep>
    339a:	96 1b       	sub	r25, r22

0000339c <__udivmodqi4_ep>:
    339c:	88 1f       	adc	r24, r24
    339e:	7a 95       	dec	r23
    33a0:	c9 f7       	brne	.-14     	; 0x3394 <__udivmodqi4_loop>
    33a2:	80 95       	com	r24
    33a4:	08 95       	ret

000033a6 <__udivmodhi4>:
    33a6:	aa 1b       	sub	r26, r26
    33a8:	bb 1b       	sub	r27, r27
    33aa:	51 e1       	ldi	r21, 0x11	; 17
    33ac:	07 c0       	rjmp	.+14     	; 0x33bc <__udivmodhi4_ep>

000033ae <__udivmodhi4_loop>:
    33ae:	aa 1f       	adc	r26, r26
    33b0:	bb 1f       	adc	r27, r27
    33b2:	a6 17       	cp	r26, r22
    33b4:	b7 07       	cpc	r27, r23
    33b6:	10 f0       	brcs	.+4      	; 0x33bc <__udivmodhi4_ep>
    33b8:	a6 1b       	sub	r26, r22
    33ba:	b7 0b       	sbc	r27, r23

000033bc <__udivmodhi4_ep>:
    33bc:	88 1f       	adc	r24, r24
    33be:	99 1f       	adc	r25, r25
    33c0:	5a 95       	dec	r21
    33c2:	a9 f7       	brne	.-22     	; 0x33ae <__udivmodhi4_loop>
    33c4:	80 95       	com	r24
    33c6:	90 95       	com	r25
    33c8:	bc 01       	movw	r22, r24
    33ca:	cd 01       	movw	r24, r26
    33cc:	08 95       	ret

000033ce <__prologue_saves__>:
    33ce:	2f 92       	push	r2
    33d0:	3f 92       	push	r3
    33d2:	4f 92       	push	r4
    33d4:	5f 92       	push	r5
    33d6:	6f 92       	push	r6
    33d8:	7f 92       	push	r7
    33da:	8f 92       	push	r8
    33dc:	9f 92       	push	r9
    33de:	af 92       	push	r10
    33e0:	bf 92       	push	r11
    33e2:	cf 92       	push	r12
    33e4:	df 92       	push	r13
    33e6:	ef 92       	push	r14
    33e8:	ff 92       	push	r15
    33ea:	0f 93       	push	r16
    33ec:	1f 93       	push	r17
    33ee:	cf 93       	push	r28
    33f0:	df 93       	push	r29
    33f2:	cd b7       	in	r28, 0x3d	; 61
    33f4:	de b7       	in	r29, 0x3e	; 62
    33f6:	ca 1b       	sub	r28, r26
    33f8:	db 0b       	sbc	r29, r27
    33fa:	0f b6       	in	r0, 0x3f	; 63
    33fc:	f8 94       	cli
    33fe:	de bf       	out	0x3e, r29	; 62
    3400:	0f be       	out	0x3f, r0	; 63
    3402:	cd bf       	out	0x3d, r28	; 61
    3404:	09 94       	ijmp

00003406 <__epilogue_restores__>:
    3406:	2a 88       	ldd	r2, Y+18	; 0x12
    3408:	39 88       	ldd	r3, Y+17	; 0x11
    340a:	48 88       	ldd	r4, Y+16	; 0x10
    340c:	5f 84       	ldd	r5, Y+15	; 0x0f
    340e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3410:	7d 84       	ldd	r7, Y+13	; 0x0d
    3412:	8c 84       	ldd	r8, Y+12	; 0x0c
    3414:	9b 84       	ldd	r9, Y+11	; 0x0b
    3416:	aa 84       	ldd	r10, Y+10	; 0x0a
    3418:	b9 84       	ldd	r11, Y+9	; 0x09
    341a:	c8 84       	ldd	r12, Y+8	; 0x08
    341c:	df 80       	ldd	r13, Y+7	; 0x07
    341e:	ee 80       	ldd	r14, Y+6	; 0x06
    3420:	fd 80       	ldd	r15, Y+5	; 0x05
    3422:	0c 81       	ldd	r16, Y+4	; 0x04
    3424:	1b 81       	ldd	r17, Y+3	; 0x03
    3426:	aa 81       	ldd	r26, Y+2	; 0x02
    3428:	b9 81       	ldd	r27, Y+1	; 0x01
    342a:	ce 0f       	add	r28, r30
    342c:	d1 1d       	adc	r29, r1
    342e:	0f b6       	in	r0, 0x3f	; 63
    3430:	f8 94       	cli
    3432:	de bf       	out	0x3e, r29	; 62
    3434:	0f be       	out	0x3f, r0	; 63
    3436:	cd bf       	out	0x3d, r28	; 61
    3438:	ed 01       	movw	r28, r26
    343a:	08 95       	ret

0000343c <_exit>:
    343c:	f8 94       	cli

0000343e <__stop_program>:
    343e:	ff cf       	rjmp	.-2      	; 0x343e <__stop_program>
